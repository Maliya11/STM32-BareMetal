
15_InputInterrupt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000012e0  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000044  08001410  08001410  00011410  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001454  08001454  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  08001454  08001454  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001454  08001454  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001454  08001454  00011454  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001458  08001458  00011458  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  0800145c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000016c  2000005c  080014b8  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c8  080014b8  000201c8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020085  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001372  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000066e  00000000  00000000  0002143a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000198  00000000  00000000  00021aa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000117  00000000  00000000  00021c40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000201d  00000000  00000000  00021d57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00002194  00000000  00000000  00023d74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0005a0c9  00000000  00000000  00025f08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000c94  00000000  00000000  0007ffd4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  00080c68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	2000005c 	.word	0x2000005c
 800014c:	00000000 	.word	0x00000000
 8000150:	080013f8 	.word	0x080013f8

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000060 	.word	0x20000060
 800016c:	080013f8 	.word	0x080013f8

08000170 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000170:	b480      	push	{r7}
 8000172:	b083      	sub	sp, #12
 8000174:	af00      	add	r7, sp, #0
 8000176:	4603      	mov	r3, r0
 8000178:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800017a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800017e:	2b00      	cmp	r3, #0
 8000180:	db0b      	blt.n	800019a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000182:	79fb      	ldrb	r3, [r7, #7]
 8000184:	f003 021f 	and.w	r2, r3, #31
 8000188:	4906      	ldr	r1, [pc, #24]	; (80001a4 <__NVIC_EnableIRQ+0x34>)
 800018a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800018e:	095b      	lsrs	r3, r3, #5
 8000190:	2001      	movs	r0, #1
 8000192:	fa00 f202 	lsl.w	r2, r0, r2
 8000196:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800019a:	bf00      	nop
 800019c:	370c      	adds	r7, #12
 800019e:	46bd      	mov	sp, r7
 80001a0:	bc80      	pop	{r7}
 80001a2:	4770      	bx	lr
 80001a4:	e000e100 	.word	0xe000e100

080001a8 <pa15_exti_init>:
#include "exti.h"

#define GPIOAEN     (1U<<2)

void pa15_exti_init(void)
{
 80001a8:	b580      	push	{r7, lr}
 80001aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80001ac:	b672      	cpsid	i
}
 80001ae:	bf00      	nop
	/*Disable global interrupts*/
	__disable_irq();

	/*Enable clock access for GPIOA*/
	RCC->APB2ENR |= GPIOAEN;
 80001b0:	4b19      	ldr	r3, [pc, #100]	; (8000218 <pa15_exti_init+0x70>)
 80001b2:	699b      	ldr	r3, [r3, #24]
 80001b4:	4a18      	ldr	r2, [pc, #96]	; (8000218 <pa15_exti_init+0x70>)
 80001b6:	f043 0304 	orr.w	r3, r3, #4
 80001ba:	6193      	str	r3, [r2, #24]

	/*Set PA15 as input*/
	GPIOA->CRH &= ~(1U<<28);
 80001bc:	4b17      	ldr	r3, [pc, #92]	; (800021c <pa15_exti_init+0x74>)
 80001be:	685b      	ldr	r3, [r3, #4]
 80001c0:	4a16      	ldr	r2, [pc, #88]	; (800021c <pa15_exti_init+0x74>)
 80001c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80001c6:	6053      	str	r3, [r2, #4]
	GPIOA->CRH &= ~(1U<<29);
 80001c8:	4b14      	ldr	r3, [pc, #80]	; (800021c <pa15_exti_init+0x74>)
 80001ca:	685b      	ldr	r3, [r3, #4]
 80001cc:	4a13      	ldr	r2, [pc, #76]	; (800021c <pa15_exti_init+0x74>)
 80001ce:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80001d2:	6053      	str	r3, [r2, #4]
	GPIOA->CRH |=  (1U<<30);
 80001d4:	4b11      	ldr	r3, [pc, #68]	; (800021c <pa15_exti_init+0x74>)
 80001d6:	685b      	ldr	r3, [r3, #4]
 80001d8:	4a10      	ldr	r2, [pc, #64]	; (800021c <pa15_exti_init+0x74>)
 80001da:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80001de:	6053      	str	r3, [r2, #4]
	GPIOA->CRH &= ~(1U<<31);
 80001e0:	4b0e      	ldr	r3, [pc, #56]	; (800021c <pa15_exti_init+0x74>)
 80001e2:	685b      	ldr	r3, [r3, #4]
 80001e4:	4a0d      	ldr	r2, [pc, #52]	; (800021c <pa15_exti_init+0x74>)
 80001e6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80001ea:	6053      	str	r3, [r2, #4]

	/*Select PORTA for EXTI15*/
	AFIO->EXTICR[3] = 0;
 80001ec:	4b0c      	ldr	r3, [pc, #48]	; (8000220 <pa15_exti_init+0x78>)
 80001ee:	2200      	movs	r2, #0
 80001f0:	615a      	str	r2, [r3, #20]

	/*Un-mask EXTI15*/
	EXTI->IMR |= (1U<<15);
 80001f2:	4b0c      	ldr	r3, [pc, #48]	; (8000224 <pa15_exti_init+0x7c>)
 80001f4:	681b      	ldr	r3, [r3, #0]
 80001f6:	4a0b      	ldr	r2, [pc, #44]	; (8000224 <pa15_exti_init+0x7c>)
 80001f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80001fc:	6013      	str	r3, [r2, #0]

	/*Select falling edge trigger*/
	EXTI->FTSR |= (1U<<15);
 80001fe:	4b09      	ldr	r3, [pc, #36]	; (8000224 <pa15_exti_init+0x7c>)
 8000200:	68db      	ldr	r3, [r3, #12]
 8000202:	4a08      	ldr	r2, [pc, #32]	; (8000224 <pa15_exti_init+0x7c>)
 8000204:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000208:	60d3      	str	r3, [r2, #12]

	/*Enable EXTI15 line in NVIC*/
	NVIC_EnableIRQ(EXTI15_10_IRQn);
 800020a:	2028      	movs	r0, #40	; 0x28
 800020c:	f7ff ffb0 	bl	8000170 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 8000210:	b662      	cpsie	i
}
 8000212:	bf00      	nop

	/*Enable global interrupts*/
	__enable_irq();
}
 8000214:	bf00      	nop
 8000216:	bd80      	pop	{r7, pc}
 8000218:	40021000 	.word	0x40021000
 800021c:	40010800 	.word	0x40010800
 8000220:	40010000 	.word	0x40010000
 8000224:	40010400 	.word	0x40010400

08000228 <main>:
#define LED_PIN             PIN13

static void exti_callback(void);

int main(void)
{
 8000228:	b580      	push	{r7, lr}
 800022a:	af00      	add	r7, sp, #0
	RCC -> APB2ENR |= GPIOC_EN;
 800022c:	4b11      	ldr	r3, [pc, #68]	; (8000274 <main+0x4c>)
 800022e:	699b      	ldr	r3, [r3, #24]
 8000230:	4a10      	ldr	r2, [pc, #64]	; (8000274 <main+0x4c>)
 8000232:	f043 0310 	orr.w	r3, r3, #16
 8000236:	6193      	str	r3, [r2, #24]

	GPIOC->CRH |= (1U << 20);
 8000238:	4b0f      	ldr	r3, [pc, #60]	; (8000278 <main+0x50>)
 800023a:	685b      	ldr	r3, [r3, #4]
 800023c:	4a0e      	ldr	r2, [pc, #56]	; (8000278 <main+0x50>)
 800023e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000242:	6053      	str	r3, [r2, #4]
	GPIOC->CRH |= (1U << 21);
 8000244:	4b0c      	ldr	r3, [pc, #48]	; (8000278 <main+0x50>)
 8000246:	685b      	ldr	r3, [r3, #4]
 8000248:	4a0b      	ldr	r2, [pc, #44]	; (8000278 <main+0x50>)
 800024a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800024e:	6053      	str	r3, [r2, #4]
	GPIOC->CRH &= ~(1U << 22);
 8000250:	4b09      	ldr	r3, [pc, #36]	; (8000278 <main+0x50>)
 8000252:	685b      	ldr	r3, [r3, #4]
 8000254:	4a08      	ldr	r2, [pc, #32]	; (8000278 <main+0x50>)
 8000256:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800025a:	6053      	str	r3, [r2, #4]
	GPIOC->CRH &= ~(1U << 23);
 800025c:	4b06      	ldr	r3, [pc, #24]	; (8000278 <main+0x50>)
 800025e:	685b      	ldr	r3, [r3, #4]
 8000260:	4a05      	ldr	r2, [pc, #20]	; (8000278 <main+0x50>)
 8000262:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8000266:	6053      	str	r3, [r2, #4]

	pa15_exti_init();
 8000268:	f7ff ff9e 	bl	80001a8 <pa15_exti_init>
	uart1_tx_init();
 800026c:	f000 f8d8 	bl	8000420 <uart1_tx_init>


	while(1)
 8000270:	e7fe      	b.n	8000270 <main+0x48>
 8000272:	bf00      	nop
 8000274:	40021000 	.word	0x40021000
 8000278:	40011000 	.word	0x40011000

0800027c <exti_callback>:

	}
}

static void exti_callback(void)
{
 800027c:	b580      	push	{r7, lr}
 800027e:	af00      	add	r7, sp, #0
	printf("BTN pressed...\n\r");
 8000280:	4805      	ldr	r0, [pc, #20]	; (8000298 <exti_callback+0x1c>)
 8000282:	f000 fa3b 	bl	80006fc <iprintf>
	GPIOC->ODR ^= LED_PIN;
 8000286:	4b05      	ldr	r3, [pc, #20]	; (800029c <exti_callback+0x20>)
 8000288:	68db      	ldr	r3, [r3, #12]
 800028a:	4a04      	ldr	r2, [pc, #16]	; (800029c <exti_callback+0x20>)
 800028c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8000290:	60d3      	str	r3, [r2, #12]
}
 8000292:	bf00      	nop
 8000294:	bd80      	pop	{r7, pc}
 8000296:	bf00      	nop
 8000298:	08001410 	.word	0x08001410
 800029c:	40011000 	.word	0x40011000

080002a0 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void)
{
 80002a0:	b580      	push	{r7, lr}
 80002a2:	af00      	add	r7, sp, #0
	if((EXTI->PR & LINE15) != 0)
 80002a4:	4b07      	ldr	r3, [pc, #28]	; (80002c4 <EXTI15_10_IRQHandler+0x24>)
 80002a6:	695b      	ldr	r3, [r3, #20]
 80002a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d007      	beq.n	80002c0 <EXTI15_10_IRQHandler+0x20>
	{
		/*Clear the PR flag*/
		EXTI->PR |= LINE15;
 80002b0:	4b04      	ldr	r3, [pc, #16]	; (80002c4 <EXTI15_10_IRQHandler+0x24>)
 80002b2:	695b      	ldr	r3, [r3, #20]
 80002b4:	4a03      	ldr	r2, [pc, #12]	; (80002c4 <EXTI15_10_IRQHandler+0x24>)
 80002b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80002ba:	6153      	str	r3, [r2, #20]
		//do something
		exti_callback();
 80002bc:	f7ff ffde 	bl	800027c <exti_callback>
	}
}
 80002c0:	bf00      	nop
 80002c2:	bd80      	pop	{r7, pc}
 80002c4:	40010400 	.word	0x40010400

080002c8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80002c8:	b580      	push	{r7, lr}
 80002ca:	b086      	sub	sp, #24
 80002cc:	af00      	add	r7, sp, #0
 80002ce:	60f8      	str	r0, [r7, #12]
 80002d0:	60b9      	str	r1, [r7, #8]
 80002d2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80002d4:	2300      	movs	r3, #0
 80002d6:	617b      	str	r3, [r7, #20]
 80002d8:	e00a      	b.n	80002f0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80002da:	f3af 8000 	nop.w
 80002de:	4601      	mov	r1, r0
 80002e0:	68bb      	ldr	r3, [r7, #8]
 80002e2:	1c5a      	adds	r2, r3, #1
 80002e4:	60ba      	str	r2, [r7, #8]
 80002e6:	b2ca      	uxtb	r2, r1
 80002e8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80002ea:	697b      	ldr	r3, [r7, #20]
 80002ec:	3301      	adds	r3, #1
 80002ee:	617b      	str	r3, [r7, #20]
 80002f0:	697a      	ldr	r2, [r7, #20]
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	429a      	cmp	r2, r3
 80002f6:	dbf0      	blt.n	80002da <_read+0x12>
  }

  return len;
 80002f8:	687b      	ldr	r3, [r7, #4]
}
 80002fa:	4618      	mov	r0, r3
 80002fc:	3718      	adds	r7, #24
 80002fe:	46bd      	mov	sp, r7
 8000300:	bd80      	pop	{r7, pc}

08000302 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000302:	b580      	push	{r7, lr}
 8000304:	b086      	sub	sp, #24
 8000306:	af00      	add	r7, sp, #0
 8000308:	60f8      	str	r0, [r7, #12]
 800030a:	60b9      	str	r1, [r7, #8]
 800030c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800030e:	2300      	movs	r3, #0
 8000310:	617b      	str	r3, [r7, #20]
 8000312:	e009      	b.n	8000328 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000314:	68bb      	ldr	r3, [r7, #8]
 8000316:	1c5a      	adds	r2, r3, #1
 8000318:	60ba      	str	r2, [r7, #8]
 800031a:	781b      	ldrb	r3, [r3, #0]
 800031c:	4618      	mov	r0, r3
 800031e:	f000 f873 	bl	8000408 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000322:	697b      	ldr	r3, [r7, #20]
 8000324:	3301      	adds	r3, #1
 8000326:	617b      	str	r3, [r7, #20]
 8000328:	697a      	ldr	r2, [r7, #20]
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	429a      	cmp	r2, r3
 800032e:	dbf1      	blt.n	8000314 <_write+0x12>
  }
  return len;
 8000330:	687b      	ldr	r3, [r7, #4]
}
 8000332:	4618      	mov	r0, r3
 8000334:	3718      	adds	r7, #24
 8000336:	46bd      	mov	sp, r7
 8000338:	bd80      	pop	{r7, pc}

0800033a <_close>:

int _close(int file)
{
 800033a:	b480      	push	{r7}
 800033c:	b083      	sub	sp, #12
 800033e:	af00      	add	r7, sp, #0
 8000340:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000342:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000346:	4618      	mov	r0, r3
 8000348:	370c      	adds	r7, #12
 800034a:	46bd      	mov	sp, r7
 800034c:	bc80      	pop	{r7}
 800034e:	4770      	bx	lr

08000350 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000350:	b480      	push	{r7}
 8000352:	b083      	sub	sp, #12
 8000354:	af00      	add	r7, sp, #0
 8000356:	6078      	str	r0, [r7, #4]
 8000358:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800035a:	683b      	ldr	r3, [r7, #0]
 800035c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000360:	605a      	str	r2, [r3, #4]
  return 0;
 8000362:	2300      	movs	r3, #0
}
 8000364:	4618      	mov	r0, r3
 8000366:	370c      	adds	r7, #12
 8000368:	46bd      	mov	sp, r7
 800036a:	bc80      	pop	{r7}
 800036c:	4770      	bx	lr

0800036e <_isatty>:

int _isatty(int file)
{
 800036e:	b480      	push	{r7}
 8000370:	b083      	sub	sp, #12
 8000372:	af00      	add	r7, sp, #0
 8000374:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000376:	2301      	movs	r3, #1
}
 8000378:	4618      	mov	r0, r3
 800037a:	370c      	adds	r7, #12
 800037c:	46bd      	mov	sp, r7
 800037e:	bc80      	pop	{r7}
 8000380:	4770      	bx	lr

08000382 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000382:	b480      	push	{r7}
 8000384:	b085      	sub	sp, #20
 8000386:	af00      	add	r7, sp, #0
 8000388:	60f8      	str	r0, [r7, #12]
 800038a:	60b9      	str	r1, [r7, #8]
 800038c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800038e:	2300      	movs	r3, #0
}
 8000390:	4618      	mov	r0, r3
 8000392:	3714      	adds	r7, #20
 8000394:	46bd      	mov	sp, r7
 8000396:	bc80      	pop	{r7}
 8000398:	4770      	bx	lr
	...

0800039c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800039c:	b580      	push	{r7, lr}
 800039e:	b086      	sub	sp, #24
 80003a0:	af00      	add	r7, sp, #0
 80003a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80003a4:	4a14      	ldr	r2, [pc, #80]	; (80003f8 <_sbrk+0x5c>)
 80003a6:	4b15      	ldr	r3, [pc, #84]	; (80003fc <_sbrk+0x60>)
 80003a8:	1ad3      	subs	r3, r2, r3
 80003aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80003ac:	697b      	ldr	r3, [r7, #20]
 80003ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80003b0:	4b13      	ldr	r3, [pc, #76]	; (8000400 <_sbrk+0x64>)
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	2b00      	cmp	r3, #0
 80003b6:	d102      	bne.n	80003be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80003b8:	4b11      	ldr	r3, [pc, #68]	; (8000400 <_sbrk+0x64>)
 80003ba:	4a12      	ldr	r2, [pc, #72]	; (8000404 <_sbrk+0x68>)
 80003bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80003be:	4b10      	ldr	r3, [pc, #64]	; (8000400 <_sbrk+0x64>)
 80003c0:	681a      	ldr	r2, [r3, #0]
 80003c2:	687b      	ldr	r3, [r7, #4]
 80003c4:	4413      	add	r3, r2
 80003c6:	693a      	ldr	r2, [r7, #16]
 80003c8:	429a      	cmp	r2, r3
 80003ca:	d207      	bcs.n	80003dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80003cc:	f000 fa3a 	bl	8000844 <__errno>
 80003d0:	4603      	mov	r3, r0
 80003d2:	220c      	movs	r2, #12
 80003d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80003d6:	f04f 33ff 	mov.w	r3, #4294967295
 80003da:	e009      	b.n	80003f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80003dc:	4b08      	ldr	r3, [pc, #32]	; (8000400 <_sbrk+0x64>)
 80003de:	681b      	ldr	r3, [r3, #0]
 80003e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80003e2:	4b07      	ldr	r3, [pc, #28]	; (8000400 <_sbrk+0x64>)
 80003e4:	681a      	ldr	r2, [r3, #0]
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	4413      	add	r3, r2
 80003ea:	4a05      	ldr	r2, [pc, #20]	; (8000400 <_sbrk+0x64>)
 80003ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80003ee:	68fb      	ldr	r3, [r7, #12]
}
 80003f0:	4618      	mov	r0, r3
 80003f2:	3718      	adds	r7, #24
 80003f4:	46bd      	mov	sp, r7
 80003f6:	bd80      	pop	{r7, pc}
 80003f8:	20005000 	.word	0x20005000
 80003fc:	00000400 	.word	0x00000400
 8000400:	20000078 	.word	0x20000078
 8000404:	200001c8 	.word	0x200001c8

08000408 <__io_putchar>:
static uint16_t compute_uart_bd(uint32_t PeriphClk, uint32_t BaudRate);

void uart1_write(int ch);

int __io_putchar(int ch)
{
 8000408:	b580      	push	{r7, lr}
 800040a:	b082      	sub	sp, #8
 800040c:	af00      	add	r7, sp, #0
 800040e:	6078      	str	r0, [r7, #4]
	uart1_write(ch);
 8000410:	6878      	ldr	r0, [r7, #4]
 8000412:	f000 f84d 	bl	80004b0 <uart1_write>
	return ch;
 8000416:	687b      	ldr	r3, [r7, #4]
}
 8000418:	4618      	mov	r0, r3
 800041a:	3708      	adds	r7, #8
 800041c:	46bd      	mov	sp, r7
 800041e:	bd80      	pop	{r7, pc}

08000420 <uart1_tx_init>:
	/*Enable uart module*/
	USART1->CR1 |= CR1_UE;
}

void uart1_tx_init(void)
{
 8000420:	b580      	push	{r7, lr}
 8000422:	af00      	add	r7, sp, #0
	/*******Configure usart gpio pins*********/
	/*Enable clock access to gpioa*/
	RCC->APB2ENR |= GPIOA_EN;
 8000424:	4b1d      	ldr	r3, [pc, #116]	; (800049c <uart1_tx_init+0x7c>)
 8000426:	699b      	ldr	r3, [r3, #24]
 8000428:	4a1c      	ldr	r2, [pc, #112]	; (800049c <uart1_tx_init+0x7c>)
 800042a:	f043 0304 	orr.w	r3, r3, #4
 800042e:	6193      	str	r3, [r2, #24]

	/*Set PA9 to alternate function mode*/
	GPIOA->CRH |= (1U<<4);
 8000430:	4b1b      	ldr	r3, [pc, #108]	; (80004a0 <uart1_tx_init+0x80>)
 8000432:	685b      	ldr	r3, [r3, #4]
 8000434:	4a1a      	ldr	r2, [pc, #104]	; (80004a0 <uart1_tx_init+0x80>)
 8000436:	f043 0310 	orr.w	r3, r3, #16
 800043a:	6053      	str	r3, [r2, #4]
	GPIOA->CRH |= (1U<<5);
 800043c:	4b18      	ldr	r3, [pc, #96]	; (80004a0 <uart1_tx_init+0x80>)
 800043e:	685b      	ldr	r3, [r3, #4]
 8000440:	4a17      	ldr	r2, [pc, #92]	; (80004a0 <uart1_tx_init+0x80>)
 8000442:	f043 0320 	orr.w	r3, r3, #32
 8000446:	6053      	str	r3, [r2, #4]
	GPIOA->CRH &= ~(1U<<6);
 8000448:	4b15      	ldr	r3, [pc, #84]	; (80004a0 <uart1_tx_init+0x80>)
 800044a:	685b      	ldr	r3, [r3, #4]
 800044c:	4a14      	ldr	r2, [pc, #80]	; (80004a0 <uart1_tx_init+0x80>)
 800044e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000452:	6053      	str	r3, [r2, #4]
	GPIOA->CRH |= (1U<<7);
 8000454:	4b12      	ldr	r3, [pc, #72]	; (80004a0 <uart1_tx_init+0x80>)
 8000456:	685b      	ldr	r3, [r3, #4]
 8000458:	4a11      	ldr	r2, [pc, #68]	; (80004a0 <uart1_tx_init+0x80>)
 800045a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800045e:	6053      	str	r3, [r2, #4]

	/*Set PA2 type to UART_TX*/
	AFIO->MAPR &= ~(1U<<2);
 8000460:	4b10      	ldr	r3, [pc, #64]	; (80004a4 <uart1_tx_init+0x84>)
 8000462:	685b      	ldr	r3, [r3, #4]
 8000464:	4a0f      	ldr	r2, [pc, #60]	; (80004a4 <uart1_tx_init+0x84>)
 8000466:	f023 0304 	bic.w	r3, r3, #4
 800046a:	6053      	str	r3, [r2, #4]

	/**********Configure uart module**************/
	/*Enable clock access to uart1*/
	RCC->APB2ENR |= UART1_EN;
 800046c:	4b0b      	ldr	r3, [pc, #44]	; (800049c <uart1_tx_init+0x7c>)
 800046e:	699b      	ldr	r3, [r3, #24]
 8000470:	4a0a      	ldr	r2, [pc, #40]	; (800049c <uart1_tx_init+0x7c>)
 8000472:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000476:	6193      	str	r3, [r2, #24]

	/*configure baudrate*/
	uart_set_baudrate(USART1,APB2_CLK,UART_BAUDRATE);
 8000478:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800047c:	490a      	ldr	r1, [pc, #40]	; (80004a8 <uart1_tx_init+0x88>)
 800047e:	480b      	ldr	r0, [pc, #44]	; (80004ac <uart1_tx_init+0x8c>)
 8000480:	f000 f82c 	bl	80004dc <uart_set_baudrate>

	/*Configure transfer direction*/
	USART1->CR1 = CR1_TE;  //SETTING THE VALUE
 8000484:	4b09      	ldr	r3, [pc, #36]	; (80004ac <uart1_tx_init+0x8c>)
 8000486:	2208      	movs	r2, #8
 8000488:	60da      	str	r2, [r3, #12]
	//TO ERASE THE UART REGISTER

	/*Enable uart module*/
	USART1->CR1 |= CR1_UE;
 800048a:	4b08      	ldr	r3, [pc, #32]	; (80004ac <uart1_tx_init+0x8c>)
 800048c:	68db      	ldr	r3, [r3, #12]
 800048e:	4a07      	ldr	r2, [pc, #28]	; (80004ac <uart1_tx_init+0x8c>)
 8000490:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000494:	60d3      	str	r3, [r2, #12]
}
 8000496:	bf00      	nop
 8000498:	bd80      	pop	{r7, pc}
 800049a:	bf00      	nop
 800049c:	40021000 	.word	0x40021000
 80004a0:	40010800 	.word	0x40010800
 80004a4:	40010000 	.word	0x40010000
 80004a8:	00f42400 	.word	0x00f42400
 80004ac:	40013800 	.word	0x40013800

080004b0 <uart1_write>:
	/*Read data*/
	return USART1->DR;
}

void uart1_write(int ch)
{
 80004b0:	b480      	push	{r7}
 80004b2:	b083      	sub	sp, #12
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	6078      	str	r0, [r7, #4]
	/*Make sure transmit data register is empty*/
	while(!(USART1->SR & SR_TXE)){}
 80004b8:	bf00      	nop
 80004ba:	4b07      	ldr	r3, [pc, #28]	; (80004d8 <uart1_write+0x28>)
 80004bc:	681b      	ldr	r3, [r3, #0]
 80004be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80004c2:	2b00      	cmp	r3, #0
 80004c4:	d0f9      	beq.n	80004ba <uart1_write+0xa>

	/*Write to transmit data register*/
	USART1->DR = (ch & 0xFF); //to transmit 8 bit
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	4a03      	ldr	r2, [pc, #12]	; (80004d8 <uart1_write+0x28>)
 80004ca:	b2db      	uxtb	r3, r3
 80004cc:	6053      	str	r3, [r2, #4]

}
 80004ce:	bf00      	nop
 80004d0:	370c      	adds	r7, #12
 80004d2:	46bd      	mov	sp, r7
 80004d4:	bc80      	pop	{r7}
 80004d6:	4770      	bx	lr
 80004d8:	40013800 	.word	0x40013800

080004dc <uart_set_baudrate>:

static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t BaudRate)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b084      	sub	sp, #16
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	60f8      	str	r0, [r7, #12]
 80004e4:	60b9      	str	r1, [r7, #8]
 80004e6:	607a      	str	r2, [r7, #4]
	USARTx->BRR = compute_uart_bd(PeriphClk, BaudRate);
 80004e8:	6879      	ldr	r1, [r7, #4]
 80004ea:	68b8      	ldr	r0, [r7, #8]
 80004ec:	f000 f808 	bl	8000500 <compute_uart_bd>
 80004f0:	4603      	mov	r3, r0
 80004f2:	461a      	mov	r2, r3
 80004f4:	68fb      	ldr	r3, [r7, #12]
 80004f6:	609a      	str	r2, [r3, #8]
}
 80004f8:	bf00      	nop
 80004fa:	3710      	adds	r7, #16
 80004fc:	46bd      	mov	sp, r7
 80004fe:	bd80      	pop	{r7, pc}

08000500 <compute_uart_bd>:

static uint16_t compute_uart_bd(uint32_t PeriphClk, uint32_t BaudRate)
{
 8000500:	b480      	push	{r7}
 8000502:	b083      	sub	sp, #12
 8000504:	af00      	add	r7, sp, #0
 8000506:	6078      	str	r0, [r7, #4]
 8000508:	6039      	str	r1, [r7, #0]
	return ((PeriphClk + (BaudRate/2U))/BaudRate);
 800050a:	683b      	ldr	r3, [r7, #0]
 800050c:	085a      	lsrs	r2, r3, #1
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	441a      	add	r2, r3
 8000512:	683b      	ldr	r3, [r7, #0]
 8000514:	fbb2 f3f3 	udiv	r3, r2, r3
 8000518:	b29b      	uxth	r3, r3
}
 800051a:	4618      	mov	r0, r3
 800051c:	370c      	adds	r7, #12
 800051e:	46bd      	mov	sp, r7
 8000520:	bc80      	pop	{r7}
 8000522:	4770      	bx	lr

08000524 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000524:	480d      	ldr	r0, [pc, #52]	; (800055c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000526:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000528:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800052c:	480c      	ldr	r0, [pc, #48]	; (8000560 <LoopForever+0x6>)
  ldr r1, =_edata
 800052e:	490d      	ldr	r1, [pc, #52]	; (8000564 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000530:	4a0d      	ldr	r2, [pc, #52]	; (8000568 <LoopForever+0xe>)
  movs r3, #0
 8000532:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000534:	e002      	b.n	800053c <LoopCopyDataInit>

08000536 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000536:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000538:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800053a:	3304      	adds	r3, #4

0800053c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800053c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800053e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000540:	d3f9      	bcc.n	8000536 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000542:	4a0a      	ldr	r2, [pc, #40]	; (800056c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000544:	4c0a      	ldr	r4, [pc, #40]	; (8000570 <LoopForever+0x16>)
  movs r3, #0
 8000546:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000548:	e001      	b.n	800054e <LoopFillZerobss>

0800054a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800054a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800054c:	3204      	adds	r2, #4

0800054e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800054e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000550:	d3fb      	bcc.n	800054a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000552:	f000 f97d 	bl	8000850 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000556:	f7ff fe67 	bl	8000228 <main>

0800055a <LoopForever>:

LoopForever:
  b LoopForever
 800055a:	e7fe      	b.n	800055a <LoopForever>
  ldr   r0, =_estack
 800055c:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000560:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000564:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000568:	0800145c 	.word	0x0800145c
  ldr r2, =_sbss
 800056c:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000570:	200001c8 	.word	0x200001c8

08000574 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000574:	e7fe      	b.n	8000574 <ADC1_2_IRQHandler>
	...

08000578 <std>:
 8000578:	2300      	movs	r3, #0
 800057a:	b510      	push	{r4, lr}
 800057c:	4604      	mov	r4, r0
 800057e:	e9c0 3300 	strd	r3, r3, [r0]
 8000582:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000586:	6083      	str	r3, [r0, #8]
 8000588:	8181      	strh	r1, [r0, #12]
 800058a:	6643      	str	r3, [r0, #100]	; 0x64
 800058c:	81c2      	strh	r2, [r0, #14]
 800058e:	6183      	str	r3, [r0, #24]
 8000590:	4619      	mov	r1, r3
 8000592:	2208      	movs	r2, #8
 8000594:	305c      	adds	r0, #92	; 0x5c
 8000596:	f000 f906 	bl	80007a6 <memset>
 800059a:	4b0d      	ldr	r3, [pc, #52]	; (80005d0 <std+0x58>)
 800059c:	6224      	str	r4, [r4, #32]
 800059e:	6263      	str	r3, [r4, #36]	; 0x24
 80005a0:	4b0c      	ldr	r3, [pc, #48]	; (80005d4 <std+0x5c>)
 80005a2:	62a3      	str	r3, [r4, #40]	; 0x28
 80005a4:	4b0c      	ldr	r3, [pc, #48]	; (80005d8 <std+0x60>)
 80005a6:	62e3      	str	r3, [r4, #44]	; 0x2c
 80005a8:	4b0c      	ldr	r3, [pc, #48]	; (80005dc <std+0x64>)
 80005aa:	6323      	str	r3, [r4, #48]	; 0x30
 80005ac:	4b0c      	ldr	r3, [pc, #48]	; (80005e0 <std+0x68>)
 80005ae:	429c      	cmp	r4, r3
 80005b0:	d006      	beq.n	80005c0 <std+0x48>
 80005b2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80005b6:	4294      	cmp	r4, r2
 80005b8:	d002      	beq.n	80005c0 <std+0x48>
 80005ba:	33d0      	adds	r3, #208	; 0xd0
 80005bc:	429c      	cmp	r4, r3
 80005be:	d105      	bne.n	80005cc <std+0x54>
 80005c0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80005c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80005c8:	f000 b966 	b.w	8000898 <__retarget_lock_init_recursive>
 80005cc:	bd10      	pop	{r4, pc}
 80005ce:	bf00      	nop
 80005d0:	08000721 	.word	0x08000721
 80005d4:	08000743 	.word	0x08000743
 80005d8:	0800077b 	.word	0x0800077b
 80005dc:	0800079f 	.word	0x0800079f
 80005e0:	2000007c 	.word	0x2000007c

080005e4 <stdio_exit_handler>:
 80005e4:	4a02      	ldr	r2, [pc, #8]	; (80005f0 <stdio_exit_handler+0xc>)
 80005e6:	4903      	ldr	r1, [pc, #12]	; (80005f4 <stdio_exit_handler+0x10>)
 80005e8:	4803      	ldr	r0, [pc, #12]	; (80005f8 <stdio_exit_handler+0x14>)
 80005ea:	f000 b869 	b.w	80006c0 <_fwalk_sglue>
 80005ee:	bf00      	nop
 80005f0:	20000000 	.word	0x20000000
 80005f4:	08001139 	.word	0x08001139
 80005f8:	2000000c 	.word	0x2000000c

080005fc <cleanup_stdio>:
 80005fc:	6841      	ldr	r1, [r0, #4]
 80005fe:	4b0c      	ldr	r3, [pc, #48]	; (8000630 <cleanup_stdio+0x34>)
 8000600:	b510      	push	{r4, lr}
 8000602:	4299      	cmp	r1, r3
 8000604:	4604      	mov	r4, r0
 8000606:	d001      	beq.n	800060c <cleanup_stdio+0x10>
 8000608:	f000 fd96 	bl	8001138 <_fflush_r>
 800060c:	68a1      	ldr	r1, [r4, #8]
 800060e:	4b09      	ldr	r3, [pc, #36]	; (8000634 <cleanup_stdio+0x38>)
 8000610:	4299      	cmp	r1, r3
 8000612:	d002      	beq.n	800061a <cleanup_stdio+0x1e>
 8000614:	4620      	mov	r0, r4
 8000616:	f000 fd8f 	bl	8001138 <_fflush_r>
 800061a:	68e1      	ldr	r1, [r4, #12]
 800061c:	4b06      	ldr	r3, [pc, #24]	; (8000638 <cleanup_stdio+0x3c>)
 800061e:	4299      	cmp	r1, r3
 8000620:	d004      	beq.n	800062c <cleanup_stdio+0x30>
 8000622:	4620      	mov	r0, r4
 8000624:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000628:	f000 bd86 	b.w	8001138 <_fflush_r>
 800062c:	bd10      	pop	{r4, pc}
 800062e:	bf00      	nop
 8000630:	2000007c 	.word	0x2000007c
 8000634:	200000e4 	.word	0x200000e4
 8000638:	2000014c 	.word	0x2000014c

0800063c <global_stdio_init.part.0>:
 800063c:	b510      	push	{r4, lr}
 800063e:	4b0b      	ldr	r3, [pc, #44]	; (800066c <global_stdio_init.part.0+0x30>)
 8000640:	4c0b      	ldr	r4, [pc, #44]	; (8000670 <global_stdio_init.part.0+0x34>)
 8000642:	4a0c      	ldr	r2, [pc, #48]	; (8000674 <global_stdio_init.part.0+0x38>)
 8000644:	4620      	mov	r0, r4
 8000646:	601a      	str	r2, [r3, #0]
 8000648:	2104      	movs	r1, #4
 800064a:	2200      	movs	r2, #0
 800064c:	f7ff ff94 	bl	8000578 <std>
 8000650:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8000654:	2201      	movs	r2, #1
 8000656:	2109      	movs	r1, #9
 8000658:	f7ff ff8e 	bl	8000578 <std>
 800065c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8000660:	2202      	movs	r2, #2
 8000662:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000666:	2112      	movs	r1, #18
 8000668:	f7ff bf86 	b.w	8000578 <std>
 800066c:	200001b4 	.word	0x200001b4
 8000670:	2000007c 	.word	0x2000007c
 8000674:	080005e5 	.word	0x080005e5

08000678 <__sfp_lock_acquire>:
 8000678:	4801      	ldr	r0, [pc, #4]	; (8000680 <__sfp_lock_acquire+0x8>)
 800067a:	f000 b90e 	b.w	800089a <__retarget_lock_acquire_recursive>
 800067e:	bf00      	nop
 8000680:	200001bd 	.word	0x200001bd

08000684 <__sfp_lock_release>:
 8000684:	4801      	ldr	r0, [pc, #4]	; (800068c <__sfp_lock_release+0x8>)
 8000686:	f000 b909 	b.w	800089c <__retarget_lock_release_recursive>
 800068a:	bf00      	nop
 800068c:	200001bd 	.word	0x200001bd

08000690 <__sinit>:
 8000690:	b510      	push	{r4, lr}
 8000692:	4604      	mov	r4, r0
 8000694:	f7ff fff0 	bl	8000678 <__sfp_lock_acquire>
 8000698:	6a23      	ldr	r3, [r4, #32]
 800069a:	b11b      	cbz	r3, 80006a4 <__sinit+0x14>
 800069c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80006a0:	f7ff bff0 	b.w	8000684 <__sfp_lock_release>
 80006a4:	4b04      	ldr	r3, [pc, #16]	; (80006b8 <__sinit+0x28>)
 80006a6:	6223      	str	r3, [r4, #32]
 80006a8:	4b04      	ldr	r3, [pc, #16]	; (80006bc <__sinit+0x2c>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d1f5      	bne.n	800069c <__sinit+0xc>
 80006b0:	f7ff ffc4 	bl	800063c <global_stdio_init.part.0>
 80006b4:	e7f2      	b.n	800069c <__sinit+0xc>
 80006b6:	bf00      	nop
 80006b8:	080005fd 	.word	0x080005fd
 80006bc:	200001b4 	.word	0x200001b4

080006c0 <_fwalk_sglue>:
 80006c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80006c4:	4607      	mov	r7, r0
 80006c6:	4688      	mov	r8, r1
 80006c8:	4614      	mov	r4, r2
 80006ca:	2600      	movs	r6, #0
 80006cc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80006d0:	f1b9 0901 	subs.w	r9, r9, #1
 80006d4:	d505      	bpl.n	80006e2 <_fwalk_sglue+0x22>
 80006d6:	6824      	ldr	r4, [r4, #0]
 80006d8:	2c00      	cmp	r4, #0
 80006da:	d1f7      	bne.n	80006cc <_fwalk_sglue+0xc>
 80006dc:	4630      	mov	r0, r6
 80006de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80006e2:	89ab      	ldrh	r3, [r5, #12]
 80006e4:	2b01      	cmp	r3, #1
 80006e6:	d907      	bls.n	80006f8 <_fwalk_sglue+0x38>
 80006e8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80006ec:	3301      	adds	r3, #1
 80006ee:	d003      	beq.n	80006f8 <_fwalk_sglue+0x38>
 80006f0:	4629      	mov	r1, r5
 80006f2:	4638      	mov	r0, r7
 80006f4:	47c0      	blx	r8
 80006f6:	4306      	orrs	r6, r0
 80006f8:	3568      	adds	r5, #104	; 0x68
 80006fa:	e7e9      	b.n	80006d0 <_fwalk_sglue+0x10>

080006fc <iprintf>:
 80006fc:	b40f      	push	{r0, r1, r2, r3}
 80006fe:	b507      	push	{r0, r1, r2, lr}
 8000700:	4906      	ldr	r1, [pc, #24]	; (800071c <iprintf+0x20>)
 8000702:	ab04      	add	r3, sp, #16
 8000704:	6808      	ldr	r0, [r1, #0]
 8000706:	f853 2b04 	ldr.w	r2, [r3], #4
 800070a:	6881      	ldr	r1, [r0, #8]
 800070c:	9301      	str	r3, [sp, #4]
 800070e:	f000 f9e3 	bl	8000ad8 <_vfiprintf_r>
 8000712:	b003      	add	sp, #12
 8000714:	f85d eb04 	ldr.w	lr, [sp], #4
 8000718:	b004      	add	sp, #16
 800071a:	4770      	bx	lr
 800071c:	20000058 	.word	0x20000058

08000720 <__sread>:
 8000720:	b510      	push	{r4, lr}
 8000722:	460c      	mov	r4, r1
 8000724:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000728:	f000 f868 	bl	80007fc <_read_r>
 800072c:	2800      	cmp	r0, #0
 800072e:	bfab      	itete	ge
 8000730:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8000732:	89a3      	ldrhlt	r3, [r4, #12]
 8000734:	181b      	addge	r3, r3, r0
 8000736:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800073a:	bfac      	ite	ge
 800073c:	6563      	strge	r3, [r4, #84]	; 0x54
 800073e:	81a3      	strhlt	r3, [r4, #12]
 8000740:	bd10      	pop	{r4, pc}

08000742 <__swrite>:
 8000742:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000746:	461f      	mov	r7, r3
 8000748:	898b      	ldrh	r3, [r1, #12]
 800074a:	4605      	mov	r5, r0
 800074c:	05db      	lsls	r3, r3, #23
 800074e:	460c      	mov	r4, r1
 8000750:	4616      	mov	r6, r2
 8000752:	d505      	bpl.n	8000760 <__swrite+0x1e>
 8000754:	2302      	movs	r3, #2
 8000756:	2200      	movs	r2, #0
 8000758:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800075c:	f000 f83c 	bl	80007d8 <_lseek_r>
 8000760:	89a3      	ldrh	r3, [r4, #12]
 8000762:	4632      	mov	r2, r6
 8000764:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000768:	81a3      	strh	r3, [r4, #12]
 800076a:	4628      	mov	r0, r5
 800076c:	463b      	mov	r3, r7
 800076e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000772:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000776:	f000 b853 	b.w	8000820 <_write_r>

0800077a <__sseek>:
 800077a:	b510      	push	{r4, lr}
 800077c:	460c      	mov	r4, r1
 800077e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000782:	f000 f829 	bl	80007d8 <_lseek_r>
 8000786:	1c43      	adds	r3, r0, #1
 8000788:	89a3      	ldrh	r3, [r4, #12]
 800078a:	bf15      	itete	ne
 800078c:	6560      	strne	r0, [r4, #84]	; 0x54
 800078e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8000792:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8000796:	81a3      	strheq	r3, [r4, #12]
 8000798:	bf18      	it	ne
 800079a:	81a3      	strhne	r3, [r4, #12]
 800079c:	bd10      	pop	{r4, pc}

0800079e <__sclose>:
 800079e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80007a2:	f000 b809 	b.w	80007b8 <_close_r>

080007a6 <memset>:
 80007a6:	4603      	mov	r3, r0
 80007a8:	4402      	add	r2, r0
 80007aa:	4293      	cmp	r3, r2
 80007ac:	d100      	bne.n	80007b0 <memset+0xa>
 80007ae:	4770      	bx	lr
 80007b0:	f803 1b01 	strb.w	r1, [r3], #1
 80007b4:	e7f9      	b.n	80007aa <memset+0x4>
	...

080007b8 <_close_r>:
 80007b8:	b538      	push	{r3, r4, r5, lr}
 80007ba:	2300      	movs	r3, #0
 80007bc:	4d05      	ldr	r5, [pc, #20]	; (80007d4 <_close_r+0x1c>)
 80007be:	4604      	mov	r4, r0
 80007c0:	4608      	mov	r0, r1
 80007c2:	602b      	str	r3, [r5, #0]
 80007c4:	f7ff fdb9 	bl	800033a <_close>
 80007c8:	1c43      	adds	r3, r0, #1
 80007ca:	d102      	bne.n	80007d2 <_close_r+0x1a>
 80007cc:	682b      	ldr	r3, [r5, #0]
 80007ce:	b103      	cbz	r3, 80007d2 <_close_r+0x1a>
 80007d0:	6023      	str	r3, [r4, #0]
 80007d2:	bd38      	pop	{r3, r4, r5, pc}
 80007d4:	200001b8 	.word	0x200001b8

080007d8 <_lseek_r>:
 80007d8:	b538      	push	{r3, r4, r5, lr}
 80007da:	4604      	mov	r4, r0
 80007dc:	4608      	mov	r0, r1
 80007de:	4611      	mov	r1, r2
 80007e0:	2200      	movs	r2, #0
 80007e2:	4d05      	ldr	r5, [pc, #20]	; (80007f8 <_lseek_r+0x20>)
 80007e4:	602a      	str	r2, [r5, #0]
 80007e6:	461a      	mov	r2, r3
 80007e8:	f7ff fdcb 	bl	8000382 <_lseek>
 80007ec:	1c43      	adds	r3, r0, #1
 80007ee:	d102      	bne.n	80007f6 <_lseek_r+0x1e>
 80007f0:	682b      	ldr	r3, [r5, #0]
 80007f2:	b103      	cbz	r3, 80007f6 <_lseek_r+0x1e>
 80007f4:	6023      	str	r3, [r4, #0]
 80007f6:	bd38      	pop	{r3, r4, r5, pc}
 80007f8:	200001b8 	.word	0x200001b8

080007fc <_read_r>:
 80007fc:	b538      	push	{r3, r4, r5, lr}
 80007fe:	4604      	mov	r4, r0
 8000800:	4608      	mov	r0, r1
 8000802:	4611      	mov	r1, r2
 8000804:	2200      	movs	r2, #0
 8000806:	4d05      	ldr	r5, [pc, #20]	; (800081c <_read_r+0x20>)
 8000808:	602a      	str	r2, [r5, #0]
 800080a:	461a      	mov	r2, r3
 800080c:	f7ff fd5c 	bl	80002c8 <_read>
 8000810:	1c43      	adds	r3, r0, #1
 8000812:	d102      	bne.n	800081a <_read_r+0x1e>
 8000814:	682b      	ldr	r3, [r5, #0]
 8000816:	b103      	cbz	r3, 800081a <_read_r+0x1e>
 8000818:	6023      	str	r3, [r4, #0]
 800081a:	bd38      	pop	{r3, r4, r5, pc}
 800081c:	200001b8 	.word	0x200001b8

08000820 <_write_r>:
 8000820:	b538      	push	{r3, r4, r5, lr}
 8000822:	4604      	mov	r4, r0
 8000824:	4608      	mov	r0, r1
 8000826:	4611      	mov	r1, r2
 8000828:	2200      	movs	r2, #0
 800082a:	4d05      	ldr	r5, [pc, #20]	; (8000840 <_write_r+0x20>)
 800082c:	602a      	str	r2, [r5, #0]
 800082e:	461a      	mov	r2, r3
 8000830:	f7ff fd67 	bl	8000302 <_write>
 8000834:	1c43      	adds	r3, r0, #1
 8000836:	d102      	bne.n	800083e <_write_r+0x1e>
 8000838:	682b      	ldr	r3, [r5, #0]
 800083a:	b103      	cbz	r3, 800083e <_write_r+0x1e>
 800083c:	6023      	str	r3, [r4, #0]
 800083e:	bd38      	pop	{r3, r4, r5, pc}
 8000840:	200001b8 	.word	0x200001b8

08000844 <__errno>:
 8000844:	4b01      	ldr	r3, [pc, #4]	; (800084c <__errno+0x8>)
 8000846:	6818      	ldr	r0, [r3, #0]
 8000848:	4770      	bx	lr
 800084a:	bf00      	nop
 800084c:	20000058 	.word	0x20000058

08000850 <__libc_init_array>:
 8000850:	b570      	push	{r4, r5, r6, lr}
 8000852:	2600      	movs	r6, #0
 8000854:	4d0c      	ldr	r5, [pc, #48]	; (8000888 <__libc_init_array+0x38>)
 8000856:	4c0d      	ldr	r4, [pc, #52]	; (800088c <__libc_init_array+0x3c>)
 8000858:	1b64      	subs	r4, r4, r5
 800085a:	10a4      	asrs	r4, r4, #2
 800085c:	42a6      	cmp	r6, r4
 800085e:	d109      	bne.n	8000874 <__libc_init_array+0x24>
 8000860:	f000 fdca 	bl	80013f8 <_init>
 8000864:	2600      	movs	r6, #0
 8000866:	4d0a      	ldr	r5, [pc, #40]	; (8000890 <__libc_init_array+0x40>)
 8000868:	4c0a      	ldr	r4, [pc, #40]	; (8000894 <__libc_init_array+0x44>)
 800086a:	1b64      	subs	r4, r4, r5
 800086c:	10a4      	asrs	r4, r4, #2
 800086e:	42a6      	cmp	r6, r4
 8000870:	d105      	bne.n	800087e <__libc_init_array+0x2e>
 8000872:	bd70      	pop	{r4, r5, r6, pc}
 8000874:	f855 3b04 	ldr.w	r3, [r5], #4
 8000878:	4798      	blx	r3
 800087a:	3601      	adds	r6, #1
 800087c:	e7ee      	b.n	800085c <__libc_init_array+0xc>
 800087e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000882:	4798      	blx	r3
 8000884:	3601      	adds	r6, #1
 8000886:	e7f2      	b.n	800086e <__libc_init_array+0x1e>
 8000888:	08001454 	.word	0x08001454
 800088c:	08001454 	.word	0x08001454
 8000890:	08001454 	.word	0x08001454
 8000894:	08001458 	.word	0x08001458

08000898 <__retarget_lock_init_recursive>:
 8000898:	4770      	bx	lr

0800089a <__retarget_lock_acquire_recursive>:
 800089a:	4770      	bx	lr

0800089c <__retarget_lock_release_recursive>:
 800089c:	4770      	bx	lr
	...

080008a0 <_free_r>:
 80008a0:	b538      	push	{r3, r4, r5, lr}
 80008a2:	4605      	mov	r5, r0
 80008a4:	2900      	cmp	r1, #0
 80008a6:	d040      	beq.n	800092a <_free_r+0x8a>
 80008a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80008ac:	1f0c      	subs	r4, r1, #4
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	bfb8      	it	lt
 80008b2:	18e4      	addlt	r4, r4, r3
 80008b4:	f000 f8dc 	bl	8000a70 <__malloc_lock>
 80008b8:	4a1c      	ldr	r2, [pc, #112]	; (800092c <_free_r+0x8c>)
 80008ba:	6813      	ldr	r3, [r2, #0]
 80008bc:	b933      	cbnz	r3, 80008cc <_free_r+0x2c>
 80008be:	6063      	str	r3, [r4, #4]
 80008c0:	6014      	str	r4, [r2, #0]
 80008c2:	4628      	mov	r0, r5
 80008c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80008c8:	f000 b8d8 	b.w	8000a7c <__malloc_unlock>
 80008cc:	42a3      	cmp	r3, r4
 80008ce:	d908      	bls.n	80008e2 <_free_r+0x42>
 80008d0:	6820      	ldr	r0, [r4, #0]
 80008d2:	1821      	adds	r1, r4, r0
 80008d4:	428b      	cmp	r3, r1
 80008d6:	bf01      	itttt	eq
 80008d8:	6819      	ldreq	r1, [r3, #0]
 80008da:	685b      	ldreq	r3, [r3, #4]
 80008dc:	1809      	addeq	r1, r1, r0
 80008de:	6021      	streq	r1, [r4, #0]
 80008e0:	e7ed      	b.n	80008be <_free_r+0x1e>
 80008e2:	461a      	mov	r2, r3
 80008e4:	685b      	ldr	r3, [r3, #4]
 80008e6:	b10b      	cbz	r3, 80008ec <_free_r+0x4c>
 80008e8:	42a3      	cmp	r3, r4
 80008ea:	d9fa      	bls.n	80008e2 <_free_r+0x42>
 80008ec:	6811      	ldr	r1, [r2, #0]
 80008ee:	1850      	adds	r0, r2, r1
 80008f0:	42a0      	cmp	r0, r4
 80008f2:	d10b      	bne.n	800090c <_free_r+0x6c>
 80008f4:	6820      	ldr	r0, [r4, #0]
 80008f6:	4401      	add	r1, r0
 80008f8:	1850      	adds	r0, r2, r1
 80008fa:	4283      	cmp	r3, r0
 80008fc:	6011      	str	r1, [r2, #0]
 80008fe:	d1e0      	bne.n	80008c2 <_free_r+0x22>
 8000900:	6818      	ldr	r0, [r3, #0]
 8000902:	685b      	ldr	r3, [r3, #4]
 8000904:	4408      	add	r0, r1
 8000906:	6010      	str	r0, [r2, #0]
 8000908:	6053      	str	r3, [r2, #4]
 800090a:	e7da      	b.n	80008c2 <_free_r+0x22>
 800090c:	d902      	bls.n	8000914 <_free_r+0x74>
 800090e:	230c      	movs	r3, #12
 8000910:	602b      	str	r3, [r5, #0]
 8000912:	e7d6      	b.n	80008c2 <_free_r+0x22>
 8000914:	6820      	ldr	r0, [r4, #0]
 8000916:	1821      	adds	r1, r4, r0
 8000918:	428b      	cmp	r3, r1
 800091a:	bf01      	itttt	eq
 800091c:	6819      	ldreq	r1, [r3, #0]
 800091e:	685b      	ldreq	r3, [r3, #4]
 8000920:	1809      	addeq	r1, r1, r0
 8000922:	6021      	streq	r1, [r4, #0]
 8000924:	6063      	str	r3, [r4, #4]
 8000926:	6054      	str	r4, [r2, #4]
 8000928:	e7cb      	b.n	80008c2 <_free_r+0x22>
 800092a:	bd38      	pop	{r3, r4, r5, pc}
 800092c:	200001c0 	.word	0x200001c0

08000930 <sbrk_aligned>:
 8000930:	b570      	push	{r4, r5, r6, lr}
 8000932:	4e0e      	ldr	r6, [pc, #56]	; (800096c <sbrk_aligned+0x3c>)
 8000934:	460c      	mov	r4, r1
 8000936:	6831      	ldr	r1, [r6, #0]
 8000938:	4605      	mov	r5, r0
 800093a:	b911      	cbnz	r1, 8000942 <sbrk_aligned+0x12>
 800093c:	f000 fcba 	bl	80012b4 <_sbrk_r>
 8000940:	6030      	str	r0, [r6, #0]
 8000942:	4621      	mov	r1, r4
 8000944:	4628      	mov	r0, r5
 8000946:	f000 fcb5 	bl	80012b4 <_sbrk_r>
 800094a:	1c43      	adds	r3, r0, #1
 800094c:	d00a      	beq.n	8000964 <sbrk_aligned+0x34>
 800094e:	1cc4      	adds	r4, r0, #3
 8000950:	f024 0403 	bic.w	r4, r4, #3
 8000954:	42a0      	cmp	r0, r4
 8000956:	d007      	beq.n	8000968 <sbrk_aligned+0x38>
 8000958:	1a21      	subs	r1, r4, r0
 800095a:	4628      	mov	r0, r5
 800095c:	f000 fcaa 	bl	80012b4 <_sbrk_r>
 8000960:	3001      	adds	r0, #1
 8000962:	d101      	bne.n	8000968 <sbrk_aligned+0x38>
 8000964:	f04f 34ff 	mov.w	r4, #4294967295
 8000968:	4620      	mov	r0, r4
 800096a:	bd70      	pop	{r4, r5, r6, pc}
 800096c:	200001c4 	.word	0x200001c4

08000970 <_malloc_r>:
 8000970:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000974:	1ccd      	adds	r5, r1, #3
 8000976:	f025 0503 	bic.w	r5, r5, #3
 800097a:	3508      	adds	r5, #8
 800097c:	2d0c      	cmp	r5, #12
 800097e:	bf38      	it	cc
 8000980:	250c      	movcc	r5, #12
 8000982:	2d00      	cmp	r5, #0
 8000984:	4607      	mov	r7, r0
 8000986:	db01      	blt.n	800098c <_malloc_r+0x1c>
 8000988:	42a9      	cmp	r1, r5
 800098a:	d905      	bls.n	8000998 <_malloc_r+0x28>
 800098c:	230c      	movs	r3, #12
 800098e:	2600      	movs	r6, #0
 8000990:	603b      	str	r3, [r7, #0]
 8000992:	4630      	mov	r0, r6
 8000994:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000998:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8000a6c <_malloc_r+0xfc>
 800099c:	f000 f868 	bl	8000a70 <__malloc_lock>
 80009a0:	f8d8 3000 	ldr.w	r3, [r8]
 80009a4:	461c      	mov	r4, r3
 80009a6:	bb5c      	cbnz	r4, 8000a00 <_malloc_r+0x90>
 80009a8:	4629      	mov	r1, r5
 80009aa:	4638      	mov	r0, r7
 80009ac:	f7ff ffc0 	bl	8000930 <sbrk_aligned>
 80009b0:	1c43      	adds	r3, r0, #1
 80009b2:	4604      	mov	r4, r0
 80009b4:	d155      	bne.n	8000a62 <_malloc_r+0xf2>
 80009b6:	f8d8 4000 	ldr.w	r4, [r8]
 80009ba:	4626      	mov	r6, r4
 80009bc:	2e00      	cmp	r6, #0
 80009be:	d145      	bne.n	8000a4c <_malloc_r+0xdc>
 80009c0:	2c00      	cmp	r4, #0
 80009c2:	d048      	beq.n	8000a56 <_malloc_r+0xe6>
 80009c4:	6823      	ldr	r3, [r4, #0]
 80009c6:	4631      	mov	r1, r6
 80009c8:	4638      	mov	r0, r7
 80009ca:	eb04 0903 	add.w	r9, r4, r3
 80009ce:	f000 fc71 	bl	80012b4 <_sbrk_r>
 80009d2:	4581      	cmp	r9, r0
 80009d4:	d13f      	bne.n	8000a56 <_malloc_r+0xe6>
 80009d6:	6821      	ldr	r1, [r4, #0]
 80009d8:	4638      	mov	r0, r7
 80009da:	1a6d      	subs	r5, r5, r1
 80009dc:	4629      	mov	r1, r5
 80009de:	f7ff ffa7 	bl	8000930 <sbrk_aligned>
 80009e2:	3001      	adds	r0, #1
 80009e4:	d037      	beq.n	8000a56 <_malloc_r+0xe6>
 80009e6:	6823      	ldr	r3, [r4, #0]
 80009e8:	442b      	add	r3, r5
 80009ea:	6023      	str	r3, [r4, #0]
 80009ec:	f8d8 3000 	ldr.w	r3, [r8]
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d038      	beq.n	8000a66 <_malloc_r+0xf6>
 80009f4:	685a      	ldr	r2, [r3, #4]
 80009f6:	42a2      	cmp	r2, r4
 80009f8:	d12b      	bne.n	8000a52 <_malloc_r+0xe2>
 80009fa:	2200      	movs	r2, #0
 80009fc:	605a      	str	r2, [r3, #4]
 80009fe:	e00f      	b.n	8000a20 <_malloc_r+0xb0>
 8000a00:	6822      	ldr	r2, [r4, #0]
 8000a02:	1b52      	subs	r2, r2, r5
 8000a04:	d41f      	bmi.n	8000a46 <_malloc_r+0xd6>
 8000a06:	2a0b      	cmp	r2, #11
 8000a08:	d917      	bls.n	8000a3a <_malloc_r+0xca>
 8000a0a:	1961      	adds	r1, r4, r5
 8000a0c:	42a3      	cmp	r3, r4
 8000a0e:	6025      	str	r5, [r4, #0]
 8000a10:	bf18      	it	ne
 8000a12:	6059      	strne	r1, [r3, #4]
 8000a14:	6863      	ldr	r3, [r4, #4]
 8000a16:	bf08      	it	eq
 8000a18:	f8c8 1000 	streq.w	r1, [r8]
 8000a1c:	5162      	str	r2, [r4, r5]
 8000a1e:	604b      	str	r3, [r1, #4]
 8000a20:	4638      	mov	r0, r7
 8000a22:	f104 060b 	add.w	r6, r4, #11
 8000a26:	f000 f829 	bl	8000a7c <__malloc_unlock>
 8000a2a:	f026 0607 	bic.w	r6, r6, #7
 8000a2e:	1d23      	adds	r3, r4, #4
 8000a30:	1af2      	subs	r2, r6, r3
 8000a32:	d0ae      	beq.n	8000992 <_malloc_r+0x22>
 8000a34:	1b9b      	subs	r3, r3, r6
 8000a36:	50a3      	str	r3, [r4, r2]
 8000a38:	e7ab      	b.n	8000992 <_malloc_r+0x22>
 8000a3a:	42a3      	cmp	r3, r4
 8000a3c:	6862      	ldr	r2, [r4, #4]
 8000a3e:	d1dd      	bne.n	80009fc <_malloc_r+0x8c>
 8000a40:	f8c8 2000 	str.w	r2, [r8]
 8000a44:	e7ec      	b.n	8000a20 <_malloc_r+0xb0>
 8000a46:	4623      	mov	r3, r4
 8000a48:	6864      	ldr	r4, [r4, #4]
 8000a4a:	e7ac      	b.n	80009a6 <_malloc_r+0x36>
 8000a4c:	4634      	mov	r4, r6
 8000a4e:	6876      	ldr	r6, [r6, #4]
 8000a50:	e7b4      	b.n	80009bc <_malloc_r+0x4c>
 8000a52:	4613      	mov	r3, r2
 8000a54:	e7cc      	b.n	80009f0 <_malloc_r+0x80>
 8000a56:	230c      	movs	r3, #12
 8000a58:	4638      	mov	r0, r7
 8000a5a:	603b      	str	r3, [r7, #0]
 8000a5c:	f000 f80e 	bl	8000a7c <__malloc_unlock>
 8000a60:	e797      	b.n	8000992 <_malloc_r+0x22>
 8000a62:	6025      	str	r5, [r4, #0]
 8000a64:	e7dc      	b.n	8000a20 <_malloc_r+0xb0>
 8000a66:	605b      	str	r3, [r3, #4]
 8000a68:	deff      	udf	#255	; 0xff
 8000a6a:	bf00      	nop
 8000a6c:	200001c0 	.word	0x200001c0

08000a70 <__malloc_lock>:
 8000a70:	4801      	ldr	r0, [pc, #4]	; (8000a78 <__malloc_lock+0x8>)
 8000a72:	f7ff bf12 	b.w	800089a <__retarget_lock_acquire_recursive>
 8000a76:	bf00      	nop
 8000a78:	200001bc 	.word	0x200001bc

08000a7c <__malloc_unlock>:
 8000a7c:	4801      	ldr	r0, [pc, #4]	; (8000a84 <__malloc_unlock+0x8>)
 8000a7e:	f7ff bf0d 	b.w	800089c <__retarget_lock_release_recursive>
 8000a82:	bf00      	nop
 8000a84:	200001bc 	.word	0x200001bc

08000a88 <__sfputc_r>:
 8000a88:	6893      	ldr	r3, [r2, #8]
 8000a8a:	b410      	push	{r4}
 8000a8c:	3b01      	subs	r3, #1
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	6093      	str	r3, [r2, #8]
 8000a92:	da07      	bge.n	8000aa4 <__sfputc_r+0x1c>
 8000a94:	6994      	ldr	r4, [r2, #24]
 8000a96:	42a3      	cmp	r3, r4
 8000a98:	db01      	blt.n	8000a9e <__sfputc_r+0x16>
 8000a9a:	290a      	cmp	r1, #10
 8000a9c:	d102      	bne.n	8000aa4 <__sfputc_r+0x1c>
 8000a9e:	bc10      	pop	{r4}
 8000aa0:	f000 bb72 	b.w	8001188 <__swbuf_r>
 8000aa4:	6813      	ldr	r3, [r2, #0]
 8000aa6:	1c58      	adds	r0, r3, #1
 8000aa8:	6010      	str	r0, [r2, #0]
 8000aaa:	7019      	strb	r1, [r3, #0]
 8000aac:	4608      	mov	r0, r1
 8000aae:	bc10      	pop	{r4}
 8000ab0:	4770      	bx	lr

08000ab2 <__sfputs_r>:
 8000ab2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ab4:	4606      	mov	r6, r0
 8000ab6:	460f      	mov	r7, r1
 8000ab8:	4614      	mov	r4, r2
 8000aba:	18d5      	adds	r5, r2, r3
 8000abc:	42ac      	cmp	r4, r5
 8000abe:	d101      	bne.n	8000ac4 <__sfputs_r+0x12>
 8000ac0:	2000      	movs	r0, #0
 8000ac2:	e007      	b.n	8000ad4 <__sfputs_r+0x22>
 8000ac4:	463a      	mov	r2, r7
 8000ac6:	4630      	mov	r0, r6
 8000ac8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000acc:	f7ff ffdc 	bl	8000a88 <__sfputc_r>
 8000ad0:	1c43      	adds	r3, r0, #1
 8000ad2:	d1f3      	bne.n	8000abc <__sfputs_r+0xa>
 8000ad4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08000ad8 <_vfiprintf_r>:
 8000ad8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000adc:	460d      	mov	r5, r1
 8000ade:	4614      	mov	r4, r2
 8000ae0:	4698      	mov	r8, r3
 8000ae2:	4606      	mov	r6, r0
 8000ae4:	b09d      	sub	sp, #116	; 0x74
 8000ae6:	b118      	cbz	r0, 8000af0 <_vfiprintf_r+0x18>
 8000ae8:	6a03      	ldr	r3, [r0, #32]
 8000aea:	b90b      	cbnz	r3, 8000af0 <_vfiprintf_r+0x18>
 8000aec:	f7ff fdd0 	bl	8000690 <__sinit>
 8000af0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000af2:	07d9      	lsls	r1, r3, #31
 8000af4:	d405      	bmi.n	8000b02 <_vfiprintf_r+0x2a>
 8000af6:	89ab      	ldrh	r3, [r5, #12]
 8000af8:	059a      	lsls	r2, r3, #22
 8000afa:	d402      	bmi.n	8000b02 <_vfiprintf_r+0x2a>
 8000afc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000afe:	f7ff fecc 	bl	800089a <__retarget_lock_acquire_recursive>
 8000b02:	89ab      	ldrh	r3, [r5, #12]
 8000b04:	071b      	lsls	r3, r3, #28
 8000b06:	d501      	bpl.n	8000b0c <_vfiprintf_r+0x34>
 8000b08:	692b      	ldr	r3, [r5, #16]
 8000b0a:	b99b      	cbnz	r3, 8000b34 <_vfiprintf_r+0x5c>
 8000b0c:	4629      	mov	r1, r5
 8000b0e:	4630      	mov	r0, r6
 8000b10:	f000 fb78 	bl	8001204 <__swsetup_r>
 8000b14:	b170      	cbz	r0, 8000b34 <_vfiprintf_r+0x5c>
 8000b16:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000b18:	07dc      	lsls	r4, r3, #31
 8000b1a:	d504      	bpl.n	8000b26 <_vfiprintf_r+0x4e>
 8000b1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b20:	b01d      	add	sp, #116	; 0x74
 8000b22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000b26:	89ab      	ldrh	r3, [r5, #12]
 8000b28:	0598      	lsls	r0, r3, #22
 8000b2a:	d4f7      	bmi.n	8000b1c <_vfiprintf_r+0x44>
 8000b2c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000b2e:	f7ff feb5 	bl	800089c <__retarget_lock_release_recursive>
 8000b32:	e7f3      	b.n	8000b1c <_vfiprintf_r+0x44>
 8000b34:	2300      	movs	r3, #0
 8000b36:	9309      	str	r3, [sp, #36]	; 0x24
 8000b38:	2320      	movs	r3, #32
 8000b3a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8000b3e:	2330      	movs	r3, #48	; 0x30
 8000b40:	f04f 0901 	mov.w	r9, #1
 8000b44:	f8cd 800c 	str.w	r8, [sp, #12]
 8000b48:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8000cf8 <_vfiprintf_r+0x220>
 8000b4c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8000b50:	4623      	mov	r3, r4
 8000b52:	469a      	mov	sl, r3
 8000b54:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000b58:	b10a      	cbz	r2, 8000b5e <_vfiprintf_r+0x86>
 8000b5a:	2a25      	cmp	r2, #37	; 0x25
 8000b5c:	d1f9      	bne.n	8000b52 <_vfiprintf_r+0x7a>
 8000b5e:	ebba 0b04 	subs.w	fp, sl, r4
 8000b62:	d00b      	beq.n	8000b7c <_vfiprintf_r+0xa4>
 8000b64:	465b      	mov	r3, fp
 8000b66:	4622      	mov	r2, r4
 8000b68:	4629      	mov	r1, r5
 8000b6a:	4630      	mov	r0, r6
 8000b6c:	f7ff ffa1 	bl	8000ab2 <__sfputs_r>
 8000b70:	3001      	adds	r0, #1
 8000b72:	f000 80a9 	beq.w	8000cc8 <_vfiprintf_r+0x1f0>
 8000b76:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8000b78:	445a      	add	r2, fp
 8000b7a:	9209      	str	r2, [sp, #36]	; 0x24
 8000b7c:	f89a 3000 	ldrb.w	r3, [sl]
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	f000 80a1 	beq.w	8000cc8 <_vfiprintf_r+0x1f0>
 8000b86:	2300      	movs	r3, #0
 8000b88:	f04f 32ff 	mov.w	r2, #4294967295
 8000b8c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000b90:	f10a 0a01 	add.w	sl, sl, #1
 8000b94:	9304      	str	r3, [sp, #16]
 8000b96:	9307      	str	r3, [sp, #28]
 8000b98:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8000b9c:	931a      	str	r3, [sp, #104]	; 0x68
 8000b9e:	4654      	mov	r4, sl
 8000ba0:	2205      	movs	r2, #5
 8000ba2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000ba6:	4854      	ldr	r0, [pc, #336]	; (8000cf8 <_vfiprintf_r+0x220>)
 8000ba8:	f000 fb94 	bl	80012d4 <memchr>
 8000bac:	9a04      	ldr	r2, [sp, #16]
 8000bae:	b9d8      	cbnz	r0, 8000be8 <_vfiprintf_r+0x110>
 8000bb0:	06d1      	lsls	r1, r2, #27
 8000bb2:	bf44      	itt	mi
 8000bb4:	2320      	movmi	r3, #32
 8000bb6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000bba:	0713      	lsls	r3, r2, #28
 8000bbc:	bf44      	itt	mi
 8000bbe:	232b      	movmi	r3, #43	; 0x2b
 8000bc0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000bc4:	f89a 3000 	ldrb.w	r3, [sl]
 8000bc8:	2b2a      	cmp	r3, #42	; 0x2a
 8000bca:	d015      	beq.n	8000bf8 <_vfiprintf_r+0x120>
 8000bcc:	4654      	mov	r4, sl
 8000bce:	2000      	movs	r0, #0
 8000bd0:	f04f 0c0a 	mov.w	ip, #10
 8000bd4:	9a07      	ldr	r2, [sp, #28]
 8000bd6:	4621      	mov	r1, r4
 8000bd8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000bdc:	3b30      	subs	r3, #48	; 0x30
 8000bde:	2b09      	cmp	r3, #9
 8000be0:	d94d      	bls.n	8000c7e <_vfiprintf_r+0x1a6>
 8000be2:	b1b0      	cbz	r0, 8000c12 <_vfiprintf_r+0x13a>
 8000be4:	9207      	str	r2, [sp, #28]
 8000be6:	e014      	b.n	8000c12 <_vfiprintf_r+0x13a>
 8000be8:	eba0 0308 	sub.w	r3, r0, r8
 8000bec:	fa09 f303 	lsl.w	r3, r9, r3
 8000bf0:	4313      	orrs	r3, r2
 8000bf2:	46a2      	mov	sl, r4
 8000bf4:	9304      	str	r3, [sp, #16]
 8000bf6:	e7d2      	b.n	8000b9e <_vfiprintf_r+0xc6>
 8000bf8:	9b03      	ldr	r3, [sp, #12]
 8000bfa:	1d19      	adds	r1, r3, #4
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	9103      	str	r1, [sp, #12]
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	bfbb      	ittet	lt
 8000c04:	425b      	neglt	r3, r3
 8000c06:	f042 0202 	orrlt.w	r2, r2, #2
 8000c0a:	9307      	strge	r3, [sp, #28]
 8000c0c:	9307      	strlt	r3, [sp, #28]
 8000c0e:	bfb8      	it	lt
 8000c10:	9204      	strlt	r2, [sp, #16]
 8000c12:	7823      	ldrb	r3, [r4, #0]
 8000c14:	2b2e      	cmp	r3, #46	; 0x2e
 8000c16:	d10c      	bne.n	8000c32 <_vfiprintf_r+0x15a>
 8000c18:	7863      	ldrb	r3, [r4, #1]
 8000c1a:	2b2a      	cmp	r3, #42	; 0x2a
 8000c1c:	d134      	bne.n	8000c88 <_vfiprintf_r+0x1b0>
 8000c1e:	9b03      	ldr	r3, [sp, #12]
 8000c20:	3402      	adds	r4, #2
 8000c22:	1d1a      	adds	r2, r3, #4
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	9203      	str	r2, [sp, #12]
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	bfb8      	it	lt
 8000c2c:	f04f 33ff 	movlt.w	r3, #4294967295
 8000c30:	9305      	str	r3, [sp, #20]
 8000c32:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8000cfc <_vfiprintf_r+0x224>
 8000c36:	2203      	movs	r2, #3
 8000c38:	4650      	mov	r0, sl
 8000c3a:	7821      	ldrb	r1, [r4, #0]
 8000c3c:	f000 fb4a 	bl	80012d4 <memchr>
 8000c40:	b138      	cbz	r0, 8000c52 <_vfiprintf_r+0x17a>
 8000c42:	2240      	movs	r2, #64	; 0x40
 8000c44:	9b04      	ldr	r3, [sp, #16]
 8000c46:	eba0 000a 	sub.w	r0, r0, sl
 8000c4a:	4082      	lsls	r2, r0
 8000c4c:	4313      	orrs	r3, r2
 8000c4e:	3401      	adds	r4, #1
 8000c50:	9304      	str	r3, [sp, #16]
 8000c52:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000c56:	2206      	movs	r2, #6
 8000c58:	4829      	ldr	r0, [pc, #164]	; (8000d00 <_vfiprintf_r+0x228>)
 8000c5a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8000c5e:	f000 fb39 	bl	80012d4 <memchr>
 8000c62:	2800      	cmp	r0, #0
 8000c64:	d03f      	beq.n	8000ce6 <_vfiprintf_r+0x20e>
 8000c66:	4b27      	ldr	r3, [pc, #156]	; (8000d04 <_vfiprintf_r+0x22c>)
 8000c68:	bb1b      	cbnz	r3, 8000cb2 <_vfiprintf_r+0x1da>
 8000c6a:	9b03      	ldr	r3, [sp, #12]
 8000c6c:	3307      	adds	r3, #7
 8000c6e:	f023 0307 	bic.w	r3, r3, #7
 8000c72:	3308      	adds	r3, #8
 8000c74:	9303      	str	r3, [sp, #12]
 8000c76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000c78:	443b      	add	r3, r7
 8000c7a:	9309      	str	r3, [sp, #36]	; 0x24
 8000c7c:	e768      	b.n	8000b50 <_vfiprintf_r+0x78>
 8000c7e:	460c      	mov	r4, r1
 8000c80:	2001      	movs	r0, #1
 8000c82:	fb0c 3202 	mla	r2, ip, r2, r3
 8000c86:	e7a6      	b.n	8000bd6 <_vfiprintf_r+0xfe>
 8000c88:	2300      	movs	r3, #0
 8000c8a:	f04f 0c0a 	mov.w	ip, #10
 8000c8e:	4619      	mov	r1, r3
 8000c90:	3401      	adds	r4, #1
 8000c92:	9305      	str	r3, [sp, #20]
 8000c94:	4620      	mov	r0, r4
 8000c96:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000c9a:	3a30      	subs	r2, #48	; 0x30
 8000c9c:	2a09      	cmp	r2, #9
 8000c9e:	d903      	bls.n	8000ca8 <_vfiprintf_r+0x1d0>
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d0c6      	beq.n	8000c32 <_vfiprintf_r+0x15a>
 8000ca4:	9105      	str	r1, [sp, #20]
 8000ca6:	e7c4      	b.n	8000c32 <_vfiprintf_r+0x15a>
 8000ca8:	4604      	mov	r4, r0
 8000caa:	2301      	movs	r3, #1
 8000cac:	fb0c 2101 	mla	r1, ip, r1, r2
 8000cb0:	e7f0      	b.n	8000c94 <_vfiprintf_r+0x1bc>
 8000cb2:	ab03      	add	r3, sp, #12
 8000cb4:	9300      	str	r3, [sp, #0]
 8000cb6:	462a      	mov	r2, r5
 8000cb8:	4630      	mov	r0, r6
 8000cba:	4b13      	ldr	r3, [pc, #76]	; (8000d08 <_vfiprintf_r+0x230>)
 8000cbc:	a904      	add	r1, sp, #16
 8000cbe:	f3af 8000 	nop.w
 8000cc2:	4607      	mov	r7, r0
 8000cc4:	1c78      	adds	r0, r7, #1
 8000cc6:	d1d6      	bne.n	8000c76 <_vfiprintf_r+0x19e>
 8000cc8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000cca:	07d9      	lsls	r1, r3, #31
 8000ccc:	d405      	bmi.n	8000cda <_vfiprintf_r+0x202>
 8000cce:	89ab      	ldrh	r3, [r5, #12]
 8000cd0:	059a      	lsls	r2, r3, #22
 8000cd2:	d402      	bmi.n	8000cda <_vfiprintf_r+0x202>
 8000cd4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000cd6:	f7ff fde1 	bl	800089c <__retarget_lock_release_recursive>
 8000cda:	89ab      	ldrh	r3, [r5, #12]
 8000cdc:	065b      	lsls	r3, r3, #25
 8000cde:	f53f af1d 	bmi.w	8000b1c <_vfiprintf_r+0x44>
 8000ce2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8000ce4:	e71c      	b.n	8000b20 <_vfiprintf_r+0x48>
 8000ce6:	ab03      	add	r3, sp, #12
 8000ce8:	9300      	str	r3, [sp, #0]
 8000cea:	462a      	mov	r2, r5
 8000cec:	4630      	mov	r0, r6
 8000cee:	4b06      	ldr	r3, [pc, #24]	; (8000d08 <_vfiprintf_r+0x230>)
 8000cf0:	a904      	add	r1, sp, #16
 8000cf2:	f000 f87d 	bl	8000df0 <_printf_i>
 8000cf6:	e7e4      	b.n	8000cc2 <_vfiprintf_r+0x1ea>
 8000cf8:	08001421 	.word	0x08001421
 8000cfc:	08001427 	.word	0x08001427
 8000d00:	0800142b 	.word	0x0800142b
 8000d04:	00000000 	.word	0x00000000
 8000d08:	08000ab3 	.word	0x08000ab3

08000d0c <_printf_common>:
 8000d0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d10:	4616      	mov	r6, r2
 8000d12:	4699      	mov	r9, r3
 8000d14:	688a      	ldr	r2, [r1, #8]
 8000d16:	690b      	ldr	r3, [r1, #16]
 8000d18:	4607      	mov	r7, r0
 8000d1a:	4293      	cmp	r3, r2
 8000d1c:	bfb8      	it	lt
 8000d1e:	4613      	movlt	r3, r2
 8000d20:	6033      	str	r3, [r6, #0]
 8000d22:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8000d26:	460c      	mov	r4, r1
 8000d28:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8000d2c:	b10a      	cbz	r2, 8000d32 <_printf_common+0x26>
 8000d2e:	3301      	adds	r3, #1
 8000d30:	6033      	str	r3, [r6, #0]
 8000d32:	6823      	ldr	r3, [r4, #0]
 8000d34:	0699      	lsls	r1, r3, #26
 8000d36:	bf42      	ittt	mi
 8000d38:	6833      	ldrmi	r3, [r6, #0]
 8000d3a:	3302      	addmi	r3, #2
 8000d3c:	6033      	strmi	r3, [r6, #0]
 8000d3e:	6825      	ldr	r5, [r4, #0]
 8000d40:	f015 0506 	ands.w	r5, r5, #6
 8000d44:	d106      	bne.n	8000d54 <_printf_common+0x48>
 8000d46:	f104 0a19 	add.w	sl, r4, #25
 8000d4a:	68e3      	ldr	r3, [r4, #12]
 8000d4c:	6832      	ldr	r2, [r6, #0]
 8000d4e:	1a9b      	subs	r3, r3, r2
 8000d50:	42ab      	cmp	r3, r5
 8000d52:	dc2b      	bgt.n	8000dac <_printf_common+0xa0>
 8000d54:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8000d58:	1e13      	subs	r3, r2, #0
 8000d5a:	6822      	ldr	r2, [r4, #0]
 8000d5c:	bf18      	it	ne
 8000d5e:	2301      	movne	r3, #1
 8000d60:	0692      	lsls	r2, r2, #26
 8000d62:	d430      	bmi.n	8000dc6 <_printf_common+0xba>
 8000d64:	4649      	mov	r1, r9
 8000d66:	4638      	mov	r0, r7
 8000d68:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8000d6c:	47c0      	blx	r8
 8000d6e:	3001      	adds	r0, #1
 8000d70:	d023      	beq.n	8000dba <_printf_common+0xae>
 8000d72:	6823      	ldr	r3, [r4, #0]
 8000d74:	6922      	ldr	r2, [r4, #16]
 8000d76:	f003 0306 	and.w	r3, r3, #6
 8000d7a:	2b04      	cmp	r3, #4
 8000d7c:	bf14      	ite	ne
 8000d7e:	2500      	movne	r5, #0
 8000d80:	6833      	ldreq	r3, [r6, #0]
 8000d82:	f04f 0600 	mov.w	r6, #0
 8000d86:	bf08      	it	eq
 8000d88:	68e5      	ldreq	r5, [r4, #12]
 8000d8a:	f104 041a 	add.w	r4, r4, #26
 8000d8e:	bf08      	it	eq
 8000d90:	1aed      	subeq	r5, r5, r3
 8000d92:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8000d96:	bf08      	it	eq
 8000d98:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000d9c:	4293      	cmp	r3, r2
 8000d9e:	bfc4      	itt	gt
 8000da0:	1a9b      	subgt	r3, r3, r2
 8000da2:	18ed      	addgt	r5, r5, r3
 8000da4:	42b5      	cmp	r5, r6
 8000da6:	d11a      	bne.n	8000dde <_printf_common+0xd2>
 8000da8:	2000      	movs	r0, #0
 8000daa:	e008      	b.n	8000dbe <_printf_common+0xb2>
 8000dac:	2301      	movs	r3, #1
 8000dae:	4652      	mov	r2, sl
 8000db0:	4649      	mov	r1, r9
 8000db2:	4638      	mov	r0, r7
 8000db4:	47c0      	blx	r8
 8000db6:	3001      	adds	r0, #1
 8000db8:	d103      	bne.n	8000dc2 <_printf_common+0xb6>
 8000dba:	f04f 30ff 	mov.w	r0, #4294967295
 8000dbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dc2:	3501      	adds	r5, #1
 8000dc4:	e7c1      	b.n	8000d4a <_printf_common+0x3e>
 8000dc6:	2030      	movs	r0, #48	; 0x30
 8000dc8:	18e1      	adds	r1, r4, r3
 8000dca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8000dce:	1c5a      	adds	r2, r3, #1
 8000dd0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8000dd4:	4422      	add	r2, r4
 8000dd6:	3302      	adds	r3, #2
 8000dd8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8000ddc:	e7c2      	b.n	8000d64 <_printf_common+0x58>
 8000dde:	2301      	movs	r3, #1
 8000de0:	4622      	mov	r2, r4
 8000de2:	4649      	mov	r1, r9
 8000de4:	4638      	mov	r0, r7
 8000de6:	47c0      	blx	r8
 8000de8:	3001      	adds	r0, #1
 8000dea:	d0e6      	beq.n	8000dba <_printf_common+0xae>
 8000dec:	3601      	adds	r6, #1
 8000dee:	e7d9      	b.n	8000da4 <_printf_common+0x98>

08000df0 <_printf_i>:
 8000df0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000df4:	7e0f      	ldrb	r7, [r1, #24]
 8000df6:	4691      	mov	r9, r2
 8000df8:	2f78      	cmp	r7, #120	; 0x78
 8000dfa:	4680      	mov	r8, r0
 8000dfc:	460c      	mov	r4, r1
 8000dfe:	469a      	mov	sl, r3
 8000e00:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8000e02:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8000e06:	d807      	bhi.n	8000e18 <_printf_i+0x28>
 8000e08:	2f62      	cmp	r7, #98	; 0x62
 8000e0a:	d80a      	bhi.n	8000e22 <_printf_i+0x32>
 8000e0c:	2f00      	cmp	r7, #0
 8000e0e:	f000 80d5 	beq.w	8000fbc <_printf_i+0x1cc>
 8000e12:	2f58      	cmp	r7, #88	; 0x58
 8000e14:	f000 80c1 	beq.w	8000f9a <_printf_i+0x1aa>
 8000e18:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8000e1c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8000e20:	e03a      	b.n	8000e98 <_printf_i+0xa8>
 8000e22:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8000e26:	2b15      	cmp	r3, #21
 8000e28:	d8f6      	bhi.n	8000e18 <_printf_i+0x28>
 8000e2a:	a101      	add	r1, pc, #4	; (adr r1, 8000e30 <_printf_i+0x40>)
 8000e2c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8000e30:	08000e89 	.word	0x08000e89
 8000e34:	08000e9d 	.word	0x08000e9d
 8000e38:	08000e19 	.word	0x08000e19
 8000e3c:	08000e19 	.word	0x08000e19
 8000e40:	08000e19 	.word	0x08000e19
 8000e44:	08000e19 	.word	0x08000e19
 8000e48:	08000e9d 	.word	0x08000e9d
 8000e4c:	08000e19 	.word	0x08000e19
 8000e50:	08000e19 	.word	0x08000e19
 8000e54:	08000e19 	.word	0x08000e19
 8000e58:	08000e19 	.word	0x08000e19
 8000e5c:	08000fa3 	.word	0x08000fa3
 8000e60:	08000ec9 	.word	0x08000ec9
 8000e64:	08000f5d 	.word	0x08000f5d
 8000e68:	08000e19 	.word	0x08000e19
 8000e6c:	08000e19 	.word	0x08000e19
 8000e70:	08000fc5 	.word	0x08000fc5
 8000e74:	08000e19 	.word	0x08000e19
 8000e78:	08000ec9 	.word	0x08000ec9
 8000e7c:	08000e19 	.word	0x08000e19
 8000e80:	08000e19 	.word	0x08000e19
 8000e84:	08000f65 	.word	0x08000f65
 8000e88:	682b      	ldr	r3, [r5, #0]
 8000e8a:	1d1a      	adds	r2, r3, #4
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	602a      	str	r2, [r5, #0]
 8000e90:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8000e94:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8000e98:	2301      	movs	r3, #1
 8000e9a:	e0a0      	b.n	8000fde <_printf_i+0x1ee>
 8000e9c:	6820      	ldr	r0, [r4, #0]
 8000e9e:	682b      	ldr	r3, [r5, #0]
 8000ea0:	0607      	lsls	r7, r0, #24
 8000ea2:	f103 0104 	add.w	r1, r3, #4
 8000ea6:	6029      	str	r1, [r5, #0]
 8000ea8:	d501      	bpl.n	8000eae <_printf_i+0xbe>
 8000eaa:	681e      	ldr	r6, [r3, #0]
 8000eac:	e003      	b.n	8000eb6 <_printf_i+0xc6>
 8000eae:	0646      	lsls	r6, r0, #25
 8000eb0:	d5fb      	bpl.n	8000eaa <_printf_i+0xba>
 8000eb2:	f9b3 6000 	ldrsh.w	r6, [r3]
 8000eb6:	2e00      	cmp	r6, #0
 8000eb8:	da03      	bge.n	8000ec2 <_printf_i+0xd2>
 8000eba:	232d      	movs	r3, #45	; 0x2d
 8000ebc:	4276      	negs	r6, r6
 8000ebe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8000ec2:	230a      	movs	r3, #10
 8000ec4:	4859      	ldr	r0, [pc, #356]	; (800102c <_printf_i+0x23c>)
 8000ec6:	e012      	b.n	8000eee <_printf_i+0xfe>
 8000ec8:	682b      	ldr	r3, [r5, #0]
 8000eca:	6820      	ldr	r0, [r4, #0]
 8000ecc:	1d19      	adds	r1, r3, #4
 8000ece:	6029      	str	r1, [r5, #0]
 8000ed0:	0605      	lsls	r5, r0, #24
 8000ed2:	d501      	bpl.n	8000ed8 <_printf_i+0xe8>
 8000ed4:	681e      	ldr	r6, [r3, #0]
 8000ed6:	e002      	b.n	8000ede <_printf_i+0xee>
 8000ed8:	0641      	lsls	r1, r0, #25
 8000eda:	d5fb      	bpl.n	8000ed4 <_printf_i+0xe4>
 8000edc:	881e      	ldrh	r6, [r3, #0]
 8000ede:	2f6f      	cmp	r7, #111	; 0x6f
 8000ee0:	bf0c      	ite	eq
 8000ee2:	2308      	moveq	r3, #8
 8000ee4:	230a      	movne	r3, #10
 8000ee6:	4851      	ldr	r0, [pc, #324]	; (800102c <_printf_i+0x23c>)
 8000ee8:	2100      	movs	r1, #0
 8000eea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8000eee:	6865      	ldr	r5, [r4, #4]
 8000ef0:	2d00      	cmp	r5, #0
 8000ef2:	bfa8      	it	ge
 8000ef4:	6821      	ldrge	r1, [r4, #0]
 8000ef6:	60a5      	str	r5, [r4, #8]
 8000ef8:	bfa4      	itt	ge
 8000efa:	f021 0104 	bicge.w	r1, r1, #4
 8000efe:	6021      	strge	r1, [r4, #0]
 8000f00:	b90e      	cbnz	r6, 8000f06 <_printf_i+0x116>
 8000f02:	2d00      	cmp	r5, #0
 8000f04:	d04b      	beq.n	8000f9e <_printf_i+0x1ae>
 8000f06:	4615      	mov	r5, r2
 8000f08:	fbb6 f1f3 	udiv	r1, r6, r3
 8000f0c:	fb03 6711 	mls	r7, r3, r1, r6
 8000f10:	5dc7      	ldrb	r7, [r0, r7]
 8000f12:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8000f16:	4637      	mov	r7, r6
 8000f18:	42bb      	cmp	r3, r7
 8000f1a:	460e      	mov	r6, r1
 8000f1c:	d9f4      	bls.n	8000f08 <_printf_i+0x118>
 8000f1e:	2b08      	cmp	r3, #8
 8000f20:	d10b      	bne.n	8000f3a <_printf_i+0x14a>
 8000f22:	6823      	ldr	r3, [r4, #0]
 8000f24:	07de      	lsls	r6, r3, #31
 8000f26:	d508      	bpl.n	8000f3a <_printf_i+0x14a>
 8000f28:	6923      	ldr	r3, [r4, #16]
 8000f2a:	6861      	ldr	r1, [r4, #4]
 8000f2c:	4299      	cmp	r1, r3
 8000f2e:	bfde      	ittt	le
 8000f30:	2330      	movle	r3, #48	; 0x30
 8000f32:	f805 3c01 	strble.w	r3, [r5, #-1]
 8000f36:	f105 35ff 	addle.w	r5, r5, #4294967295
 8000f3a:	1b52      	subs	r2, r2, r5
 8000f3c:	6122      	str	r2, [r4, #16]
 8000f3e:	464b      	mov	r3, r9
 8000f40:	4621      	mov	r1, r4
 8000f42:	4640      	mov	r0, r8
 8000f44:	f8cd a000 	str.w	sl, [sp]
 8000f48:	aa03      	add	r2, sp, #12
 8000f4a:	f7ff fedf 	bl	8000d0c <_printf_common>
 8000f4e:	3001      	adds	r0, #1
 8000f50:	d14a      	bne.n	8000fe8 <_printf_i+0x1f8>
 8000f52:	f04f 30ff 	mov.w	r0, #4294967295
 8000f56:	b004      	add	sp, #16
 8000f58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f5c:	6823      	ldr	r3, [r4, #0]
 8000f5e:	f043 0320 	orr.w	r3, r3, #32
 8000f62:	6023      	str	r3, [r4, #0]
 8000f64:	2778      	movs	r7, #120	; 0x78
 8000f66:	4832      	ldr	r0, [pc, #200]	; (8001030 <_printf_i+0x240>)
 8000f68:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8000f6c:	6823      	ldr	r3, [r4, #0]
 8000f6e:	6829      	ldr	r1, [r5, #0]
 8000f70:	061f      	lsls	r7, r3, #24
 8000f72:	f851 6b04 	ldr.w	r6, [r1], #4
 8000f76:	d402      	bmi.n	8000f7e <_printf_i+0x18e>
 8000f78:	065f      	lsls	r7, r3, #25
 8000f7a:	bf48      	it	mi
 8000f7c:	b2b6      	uxthmi	r6, r6
 8000f7e:	07df      	lsls	r7, r3, #31
 8000f80:	bf48      	it	mi
 8000f82:	f043 0320 	orrmi.w	r3, r3, #32
 8000f86:	6029      	str	r1, [r5, #0]
 8000f88:	bf48      	it	mi
 8000f8a:	6023      	strmi	r3, [r4, #0]
 8000f8c:	b91e      	cbnz	r6, 8000f96 <_printf_i+0x1a6>
 8000f8e:	6823      	ldr	r3, [r4, #0]
 8000f90:	f023 0320 	bic.w	r3, r3, #32
 8000f94:	6023      	str	r3, [r4, #0]
 8000f96:	2310      	movs	r3, #16
 8000f98:	e7a6      	b.n	8000ee8 <_printf_i+0xf8>
 8000f9a:	4824      	ldr	r0, [pc, #144]	; (800102c <_printf_i+0x23c>)
 8000f9c:	e7e4      	b.n	8000f68 <_printf_i+0x178>
 8000f9e:	4615      	mov	r5, r2
 8000fa0:	e7bd      	b.n	8000f1e <_printf_i+0x12e>
 8000fa2:	682b      	ldr	r3, [r5, #0]
 8000fa4:	6826      	ldr	r6, [r4, #0]
 8000fa6:	1d18      	adds	r0, r3, #4
 8000fa8:	6961      	ldr	r1, [r4, #20]
 8000faa:	6028      	str	r0, [r5, #0]
 8000fac:	0635      	lsls	r5, r6, #24
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	d501      	bpl.n	8000fb6 <_printf_i+0x1c6>
 8000fb2:	6019      	str	r1, [r3, #0]
 8000fb4:	e002      	b.n	8000fbc <_printf_i+0x1cc>
 8000fb6:	0670      	lsls	r0, r6, #25
 8000fb8:	d5fb      	bpl.n	8000fb2 <_printf_i+0x1c2>
 8000fba:	8019      	strh	r1, [r3, #0]
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	4615      	mov	r5, r2
 8000fc0:	6123      	str	r3, [r4, #16]
 8000fc2:	e7bc      	b.n	8000f3e <_printf_i+0x14e>
 8000fc4:	682b      	ldr	r3, [r5, #0]
 8000fc6:	2100      	movs	r1, #0
 8000fc8:	1d1a      	adds	r2, r3, #4
 8000fca:	602a      	str	r2, [r5, #0]
 8000fcc:	681d      	ldr	r5, [r3, #0]
 8000fce:	6862      	ldr	r2, [r4, #4]
 8000fd0:	4628      	mov	r0, r5
 8000fd2:	f000 f97f 	bl	80012d4 <memchr>
 8000fd6:	b108      	cbz	r0, 8000fdc <_printf_i+0x1ec>
 8000fd8:	1b40      	subs	r0, r0, r5
 8000fda:	6060      	str	r0, [r4, #4]
 8000fdc:	6863      	ldr	r3, [r4, #4]
 8000fde:	6123      	str	r3, [r4, #16]
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8000fe6:	e7aa      	b.n	8000f3e <_printf_i+0x14e>
 8000fe8:	462a      	mov	r2, r5
 8000fea:	4649      	mov	r1, r9
 8000fec:	4640      	mov	r0, r8
 8000fee:	6923      	ldr	r3, [r4, #16]
 8000ff0:	47d0      	blx	sl
 8000ff2:	3001      	adds	r0, #1
 8000ff4:	d0ad      	beq.n	8000f52 <_printf_i+0x162>
 8000ff6:	6823      	ldr	r3, [r4, #0]
 8000ff8:	079b      	lsls	r3, r3, #30
 8000ffa:	d413      	bmi.n	8001024 <_printf_i+0x234>
 8000ffc:	68e0      	ldr	r0, [r4, #12]
 8000ffe:	9b03      	ldr	r3, [sp, #12]
 8001000:	4298      	cmp	r0, r3
 8001002:	bfb8      	it	lt
 8001004:	4618      	movlt	r0, r3
 8001006:	e7a6      	b.n	8000f56 <_printf_i+0x166>
 8001008:	2301      	movs	r3, #1
 800100a:	4632      	mov	r2, r6
 800100c:	4649      	mov	r1, r9
 800100e:	4640      	mov	r0, r8
 8001010:	47d0      	blx	sl
 8001012:	3001      	adds	r0, #1
 8001014:	d09d      	beq.n	8000f52 <_printf_i+0x162>
 8001016:	3501      	adds	r5, #1
 8001018:	68e3      	ldr	r3, [r4, #12]
 800101a:	9903      	ldr	r1, [sp, #12]
 800101c:	1a5b      	subs	r3, r3, r1
 800101e:	42ab      	cmp	r3, r5
 8001020:	dcf2      	bgt.n	8001008 <_printf_i+0x218>
 8001022:	e7eb      	b.n	8000ffc <_printf_i+0x20c>
 8001024:	2500      	movs	r5, #0
 8001026:	f104 0619 	add.w	r6, r4, #25
 800102a:	e7f5      	b.n	8001018 <_printf_i+0x228>
 800102c:	08001432 	.word	0x08001432
 8001030:	08001443 	.word	0x08001443

08001034 <__sflush_r>:
 8001034:	898a      	ldrh	r2, [r1, #12]
 8001036:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001038:	4605      	mov	r5, r0
 800103a:	0710      	lsls	r0, r2, #28
 800103c:	460c      	mov	r4, r1
 800103e:	d457      	bmi.n	80010f0 <__sflush_r+0xbc>
 8001040:	684b      	ldr	r3, [r1, #4]
 8001042:	2b00      	cmp	r3, #0
 8001044:	dc04      	bgt.n	8001050 <__sflush_r+0x1c>
 8001046:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001048:	2b00      	cmp	r3, #0
 800104a:	dc01      	bgt.n	8001050 <__sflush_r+0x1c>
 800104c:	2000      	movs	r0, #0
 800104e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001050:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001052:	2e00      	cmp	r6, #0
 8001054:	d0fa      	beq.n	800104c <__sflush_r+0x18>
 8001056:	2300      	movs	r3, #0
 8001058:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800105c:	682f      	ldr	r7, [r5, #0]
 800105e:	6a21      	ldr	r1, [r4, #32]
 8001060:	602b      	str	r3, [r5, #0]
 8001062:	d032      	beq.n	80010ca <__sflush_r+0x96>
 8001064:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001066:	89a3      	ldrh	r3, [r4, #12]
 8001068:	075a      	lsls	r2, r3, #29
 800106a:	d505      	bpl.n	8001078 <__sflush_r+0x44>
 800106c:	6863      	ldr	r3, [r4, #4]
 800106e:	1ac0      	subs	r0, r0, r3
 8001070:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001072:	b10b      	cbz	r3, 8001078 <__sflush_r+0x44>
 8001074:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001076:	1ac0      	subs	r0, r0, r3
 8001078:	2300      	movs	r3, #0
 800107a:	4602      	mov	r2, r0
 800107c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800107e:	4628      	mov	r0, r5
 8001080:	6a21      	ldr	r1, [r4, #32]
 8001082:	47b0      	blx	r6
 8001084:	1c43      	adds	r3, r0, #1
 8001086:	89a3      	ldrh	r3, [r4, #12]
 8001088:	d106      	bne.n	8001098 <__sflush_r+0x64>
 800108a:	6829      	ldr	r1, [r5, #0]
 800108c:	291d      	cmp	r1, #29
 800108e:	d82b      	bhi.n	80010e8 <__sflush_r+0xb4>
 8001090:	4a28      	ldr	r2, [pc, #160]	; (8001134 <__sflush_r+0x100>)
 8001092:	410a      	asrs	r2, r1
 8001094:	07d6      	lsls	r6, r2, #31
 8001096:	d427      	bmi.n	80010e8 <__sflush_r+0xb4>
 8001098:	2200      	movs	r2, #0
 800109a:	6062      	str	r2, [r4, #4]
 800109c:	6922      	ldr	r2, [r4, #16]
 800109e:	04d9      	lsls	r1, r3, #19
 80010a0:	6022      	str	r2, [r4, #0]
 80010a2:	d504      	bpl.n	80010ae <__sflush_r+0x7a>
 80010a4:	1c42      	adds	r2, r0, #1
 80010a6:	d101      	bne.n	80010ac <__sflush_r+0x78>
 80010a8:	682b      	ldr	r3, [r5, #0]
 80010aa:	b903      	cbnz	r3, 80010ae <__sflush_r+0x7a>
 80010ac:	6560      	str	r0, [r4, #84]	; 0x54
 80010ae:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80010b0:	602f      	str	r7, [r5, #0]
 80010b2:	2900      	cmp	r1, #0
 80010b4:	d0ca      	beq.n	800104c <__sflush_r+0x18>
 80010b6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80010ba:	4299      	cmp	r1, r3
 80010bc:	d002      	beq.n	80010c4 <__sflush_r+0x90>
 80010be:	4628      	mov	r0, r5
 80010c0:	f7ff fbee 	bl	80008a0 <_free_r>
 80010c4:	2000      	movs	r0, #0
 80010c6:	6360      	str	r0, [r4, #52]	; 0x34
 80010c8:	e7c1      	b.n	800104e <__sflush_r+0x1a>
 80010ca:	2301      	movs	r3, #1
 80010cc:	4628      	mov	r0, r5
 80010ce:	47b0      	blx	r6
 80010d0:	1c41      	adds	r1, r0, #1
 80010d2:	d1c8      	bne.n	8001066 <__sflush_r+0x32>
 80010d4:	682b      	ldr	r3, [r5, #0]
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d0c5      	beq.n	8001066 <__sflush_r+0x32>
 80010da:	2b1d      	cmp	r3, #29
 80010dc:	d001      	beq.n	80010e2 <__sflush_r+0xae>
 80010de:	2b16      	cmp	r3, #22
 80010e0:	d101      	bne.n	80010e6 <__sflush_r+0xb2>
 80010e2:	602f      	str	r7, [r5, #0]
 80010e4:	e7b2      	b.n	800104c <__sflush_r+0x18>
 80010e6:	89a3      	ldrh	r3, [r4, #12]
 80010e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80010ec:	81a3      	strh	r3, [r4, #12]
 80010ee:	e7ae      	b.n	800104e <__sflush_r+0x1a>
 80010f0:	690f      	ldr	r7, [r1, #16]
 80010f2:	2f00      	cmp	r7, #0
 80010f4:	d0aa      	beq.n	800104c <__sflush_r+0x18>
 80010f6:	0793      	lsls	r3, r2, #30
 80010f8:	bf18      	it	ne
 80010fa:	2300      	movne	r3, #0
 80010fc:	680e      	ldr	r6, [r1, #0]
 80010fe:	bf08      	it	eq
 8001100:	694b      	ldreq	r3, [r1, #20]
 8001102:	1bf6      	subs	r6, r6, r7
 8001104:	600f      	str	r7, [r1, #0]
 8001106:	608b      	str	r3, [r1, #8]
 8001108:	2e00      	cmp	r6, #0
 800110a:	dd9f      	ble.n	800104c <__sflush_r+0x18>
 800110c:	4633      	mov	r3, r6
 800110e:	463a      	mov	r2, r7
 8001110:	4628      	mov	r0, r5
 8001112:	6a21      	ldr	r1, [r4, #32]
 8001114:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8001118:	47e0      	blx	ip
 800111a:	2800      	cmp	r0, #0
 800111c:	dc06      	bgt.n	800112c <__sflush_r+0xf8>
 800111e:	89a3      	ldrh	r3, [r4, #12]
 8001120:	f04f 30ff 	mov.w	r0, #4294967295
 8001124:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001128:	81a3      	strh	r3, [r4, #12]
 800112a:	e790      	b.n	800104e <__sflush_r+0x1a>
 800112c:	4407      	add	r7, r0
 800112e:	1a36      	subs	r6, r6, r0
 8001130:	e7ea      	b.n	8001108 <__sflush_r+0xd4>
 8001132:	bf00      	nop
 8001134:	dfbffffe 	.word	0xdfbffffe

08001138 <_fflush_r>:
 8001138:	b538      	push	{r3, r4, r5, lr}
 800113a:	690b      	ldr	r3, [r1, #16]
 800113c:	4605      	mov	r5, r0
 800113e:	460c      	mov	r4, r1
 8001140:	b913      	cbnz	r3, 8001148 <_fflush_r+0x10>
 8001142:	2500      	movs	r5, #0
 8001144:	4628      	mov	r0, r5
 8001146:	bd38      	pop	{r3, r4, r5, pc}
 8001148:	b118      	cbz	r0, 8001152 <_fflush_r+0x1a>
 800114a:	6a03      	ldr	r3, [r0, #32]
 800114c:	b90b      	cbnz	r3, 8001152 <_fflush_r+0x1a>
 800114e:	f7ff fa9f 	bl	8000690 <__sinit>
 8001152:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001156:	2b00      	cmp	r3, #0
 8001158:	d0f3      	beq.n	8001142 <_fflush_r+0xa>
 800115a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800115c:	07d0      	lsls	r0, r2, #31
 800115e:	d404      	bmi.n	800116a <_fflush_r+0x32>
 8001160:	0599      	lsls	r1, r3, #22
 8001162:	d402      	bmi.n	800116a <_fflush_r+0x32>
 8001164:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001166:	f7ff fb98 	bl	800089a <__retarget_lock_acquire_recursive>
 800116a:	4628      	mov	r0, r5
 800116c:	4621      	mov	r1, r4
 800116e:	f7ff ff61 	bl	8001034 <__sflush_r>
 8001172:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001174:	4605      	mov	r5, r0
 8001176:	07da      	lsls	r2, r3, #31
 8001178:	d4e4      	bmi.n	8001144 <_fflush_r+0xc>
 800117a:	89a3      	ldrh	r3, [r4, #12]
 800117c:	059b      	lsls	r3, r3, #22
 800117e:	d4e1      	bmi.n	8001144 <_fflush_r+0xc>
 8001180:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001182:	f7ff fb8b 	bl	800089c <__retarget_lock_release_recursive>
 8001186:	e7dd      	b.n	8001144 <_fflush_r+0xc>

08001188 <__swbuf_r>:
 8001188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800118a:	460e      	mov	r6, r1
 800118c:	4614      	mov	r4, r2
 800118e:	4605      	mov	r5, r0
 8001190:	b118      	cbz	r0, 800119a <__swbuf_r+0x12>
 8001192:	6a03      	ldr	r3, [r0, #32]
 8001194:	b90b      	cbnz	r3, 800119a <__swbuf_r+0x12>
 8001196:	f7ff fa7b 	bl	8000690 <__sinit>
 800119a:	69a3      	ldr	r3, [r4, #24]
 800119c:	60a3      	str	r3, [r4, #8]
 800119e:	89a3      	ldrh	r3, [r4, #12]
 80011a0:	071a      	lsls	r2, r3, #28
 80011a2:	d525      	bpl.n	80011f0 <__swbuf_r+0x68>
 80011a4:	6923      	ldr	r3, [r4, #16]
 80011a6:	b31b      	cbz	r3, 80011f0 <__swbuf_r+0x68>
 80011a8:	6823      	ldr	r3, [r4, #0]
 80011aa:	6922      	ldr	r2, [r4, #16]
 80011ac:	b2f6      	uxtb	r6, r6
 80011ae:	1a98      	subs	r0, r3, r2
 80011b0:	6963      	ldr	r3, [r4, #20]
 80011b2:	4637      	mov	r7, r6
 80011b4:	4283      	cmp	r3, r0
 80011b6:	dc04      	bgt.n	80011c2 <__swbuf_r+0x3a>
 80011b8:	4621      	mov	r1, r4
 80011ba:	4628      	mov	r0, r5
 80011bc:	f7ff ffbc 	bl	8001138 <_fflush_r>
 80011c0:	b9e0      	cbnz	r0, 80011fc <__swbuf_r+0x74>
 80011c2:	68a3      	ldr	r3, [r4, #8]
 80011c4:	3b01      	subs	r3, #1
 80011c6:	60a3      	str	r3, [r4, #8]
 80011c8:	6823      	ldr	r3, [r4, #0]
 80011ca:	1c5a      	adds	r2, r3, #1
 80011cc:	6022      	str	r2, [r4, #0]
 80011ce:	701e      	strb	r6, [r3, #0]
 80011d0:	6962      	ldr	r2, [r4, #20]
 80011d2:	1c43      	adds	r3, r0, #1
 80011d4:	429a      	cmp	r2, r3
 80011d6:	d004      	beq.n	80011e2 <__swbuf_r+0x5a>
 80011d8:	89a3      	ldrh	r3, [r4, #12]
 80011da:	07db      	lsls	r3, r3, #31
 80011dc:	d506      	bpl.n	80011ec <__swbuf_r+0x64>
 80011de:	2e0a      	cmp	r6, #10
 80011e0:	d104      	bne.n	80011ec <__swbuf_r+0x64>
 80011e2:	4621      	mov	r1, r4
 80011e4:	4628      	mov	r0, r5
 80011e6:	f7ff ffa7 	bl	8001138 <_fflush_r>
 80011ea:	b938      	cbnz	r0, 80011fc <__swbuf_r+0x74>
 80011ec:	4638      	mov	r0, r7
 80011ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80011f0:	4621      	mov	r1, r4
 80011f2:	4628      	mov	r0, r5
 80011f4:	f000 f806 	bl	8001204 <__swsetup_r>
 80011f8:	2800      	cmp	r0, #0
 80011fa:	d0d5      	beq.n	80011a8 <__swbuf_r+0x20>
 80011fc:	f04f 37ff 	mov.w	r7, #4294967295
 8001200:	e7f4      	b.n	80011ec <__swbuf_r+0x64>
	...

08001204 <__swsetup_r>:
 8001204:	b538      	push	{r3, r4, r5, lr}
 8001206:	4b2a      	ldr	r3, [pc, #168]	; (80012b0 <__swsetup_r+0xac>)
 8001208:	4605      	mov	r5, r0
 800120a:	6818      	ldr	r0, [r3, #0]
 800120c:	460c      	mov	r4, r1
 800120e:	b118      	cbz	r0, 8001218 <__swsetup_r+0x14>
 8001210:	6a03      	ldr	r3, [r0, #32]
 8001212:	b90b      	cbnz	r3, 8001218 <__swsetup_r+0x14>
 8001214:	f7ff fa3c 	bl	8000690 <__sinit>
 8001218:	89a3      	ldrh	r3, [r4, #12]
 800121a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800121e:	0718      	lsls	r0, r3, #28
 8001220:	d422      	bmi.n	8001268 <__swsetup_r+0x64>
 8001222:	06d9      	lsls	r1, r3, #27
 8001224:	d407      	bmi.n	8001236 <__swsetup_r+0x32>
 8001226:	2309      	movs	r3, #9
 8001228:	602b      	str	r3, [r5, #0]
 800122a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800122e:	f04f 30ff 	mov.w	r0, #4294967295
 8001232:	81a3      	strh	r3, [r4, #12]
 8001234:	e034      	b.n	80012a0 <__swsetup_r+0x9c>
 8001236:	0758      	lsls	r0, r3, #29
 8001238:	d512      	bpl.n	8001260 <__swsetup_r+0x5c>
 800123a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800123c:	b141      	cbz	r1, 8001250 <__swsetup_r+0x4c>
 800123e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001242:	4299      	cmp	r1, r3
 8001244:	d002      	beq.n	800124c <__swsetup_r+0x48>
 8001246:	4628      	mov	r0, r5
 8001248:	f7ff fb2a 	bl	80008a0 <_free_r>
 800124c:	2300      	movs	r3, #0
 800124e:	6363      	str	r3, [r4, #52]	; 0x34
 8001250:	89a3      	ldrh	r3, [r4, #12]
 8001252:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001256:	81a3      	strh	r3, [r4, #12]
 8001258:	2300      	movs	r3, #0
 800125a:	6063      	str	r3, [r4, #4]
 800125c:	6923      	ldr	r3, [r4, #16]
 800125e:	6023      	str	r3, [r4, #0]
 8001260:	89a3      	ldrh	r3, [r4, #12]
 8001262:	f043 0308 	orr.w	r3, r3, #8
 8001266:	81a3      	strh	r3, [r4, #12]
 8001268:	6923      	ldr	r3, [r4, #16]
 800126a:	b94b      	cbnz	r3, 8001280 <__swsetup_r+0x7c>
 800126c:	89a3      	ldrh	r3, [r4, #12]
 800126e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001272:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001276:	d003      	beq.n	8001280 <__swsetup_r+0x7c>
 8001278:	4621      	mov	r1, r4
 800127a:	4628      	mov	r0, r5
 800127c:	f000 f85d 	bl	800133a <__smakebuf_r>
 8001280:	89a0      	ldrh	r0, [r4, #12]
 8001282:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001286:	f010 0301 	ands.w	r3, r0, #1
 800128a:	d00a      	beq.n	80012a2 <__swsetup_r+0x9e>
 800128c:	2300      	movs	r3, #0
 800128e:	60a3      	str	r3, [r4, #8]
 8001290:	6963      	ldr	r3, [r4, #20]
 8001292:	425b      	negs	r3, r3
 8001294:	61a3      	str	r3, [r4, #24]
 8001296:	6923      	ldr	r3, [r4, #16]
 8001298:	b943      	cbnz	r3, 80012ac <__swsetup_r+0xa8>
 800129a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800129e:	d1c4      	bne.n	800122a <__swsetup_r+0x26>
 80012a0:	bd38      	pop	{r3, r4, r5, pc}
 80012a2:	0781      	lsls	r1, r0, #30
 80012a4:	bf58      	it	pl
 80012a6:	6963      	ldrpl	r3, [r4, #20]
 80012a8:	60a3      	str	r3, [r4, #8]
 80012aa:	e7f4      	b.n	8001296 <__swsetup_r+0x92>
 80012ac:	2000      	movs	r0, #0
 80012ae:	e7f7      	b.n	80012a0 <__swsetup_r+0x9c>
 80012b0:	20000058 	.word	0x20000058

080012b4 <_sbrk_r>:
 80012b4:	b538      	push	{r3, r4, r5, lr}
 80012b6:	2300      	movs	r3, #0
 80012b8:	4d05      	ldr	r5, [pc, #20]	; (80012d0 <_sbrk_r+0x1c>)
 80012ba:	4604      	mov	r4, r0
 80012bc:	4608      	mov	r0, r1
 80012be:	602b      	str	r3, [r5, #0]
 80012c0:	f7ff f86c 	bl	800039c <_sbrk>
 80012c4:	1c43      	adds	r3, r0, #1
 80012c6:	d102      	bne.n	80012ce <_sbrk_r+0x1a>
 80012c8:	682b      	ldr	r3, [r5, #0]
 80012ca:	b103      	cbz	r3, 80012ce <_sbrk_r+0x1a>
 80012cc:	6023      	str	r3, [r4, #0]
 80012ce:	bd38      	pop	{r3, r4, r5, pc}
 80012d0:	200001b8 	.word	0x200001b8

080012d4 <memchr>:
 80012d4:	4603      	mov	r3, r0
 80012d6:	b510      	push	{r4, lr}
 80012d8:	b2c9      	uxtb	r1, r1
 80012da:	4402      	add	r2, r0
 80012dc:	4293      	cmp	r3, r2
 80012de:	4618      	mov	r0, r3
 80012e0:	d101      	bne.n	80012e6 <memchr+0x12>
 80012e2:	2000      	movs	r0, #0
 80012e4:	e003      	b.n	80012ee <memchr+0x1a>
 80012e6:	7804      	ldrb	r4, [r0, #0]
 80012e8:	3301      	adds	r3, #1
 80012ea:	428c      	cmp	r4, r1
 80012ec:	d1f6      	bne.n	80012dc <memchr+0x8>
 80012ee:	bd10      	pop	{r4, pc}

080012f0 <__swhatbuf_r>:
 80012f0:	b570      	push	{r4, r5, r6, lr}
 80012f2:	460c      	mov	r4, r1
 80012f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80012f8:	4615      	mov	r5, r2
 80012fa:	2900      	cmp	r1, #0
 80012fc:	461e      	mov	r6, r3
 80012fe:	b096      	sub	sp, #88	; 0x58
 8001300:	da0c      	bge.n	800131c <__swhatbuf_r+0x2c>
 8001302:	89a3      	ldrh	r3, [r4, #12]
 8001304:	2100      	movs	r1, #0
 8001306:	f013 0f80 	tst.w	r3, #128	; 0x80
 800130a:	bf0c      	ite	eq
 800130c:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8001310:	2340      	movne	r3, #64	; 0x40
 8001312:	2000      	movs	r0, #0
 8001314:	6031      	str	r1, [r6, #0]
 8001316:	602b      	str	r3, [r5, #0]
 8001318:	b016      	add	sp, #88	; 0x58
 800131a:	bd70      	pop	{r4, r5, r6, pc}
 800131c:	466a      	mov	r2, sp
 800131e:	f000 f849 	bl	80013b4 <_fstat_r>
 8001322:	2800      	cmp	r0, #0
 8001324:	dbed      	blt.n	8001302 <__swhatbuf_r+0x12>
 8001326:	9901      	ldr	r1, [sp, #4]
 8001328:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800132c:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8001330:	4259      	negs	r1, r3
 8001332:	4159      	adcs	r1, r3
 8001334:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001338:	e7eb      	b.n	8001312 <__swhatbuf_r+0x22>

0800133a <__smakebuf_r>:
 800133a:	898b      	ldrh	r3, [r1, #12]
 800133c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800133e:	079d      	lsls	r5, r3, #30
 8001340:	4606      	mov	r6, r0
 8001342:	460c      	mov	r4, r1
 8001344:	d507      	bpl.n	8001356 <__smakebuf_r+0x1c>
 8001346:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800134a:	6023      	str	r3, [r4, #0]
 800134c:	6123      	str	r3, [r4, #16]
 800134e:	2301      	movs	r3, #1
 8001350:	6163      	str	r3, [r4, #20]
 8001352:	b002      	add	sp, #8
 8001354:	bd70      	pop	{r4, r5, r6, pc}
 8001356:	466a      	mov	r2, sp
 8001358:	ab01      	add	r3, sp, #4
 800135a:	f7ff ffc9 	bl	80012f0 <__swhatbuf_r>
 800135e:	9900      	ldr	r1, [sp, #0]
 8001360:	4605      	mov	r5, r0
 8001362:	4630      	mov	r0, r6
 8001364:	f7ff fb04 	bl	8000970 <_malloc_r>
 8001368:	b948      	cbnz	r0, 800137e <__smakebuf_r+0x44>
 800136a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800136e:	059a      	lsls	r2, r3, #22
 8001370:	d4ef      	bmi.n	8001352 <__smakebuf_r+0x18>
 8001372:	f023 0303 	bic.w	r3, r3, #3
 8001376:	f043 0302 	orr.w	r3, r3, #2
 800137a:	81a3      	strh	r3, [r4, #12]
 800137c:	e7e3      	b.n	8001346 <__smakebuf_r+0xc>
 800137e:	89a3      	ldrh	r3, [r4, #12]
 8001380:	6020      	str	r0, [r4, #0]
 8001382:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001386:	81a3      	strh	r3, [r4, #12]
 8001388:	9b00      	ldr	r3, [sp, #0]
 800138a:	6120      	str	r0, [r4, #16]
 800138c:	6163      	str	r3, [r4, #20]
 800138e:	9b01      	ldr	r3, [sp, #4]
 8001390:	b15b      	cbz	r3, 80013aa <__smakebuf_r+0x70>
 8001392:	4630      	mov	r0, r6
 8001394:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001398:	f000 f81e 	bl	80013d8 <_isatty_r>
 800139c:	b128      	cbz	r0, 80013aa <__smakebuf_r+0x70>
 800139e:	89a3      	ldrh	r3, [r4, #12]
 80013a0:	f023 0303 	bic.w	r3, r3, #3
 80013a4:	f043 0301 	orr.w	r3, r3, #1
 80013a8:	81a3      	strh	r3, [r4, #12]
 80013aa:	89a3      	ldrh	r3, [r4, #12]
 80013ac:	431d      	orrs	r5, r3
 80013ae:	81a5      	strh	r5, [r4, #12]
 80013b0:	e7cf      	b.n	8001352 <__smakebuf_r+0x18>
	...

080013b4 <_fstat_r>:
 80013b4:	b538      	push	{r3, r4, r5, lr}
 80013b6:	2300      	movs	r3, #0
 80013b8:	4d06      	ldr	r5, [pc, #24]	; (80013d4 <_fstat_r+0x20>)
 80013ba:	4604      	mov	r4, r0
 80013bc:	4608      	mov	r0, r1
 80013be:	4611      	mov	r1, r2
 80013c0:	602b      	str	r3, [r5, #0]
 80013c2:	f7fe ffc5 	bl	8000350 <_fstat>
 80013c6:	1c43      	adds	r3, r0, #1
 80013c8:	d102      	bne.n	80013d0 <_fstat_r+0x1c>
 80013ca:	682b      	ldr	r3, [r5, #0]
 80013cc:	b103      	cbz	r3, 80013d0 <_fstat_r+0x1c>
 80013ce:	6023      	str	r3, [r4, #0]
 80013d0:	bd38      	pop	{r3, r4, r5, pc}
 80013d2:	bf00      	nop
 80013d4:	200001b8 	.word	0x200001b8

080013d8 <_isatty_r>:
 80013d8:	b538      	push	{r3, r4, r5, lr}
 80013da:	2300      	movs	r3, #0
 80013dc:	4d05      	ldr	r5, [pc, #20]	; (80013f4 <_isatty_r+0x1c>)
 80013de:	4604      	mov	r4, r0
 80013e0:	4608      	mov	r0, r1
 80013e2:	602b      	str	r3, [r5, #0]
 80013e4:	f7fe ffc3 	bl	800036e <_isatty>
 80013e8:	1c43      	adds	r3, r0, #1
 80013ea:	d102      	bne.n	80013f2 <_isatty_r+0x1a>
 80013ec:	682b      	ldr	r3, [r5, #0]
 80013ee:	b103      	cbz	r3, 80013f2 <_isatty_r+0x1a>
 80013f0:	6023      	str	r3, [r4, #0]
 80013f2:	bd38      	pop	{r3, r4, r5, pc}
 80013f4:	200001b8 	.word	0x200001b8

080013f8 <_init>:
 80013f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013fa:	bf00      	nop
 80013fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80013fe:	bc08      	pop	{r3}
 8001400:	469e      	mov	lr, r3
 8001402:	4770      	bx	lr

08001404 <_fini>:
 8001404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001406:	bf00      	nop
 8001408:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800140a:	bc08      	pop	{r3}
 800140c:	469e      	mov	lr, r3
 800140e:	4770      	bx	lr
