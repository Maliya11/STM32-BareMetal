
14_InputCapture.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000258  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000388  08000390  00010390  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000388  08000388  00010390  2**0
                  CONTENTS
  4 .ARM          00000000  08000388  08000388  00010390  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000388  08000390  00010390  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000388  08000388  00010388  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800038c  0800038c  0001038c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010390  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000000  08000390  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  08000390  00020020  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010390  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000103b9  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000546  00000000  00000000  000103fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000190  00000000  00000000  00010942  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000078  00000000  00000000  00010ad8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000004d  00000000  00000000  00010b50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00000d8f  00000000  00000000  00010b9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000d28  00000000  00000000  0001192c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00057c27  00000000  00000000  00012654  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000000c8  00000000  00000000  0006a27c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  0006a344  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000370 	.word	0x08000370

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000370 	.word	0x08000370

08000170 <main>:

int timestamp = 0;

/*Connect a jumper wire from PA0 to PA6*/
int main(void)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	af00      	add	r7, sp, #0

	tim2_PA0_output_compare();
 8000174:	f000 f814 	bl	80001a0 <tim2_PA0_output_compare>
	tim3_PA6_input_capture();
 8000178:	f000 f866 	bl	8000248 <tim3_PA6_input_capture>


	while(1)
	{
		/*wait until edge is captured*/
		while(!(TIM3->SR & SR_CC1IF)){}
 800017c:	bf00      	nop
 800017e:	4b06      	ldr	r3, [pc, #24]	; (8000198 <main+0x28>)
 8000180:	691b      	ldr	r3, [r3, #16]
 8000182:	f003 0302 	and.w	r3, r3, #2
 8000186:	2b00      	cmp	r3, #0
 8000188:	d0f9      	beq.n	800017e <main+0xe>

		/*Read captured value*/
		timestamp = TIM3->CCR1;
 800018a:	4b03      	ldr	r3, [pc, #12]	; (8000198 <main+0x28>)
 800018c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800018e:	461a      	mov	r2, r3
 8000190:	4b02      	ldr	r3, [pc, #8]	; (800019c <main+0x2c>)
 8000192:	601a      	str	r2, [r3, #0]
		while(!(TIM3->SR & SR_CC1IF)){}
 8000194:	e7f2      	b.n	800017c <main+0xc>
 8000196:	bf00      	nop
 8000198:	40000400 	.word	0x40000400
 800019c:	2000001c 	.word	0x2000001c

080001a0 <tim2_PA0_output_compare>:
	/*Enable timer*/
	TIM2->CR1 = CR1_CEN;
}

void tim2_PA0_output_compare(void)
{
 80001a0:	b480      	push	{r7}
 80001a2:	af00      	add	r7, sp, #0
	/*Configure GPIOA*/
	RCC->APB2ENR |= GPIOA_EN;
 80001a4:	4b25      	ldr	r3, [pc, #148]	; (800023c <tim2_PA0_output_compare+0x9c>)
 80001a6:	699b      	ldr	r3, [r3, #24]
 80001a8:	4a24      	ldr	r2, [pc, #144]	; (800023c <tim2_PA0_output_compare+0x9c>)
 80001aa:	f043 0304 	orr.w	r3, r3, #4
 80001ae:	6193      	str	r3, [r2, #24]
	/*Set PA0 to alternate function mode*/
	GPIOA->CRL |= (1U<<0);
 80001b0:	4b23      	ldr	r3, [pc, #140]	; (8000240 <tim2_PA0_output_compare+0xa0>)
 80001b2:	681b      	ldr	r3, [r3, #0]
 80001b4:	4a22      	ldr	r2, [pc, #136]	; (8000240 <tim2_PA0_output_compare+0xa0>)
 80001b6:	f043 0301 	orr.w	r3, r3, #1
 80001ba:	6013      	str	r3, [r2, #0]
	GPIOA->CRL |= (1U<<1);
 80001bc:	4b20      	ldr	r3, [pc, #128]	; (8000240 <tim2_PA0_output_compare+0xa0>)
 80001be:	681b      	ldr	r3, [r3, #0]
 80001c0:	4a1f      	ldr	r2, [pc, #124]	; (8000240 <tim2_PA0_output_compare+0xa0>)
 80001c2:	f043 0302 	orr.w	r3, r3, #2
 80001c6:	6013      	str	r3, [r2, #0]
	GPIOA->CRL |= ~(1U<<2);
 80001c8:	4b1d      	ldr	r3, [pc, #116]	; (8000240 <tim2_PA0_output_compare+0xa0>)
 80001ca:	681b      	ldr	r3, [r3, #0]
 80001cc:	4a1c      	ldr	r2, [pc, #112]	; (8000240 <tim2_PA0_output_compare+0xa0>)
 80001ce:	f063 0304 	orn	r3, r3, #4
 80001d2:	6013      	str	r3, [r2, #0]
	GPIOA->CRL |= (1U<<3);
 80001d4:	4b1a      	ldr	r3, [pc, #104]	; (8000240 <tim2_PA0_output_compare+0xa0>)
 80001d6:	681b      	ldr	r3, [r3, #0]
 80001d8:	4a19      	ldr	r2, [pc, #100]	; (8000240 <tim2_PA0_output_compare+0xa0>)
 80001da:	f043 0308 	orr.w	r3, r3, #8
 80001de:	6013      	str	r3, [r2, #0]
	/*Set PA0 alternate function type*/
	AFIO->MAPR &= ~ MAPR_TIM2_REMAP;
 80001e0:	4b18      	ldr	r3, [pc, #96]	; (8000244 <tim2_PA0_output_compare+0xa4>)
 80001e2:	685b      	ldr	r3, [r3, #4]
 80001e4:	4a17      	ldr	r2, [pc, #92]	; (8000244 <tim2_PA0_output_compare+0xa4>)
 80001e6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80001ea:	6053      	str	r3, [r2, #4]


	/*Enable clock access to TIM2*/
	RCC->APB1ENR |= TIM2EN;
 80001ec:	4b13      	ldr	r3, [pc, #76]	; (800023c <tim2_PA0_output_compare+0x9c>)
 80001ee:	69db      	ldr	r3, [r3, #28]
 80001f0:	4a12      	ldr	r2, [pc, #72]	; (800023c <tim2_PA0_output_compare+0x9c>)
 80001f2:	f043 0301 	orr.w	r3, r3, #1
 80001f6:	61d3      	str	r3, [r2, #28]

	/*Set pre-scalar value*/
	TIM2->PSC = 1600-1;  /* 16MHz/1600 = 10kHz */
 80001f8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80001fc:	f240 623f 	movw	r2, #1599	; 0x63f
 8000200:	629a      	str	r2, [r3, #40]	; 0x28
	/*Set auto reload value*/
	TIM2->ARR = 10000 - 1; /* 10kHz/10000 = 1Hz */
 8000202:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000206:	f242 720f 	movw	r2, #9999	; 0x270f
 800020a:	62da      	str	r2, [r3, #44]	; 0x2c

	/*Set output compare toggle mode*/
	TIM2->CCMR1 = OC_TOGGLE;
 800020c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000210:	2230      	movs	r2, #48	; 0x30
 8000212:	619a      	str	r2, [r3, #24]
	/*Enable TIM2 channel 1 in compare mode*/
	TIM2->CCER |= CCER_CC1E;
 8000214:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000218:	6a1b      	ldr	r3, [r3, #32]
 800021a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800021e:	f043 0301 	orr.w	r3, r3, #1
 8000222:	6213      	str	r3, [r2, #32]

	/*clean counter*/
	TIM2->CNT = 0;
 8000224:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000228:	2200      	movs	r2, #0
 800022a:	625a      	str	r2, [r3, #36]	; 0x24

	/*Enable timer*/
	TIM2->CR1 = CR1_CEN;
 800022c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000230:	2201      	movs	r2, #1
 8000232:	601a      	str	r2, [r3, #0]
}
 8000234:	bf00      	nop
 8000236:	46bd      	mov	sp, r7
 8000238:	bc80      	pop	{r7}
 800023a:	4770      	bx	lr
 800023c:	40021000 	.word	0x40021000
 8000240:	40010800 	.word	0x40010800
 8000244:	40010000 	.word	0x40010000

08000248 <tim3_PA6_input_capture>:

void tim3_PA6_input_capture(void)
{
 8000248:	b480      	push	{r7}
 800024a:	af00      	add	r7, sp, #0
	/*Configure GPIOA*/
	RCC->APB2ENR |= GPIOA_EN;
 800024c:	4b1d      	ldr	r3, [pc, #116]	; (80002c4 <tim3_PA6_input_capture+0x7c>)
 800024e:	699b      	ldr	r3, [r3, #24]
 8000250:	4a1c      	ldr	r2, [pc, #112]	; (80002c4 <tim3_PA6_input_capture+0x7c>)
 8000252:	f043 0304 	orr.w	r3, r3, #4
 8000256:	6193      	str	r3, [r2, #24]
	/*Set PA6 to alternate function mode*/
	GPIOA->CRL |= (1U<<24);
 8000258:	4b1b      	ldr	r3, [pc, #108]	; (80002c8 <tim3_PA6_input_capture+0x80>)
 800025a:	681b      	ldr	r3, [r3, #0]
 800025c:	4a1a      	ldr	r2, [pc, #104]	; (80002c8 <tim3_PA6_input_capture+0x80>)
 800025e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000262:	6013      	str	r3, [r2, #0]
	GPIOA->CRL |= (1U<<25);
 8000264:	4b18      	ldr	r3, [pc, #96]	; (80002c8 <tim3_PA6_input_capture+0x80>)
 8000266:	681b      	ldr	r3, [r3, #0]
 8000268:	4a17      	ldr	r2, [pc, #92]	; (80002c8 <tim3_PA6_input_capture+0x80>)
 800026a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800026e:	6013      	str	r3, [r2, #0]
	GPIOA->CRL |= ~(1U<<26);
 8000270:	4b15      	ldr	r3, [pc, #84]	; (80002c8 <tim3_PA6_input_capture+0x80>)
 8000272:	681b      	ldr	r3, [r3, #0]
 8000274:	4a14      	ldr	r2, [pc, #80]	; (80002c8 <tim3_PA6_input_capture+0x80>)
 8000276:	f063 6380 	orn	r3, r3, #67108864	; 0x4000000
 800027a:	6013      	str	r3, [r2, #0]
	GPIOA->CRL |= (1U<<27);
 800027c:	4b12      	ldr	r3, [pc, #72]	; (80002c8 <tim3_PA6_input_capture+0x80>)
 800027e:	681b      	ldr	r3, [r3, #0]
 8000280:	4a11      	ldr	r2, [pc, #68]	; (80002c8 <tim3_PA6_input_capture+0x80>)
 8000282:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000286:	6013      	str	r3, [r2, #0]

	/*Set PA6 alternate function type*/
	AFIO->MAPR &= ~ MAPR_TIM3_REMAP;
 8000288:	4b10      	ldr	r3, [pc, #64]	; (80002cc <tim3_PA6_input_capture+0x84>)
 800028a:	685b      	ldr	r3, [r3, #4]
 800028c:	4a0f      	ldr	r2, [pc, #60]	; (80002cc <tim3_PA6_input_capture+0x84>)
 800028e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000292:	6053      	str	r3, [r2, #4]

	/*Enable clock access to TIM3*/
	RCC->APB1ENR |= TIM3EN;
 8000294:	4b0b      	ldr	r3, [pc, #44]	; (80002c4 <tim3_PA6_input_capture+0x7c>)
 8000296:	69db      	ldr	r3, [r3, #28]
 8000298:	4a0a      	ldr	r2, [pc, #40]	; (80002c4 <tim3_PA6_input_capture+0x7c>)
 800029a:	f043 0302 	orr.w	r3, r3, #2
 800029e:	61d3      	str	r3, [r2, #28]

	/*set pre-scalar*/
	TIM3->PSC = 16000-1;
 80002a0:	4b0b      	ldr	r3, [pc, #44]	; (80002d0 <tim3_PA6_input_capture+0x88>)
 80002a2:	f643 627f 	movw	r2, #15999	; 0x3e7f
 80002a6:	629a      	str	r2, [r3, #40]	; 0x28

	/*Set CH1 to input mode*/
	TIM3->CCMR1 = CCMR1_CC1S;
 80002a8:	4b09      	ldr	r3, [pc, #36]	; (80002d0 <tim3_PA6_input_capture+0x88>)
 80002aa:	2201      	movs	r2, #1
 80002ac:	619a      	str	r2, [r3, #24]

	/*Set CH1 to capture at rising edge*/
	TIM3->CCER = CCER_CC1E;
 80002ae:	4b08      	ldr	r3, [pc, #32]	; (80002d0 <tim3_PA6_input_capture+0x88>)
 80002b0:	2201      	movs	r2, #1
 80002b2:	621a      	str	r2, [r3, #32]

	/*Enable TIM3*/
	TIM3->CR1 = CR1_CEN;
 80002b4:	4b06      	ldr	r3, [pc, #24]	; (80002d0 <tim3_PA6_input_capture+0x88>)
 80002b6:	2201      	movs	r2, #1
 80002b8:	601a      	str	r2, [r3, #0]
}
 80002ba:	bf00      	nop
 80002bc:	46bd      	mov	sp, r7
 80002be:	bc80      	pop	{r7}
 80002c0:	4770      	bx	lr
 80002c2:	bf00      	nop
 80002c4:	40021000 	.word	0x40021000
 80002c8:	40010800 	.word	0x40010800
 80002cc:	40010000 	.word	0x40010000
 80002d0:	40000400 	.word	0x40000400

080002d4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002d4:	480d      	ldr	r0, [pc, #52]	; (800030c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002d6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80002d8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002dc:	480c      	ldr	r0, [pc, #48]	; (8000310 <LoopForever+0x6>)
  ldr r1, =_edata
 80002de:	490d      	ldr	r1, [pc, #52]	; (8000314 <LoopForever+0xa>)
  ldr r2, =_sidata
 80002e0:	4a0d      	ldr	r2, [pc, #52]	; (8000318 <LoopForever+0xe>)
  movs r3, #0
 80002e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002e4:	e002      	b.n	80002ec <LoopCopyDataInit>

080002e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002ea:	3304      	adds	r3, #4

080002ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002f0:	d3f9      	bcc.n	80002e6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002f2:	4a0a      	ldr	r2, [pc, #40]	; (800031c <LoopForever+0x12>)
  ldr r4, =_ebss
 80002f4:	4c0a      	ldr	r4, [pc, #40]	; (8000320 <LoopForever+0x16>)
  movs r3, #0
 80002f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002f8:	e001      	b.n	80002fe <LoopFillZerobss>

080002fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002fc:	3204      	adds	r2, #4

080002fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000300:	d3fb      	bcc.n	80002fa <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000302:	f000 f811 	bl	8000328 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000306:	f7ff ff33 	bl	8000170 <main>

0800030a <LoopForever>:

LoopForever:
  b LoopForever
 800030a:	e7fe      	b.n	800030a <LoopForever>
  ldr   r0, =_estack
 800030c:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000310:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000314:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000318:	08000390 	.word	0x08000390
  ldr r2, =_sbss
 800031c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000320:	20000020 	.word	0x20000020

08000324 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000324:	e7fe      	b.n	8000324 <ADC1_2_IRQHandler>
	...

08000328 <__libc_init_array>:
 8000328:	b570      	push	{r4, r5, r6, lr}
 800032a:	2600      	movs	r6, #0
 800032c:	4d0c      	ldr	r5, [pc, #48]	; (8000360 <__libc_init_array+0x38>)
 800032e:	4c0d      	ldr	r4, [pc, #52]	; (8000364 <__libc_init_array+0x3c>)
 8000330:	1b64      	subs	r4, r4, r5
 8000332:	10a4      	asrs	r4, r4, #2
 8000334:	42a6      	cmp	r6, r4
 8000336:	d109      	bne.n	800034c <__libc_init_array+0x24>
 8000338:	f000 f81a 	bl	8000370 <_init>
 800033c:	2600      	movs	r6, #0
 800033e:	4d0a      	ldr	r5, [pc, #40]	; (8000368 <__libc_init_array+0x40>)
 8000340:	4c0a      	ldr	r4, [pc, #40]	; (800036c <__libc_init_array+0x44>)
 8000342:	1b64      	subs	r4, r4, r5
 8000344:	10a4      	asrs	r4, r4, #2
 8000346:	42a6      	cmp	r6, r4
 8000348:	d105      	bne.n	8000356 <__libc_init_array+0x2e>
 800034a:	bd70      	pop	{r4, r5, r6, pc}
 800034c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000350:	4798      	blx	r3
 8000352:	3601      	adds	r6, #1
 8000354:	e7ee      	b.n	8000334 <__libc_init_array+0xc>
 8000356:	f855 3b04 	ldr.w	r3, [r5], #4
 800035a:	4798      	blx	r3
 800035c:	3601      	adds	r6, #1
 800035e:	e7f2      	b.n	8000346 <__libc_init_array+0x1e>
 8000360:	08000388 	.word	0x08000388
 8000364:	08000388 	.word	0x08000388
 8000368:	08000388 	.word	0x08000388
 800036c:	0800038c 	.word	0x0800038c

08000370 <_init>:
 8000370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000372:	bf00      	nop
 8000374:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000376:	bc08      	pop	{r3}
 8000378:	469e      	mov	lr, r3
 800037a:	4770      	bx	lr

0800037c <_fini>:
 800037c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800037e:	bf00      	nop
 8000380:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000382:	bc08      	pop	{r3}
 8000384:	469e      	mov	lr, r3
 8000386:	4770      	bx	lr
