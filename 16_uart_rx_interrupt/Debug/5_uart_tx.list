
5_uart_tx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000208  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000338  08000340  00010340  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000338  08000338  00010340  2**0
                  CONTENTS
  4 .ARM          00000000  08000338  08000338  00010340  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000338  08000340  00010340  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000338  08000338  00010338  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800033c  0800033c  0001033c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010340  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000340  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000340  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010340  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00010369  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000361  00000000  00000000  000103ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000015c  00000000  00000000  0001070d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000068  00000000  00000000  00010870  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000045  00000000  00000000  000108d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000ff2a  00000000  00000000  0001091d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000064a  00000000  00000000  00020847  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00054163  00000000  00000000  00020e91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000000e8  00000000  00000000  00074ff4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  000750dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000320 	.word	0x08000320

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000320 	.word	0x08000320

08000170 <main>:

void uart1_write(int ch);
void uart1_tx_init(void);

int main(void)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	af00      	add	r7, sp, #0

	uart1_tx_init();
 8000174:	f000 f804 	bl	8000180 <uart1_tx_init>

	while(1)
	{
		uart1_write('Y');
 8000178:	2059      	movs	r0, #89	; 0x59
 800017a:	f000 f849 	bl	8000210 <uart1_write>
 800017e:	e7fb      	b.n	8000178 <main+0x8>

08000180 <uart1_tx_init>:
}



void uart1_tx_init(void)
{
 8000180:	b580      	push	{r7, lr}
 8000182:	af00      	add	r7, sp, #0
	/*******Configure usart gpio pins*********/
	/*Enable clock access to gpioa*/
	RCC->APB2ENR |= GPIOA_EN;
 8000184:	4b1d      	ldr	r3, [pc, #116]	; (80001fc <uart1_tx_init+0x7c>)
 8000186:	699b      	ldr	r3, [r3, #24]
 8000188:	4a1c      	ldr	r2, [pc, #112]	; (80001fc <uart1_tx_init+0x7c>)
 800018a:	f043 0304 	orr.w	r3, r3, #4
 800018e:	6193      	str	r3, [r2, #24]

	/*Set PA9 to alternate function mode*/
	GPIOA->CRH |= (1U<<4);
 8000190:	4b1b      	ldr	r3, [pc, #108]	; (8000200 <uart1_tx_init+0x80>)
 8000192:	685b      	ldr	r3, [r3, #4]
 8000194:	4a1a      	ldr	r2, [pc, #104]	; (8000200 <uart1_tx_init+0x80>)
 8000196:	f043 0310 	orr.w	r3, r3, #16
 800019a:	6053      	str	r3, [r2, #4]
	GPIOA->CRH |= (1U<<5);
 800019c:	4b18      	ldr	r3, [pc, #96]	; (8000200 <uart1_tx_init+0x80>)
 800019e:	685b      	ldr	r3, [r3, #4]
 80001a0:	4a17      	ldr	r2, [pc, #92]	; (8000200 <uart1_tx_init+0x80>)
 80001a2:	f043 0320 	orr.w	r3, r3, #32
 80001a6:	6053      	str	r3, [r2, #4]
	GPIOA->CRH &= ~(1U<<6);
 80001a8:	4b15      	ldr	r3, [pc, #84]	; (8000200 <uart1_tx_init+0x80>)
 80001aa:	685b      	ldr	r3, [r3, #4]
 80001ac:	4a14      	ldr	r2, [pc, #80]	; (8000200 <uart1_tx_init+0x80>)
 80001ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80001b2:	6053      	str	r3, [r2, #4]
	GPIOA->CRH |= (1U<<7);
 80001b4:	4b12      	ldr	r3, [pc, #72]	; (8000200 <uart1_tx_init+0x80>)
 80001b6:	685b      	ldr	r3, [r3, #4]
 80001b8:	4a11      	ldr	r2, [pc, #68]	; (8000200 <uart1_tx_init+0x80>)
 80001ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80001be:	6053      	str	r3, [r2, #4]

	/*Set PA2 type to UART_TX*/
	AFIO->MAPR &= ~(1U<<2);
 80001c0:	4b10      	ldr	r3, [pc, #64]	; (8000204 <uart1_tx_init+0x84>)
 80001c2:	685b      	ldr	r3, [r3, #4]
 80001c4:	4a0f      	ldr	r2, [pc, #60]	; (8000204 <uart1_tx_init+0x84>)
 80001c6:	f023 0304 	bic.w	r3, r3, #4
 80001ca:	6053      	str	r3, [r2, #4]

	/**********Configure uart module**************/
	/*Enable clock access to uart1*/
	RCC->APB2ENR |= UART2_EN;
 80001cc:	4b0b      	ldr	r3, [pc, #44]	; (80001fc <uart1_tx_init+0x7c>)
 80001ce:	699b      	ldr	r3, [r3, #24]
 80001d0:	4a0a      	ldr	r2, [pc, #40]	; (80001fc <uart1_tx_init+0x7c>)
 80001d2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80001d6:	6193      	str	r3, [r2, #24]

	/*configure baudrate*/
	uart_set_baudrate(USART1,APB2_CLK,UART_BAUDRATE);
 80001d8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80001dc:	490a      	ldr	r1, [pc, #40]	; (8000208 <uart1_tx_init+0x88>)
 80001de:	480b      	ldr	r0, [pc, #44]	; (800020c <uart1_tx_init+0x8c>)
 80001e0:	f000 f82c 	bl	800023c <uart_set_baudrate>

	/*Configure transfer direction*/
	USART1->CR1 = CR1_TE;  //SETTING THE VALUE
 80001e4:	4b09      	ldr	r3, [pc, #36]	; (800020c <uart1_tx_init+0x8c>)
 80001e6:	2208      	movs	r2, #8
 80001e8:	60da      	str	r2, [r3, #12]
	//TO ERASE THE UART REGISTER

	/*Enable uart module*/
	USART1->CR1 |= CR1_UE;
 80001ea:	4b08      	ldr	r3, [pc, #32]	; (800020c <uart1_tx_init+0x8c>)
 80001ec:	68db      	ldr	r3, [r3, #12]
 80001ee:	4a07      	ldr	r2, [pc, #28]	; (800020c <uart1_tx_init+0x8c>)
 80001f0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80001f4:	60d3      	str	r3, [r2, #12]
}
 80001f6:	bf00      	nop
 80001f8:	bd80      	pop	{r7, pc}
 80001fa:	bf00      	nop
 80001fc:	40021000 	.word	0x40021000
 8000200:	40010800 	.word	0x40010800
 8000204:	40010000 	.word	0x40010000
 8000208:	00f42400 	.word	0x00f42400
 800020c:	40013800 	.word	0x40013800

08000210 <uart1_write>:


void uart1_write(int ch)
{
 8000210:	b480      	push	{r7}
 8000212:	b083      	sub	sp, #12
 8000214:	af00      	add	r7, sp, #0
 8000216:	6078      	str	r0, [r7, #4]
	/*Make sure transmit data register is empty*/
	while(!(USART1->SR & SR_TXE)){}
 8000218:	bf00      	nop
 800021a:	4b07      	ldr	r3, [pc, #28]	; (8000238 <uart1_write+0x28>)
 800021c:	681b      	ldr	r3, [r3, #0]
 800021e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000222:	2b00      	cmp	r3, #0
 8000224:	d0f9      	beq.n	800021a <uart1_write+0xa>

	/*Write to transmit data register*/
	USART1->DR = (ch & 0xFF); //to transmit 8 bit
 8000226:	687b      	ldr	r3, [r7, #4]
 8000228:	4a03      	ldr	r2, [pc, #12]	; (8000238 <uart1_write+0x28>)
 800022a:	b2db      	uxtb	r3, r3
 800022c:	6053      	str	r3, [r2, #4]

}
 800022e:	bf00      	nop
 8000230:	370c      	adds	r7, #12
 8000232:	46bd      	mov	sp, r7
 8000234:	bc80      	pop	{r7}
 8000236:	4770      	bx	lr
 8000238:	40013800 	.word	0x40013800

0800023c <uart_set_baudrate>:

static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t BaudRate)
{
 800023c:	b580      	push	{r7, lr}
 800023e:	b084      	sub	sp, #16
 8000240:	af00      	add	r7, sp, #0
 8000242:	60f8      	str	r0, [r7, #12]
 8000244:	60b9      	str	r1, [r7, #8]
 8000246:	607a      	str	r2, [r7, #4]
	USARTx->BRR = compute_uart_bd(PeriphClk, BaudRate);
 8000248:	6879      	ldr	r1, [r7, #4]
 800024a:	68b8      	ldr	r0, [r7, #8]
 800024c:	f000 f808 	bl	8000260 <compute_uart_bd>
 8000250:	4603      	mov	r3, r0
 8000252:	461a      	mov	r2, r3
 8000254:	68fb      	ldr	r3, [r7, #12]
 8000256:	609a      	str	r2, [r3, #8]
}
 8000258:	bf00      	nop
 800025a:	3710      	adds	r7, #16
 800025c:	46bd      	mov	sp, r7
 800025e:	bd80      	pop	{r7, pc}

08000260 <compute_uart_bd>:

static uint16_t compute_uart_bd(uint32_t PeriphClk, uint32_t BaudRate)
{
 8000260:	b480      	push	{r7}
 8000262:	b083      	sub	sp, #12
 8000264:	af00      	add	r7, sp, #0
 8000266:	6078      	str	r0, [r7, #4]
 8000268:	6039      	str	r1, [r7, #0]
	return ((PeriphClk + (BaudRate/2U))/BaudRate);
 800026a:	683b      	ldr	r3, [r7, #0]
 800026c:	085a      	lsrs	r2, r3, #1
 800026e:	687b      	ldr	r3, [r7, #4]
 8000270:	441a      	add	r2, r3
 8000272:	683b      	ldr	r3, [r7, #0]
 8000274:	fbb2 f3f3 	udiv	r3, r2, r3
 8000278:	b29b      	uxth	r3, r3
}
 800027a:	4618      	mov	r0, r3
 800027c:	370c      	adds	r7, #12
 800027e:	46bd      	mov	sp, r7
 8000280:	bc80      	pop	{r7}
 8000282:	4770      	bx	lr

08000284 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000284:	480d      	ldr	r0, [pc, #52]	; (80002bc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000286:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000288:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800028c:	480c      	ldr	r0, [pc, #48]	; (80002c0 <LoopForever+0x6>)
  ldr r1, =_edata
 800028e:	490d      	ldr	r1, [pc, #52]	; (80002c4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000290:	4a0d      	ldr	r2, [pc, #52]	; (80002c8 <LoopForever+0xe>)
  movs r3, #0
 8000292:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000294:	e002      	b.n	800029c <LoopCopyDataInit>

08000296 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000296:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000298:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800029a:	3304      	adds	r3, #4

0800029c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800029c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800029e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002a0:	d3f9      	bcc.n	8000296 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002a2:	4a0a      	ldr	r2, [pc, #40]	; (80002cc <LoopForever+0x12>)
  ldr r4, =_ebss
 80002a4:	4c0a      	ldr	r4, [pc, #40]	; (80002d0 <LoopForever+0x16>)
  movs r3, #0
 80002a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002a8:	e001      	b.n	80002ae <LoopFillZerobss>

080002aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002ac:	3204      	adds	r2, #4

080002ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002b0:	d3fb      	bcc.n	80002aa <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002b2:	f000 f811 	bl	80002d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002b6:	f7ff ff5b 	bl	8000170 <main>

080002ba <LoopForever>:

LoopForever:
  b LoopForever
 80002ba:	e7fe      	b.n	80002ba <LoopForever>
  ldr   r0, =_estack
 80002bc:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80002c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002c4:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80002c8:	08000340 	.word	0x08000340
  ldr r2, =_sbss
 80002cc:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80002d0:	2000001c 	.word	0x2000001c

080002d4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002d4:	e7fe      	b.n	80002d4 <ADC1_2_IRQHandler>
	...

080002d8 <__libc_init_array>:
 80002d8:	b570      	push	{r4, r5, r6, lr}
 80002da:	2600      	movs	r6, #0
 80002dc:	4d0c      	ldr	r5, [pc, #48]	; (8000310 <__libc_init_array+0x38>)
 80002de:	4c0d      	ldr	r4, [pc, #52]	; (8000314 <__libc_init_array+0x3c>)
 80002e0:	1b64      	subs	r4, r4, r5
 80002e2:	10a4      	asrs	r4, r4, #2
 80002e4:	42a6      	cmp	r6, r4
 80002e6:	d109      	bne.n	80002fc <__libc_init_array+0x24>
 80002e8:	f000 f81a 	bl	8000320 <_init>
 80002ec:	2600      	movs	r6, #0
 80002ee:	4d0a      	ldr	r5, [pc, #40]	; (8000318 <__libc_init_array+0x40>)
 80002f0:	4c0a      	ldr	r4, [pc, #40]	; (800031c <__libc_init_array+0x44>)
 80002f2:	1b64      	subs	r4, r4, r5
 80002f4:	10a4      	asrs	r4, r4, #2
 80002f6:	42a6      	cmp	r6, r4
 80002f8:	d105      	bne.n	8000306 <__libc_init_array+0x2e>
 80002fa:	bd70      	pop	{r4, r5, r6, pc}
 80002fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8000300:	4798      	blx	r3
 8000302:	3601      	adds	r6, #1
 8000304:	e7ee      	b.n	80002e4 <__libc_init_array+0xc>
 8000306:	f855 3b04 	ldr.w	r3, [r5], #4
 800030a:	4798      	blx	r3
 800030c:	3601      	adds	r6, #1
 800030e:	e7f2      	b.n	80002f6 <__libc_init_array+0x1e>
 8000310:	08000338 	.word	0x08000338
 8000314:	08000338 	.word	0x08000338
 8000318:	08000338 	.word	0x08000338
 800031c:	0800033c 	.word	0x0800033c

08000320 <_init>:
 8000320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000322:	bf00      	nop
 8000324:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000326:	bc08      	pop	{r3}
 8000328:	469e      	mov	lr, r3
 800032a:	4770      	bx	lr

0800032c <_fini>:
 800032c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800032e:	bf00      	nop
 8000330:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000332:	bc08      	pop	{r3}
 8000334:	469e      	mov	lr, r3
 8000336:	4770      	bx	lr
