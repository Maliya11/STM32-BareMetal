
19_timers_interrupt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000012a4  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  080013d4  080013d4  000113d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800141c  0800141c  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  0800141c  0800141c  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800141c  0800141c  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800141c  0800141c  0001141c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001420  08001420  00011420  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08001424  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000016c  2000005c  08001480  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c8  08001480  000201c8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020085  2**0
                  CONTENTS, READONLY
 13 .debug_info   000013ed  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000065b  00000000  00000000  000214b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000001a0  00000000  00000000  00021b10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000011c  00000000  00000000  00021cb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000200a  00000000  00000000  00021dcc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000219b  00000000  00000000  00023dd6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0005a11e  00000000  00000000  00025f71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000cb4  00000000  00000000  00080090  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  00080d44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	2000005c 	.word	0x2000005c
 800014c:	00000000 	.word	0x00000000
 8000150:	080013bc 	.word	0x080013bc

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000060 	.word	0x20000060
 800016c:	080013bc 	.word	0x080013bc

08000170 <main>:
#define LED_PIN             PIN13

static void tim2_callback(void);

int main(void)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	af00      	add	r7, sp, #0
	RCC -> APB2ENR |= GPIOC_EN;
 8000174:	4b10      	ldr	r3, [pc, #64]	; (80001b8 <main+0x48>)
 8000176:	699b      	ldr	r3, [r3, #24]
 8000178:	4a0f      	ldr	r2, [pc, #60]	; (80001b8 <main+0x48>)
 800017a:	f043 0310 	orr.w	r3, r3, #16
 800017e:	6193      	str	r3, [r2, #24]

	GPIOC->CRH |= (1U << 20);
 8000180:	4b0e      	ldr	r3, [pc, #56]	; (80001bc <main+0x4c>)
 8000182:	685b      	ldr	r3, [r3, #4]
 8000184:	4a0d      	ldr	r2, [pc, #52]	; (80001bc <main+0x4c>)
 8000186:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800018a:	6053      	str	r3, [r2, #4]
	GPIOC->CRH |= (1U << 21);
 800018c:	4b0b      	ldr	r3, [pc, #44]	; (80001bc <main+0x4c>)
 800018e:	685b      	ldr	r3, [r3, #4]
 8000190:	4a0a      	ldr	r2, [pc, #40]	; (80001bc <main+0x4c>)
 8000192:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000196:	6053      	str	r3, [r2, #4]
	GPIOC->CRH &= ~(1U << 22);
 8000198:	4b08      	ldr	r3, [pc, #32]	; (80001bc <main+0x4c>)
 800019a:	685b      	ldr	r3, [r3, #4]
 800019c:	4a07      	ldr	r2, [pc, #28]	; (80001bc <main+0x4c>)
 800019e:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80001a2:	6053      	str	r3, [r2, #4]
	GPIOC->CRH &= ~(0U << 23);
 80001a4:	4b05      	ldr	r3, [pc, #20]	; (80001bc <main+0x4c>)
 80001a6:	4a05      	ldr	r2, [pc, #20]	; (80001bc <main+0x4c>)
 80001a8:	685b      	ldr	r3, [r3, #4]
 80001aa:	6053      	str	r3, [r2, #4]

	uart1_tx_init();
 80001ac:	f000 f91a 	bl	80003e4 <uart1_tx_init>
	tim2_1Hz_interrupt_init();
 80001b0:	f000 f8e2 	bl	8000378 <tim2_1Hz_interrupt_init>

	while(1)
 80001b4:	e7fe      	b.n	80001b4 <main+0x44>
 80001b6:	bf00      	nop
 80001b8:	40021000 	.word	0x40021000
 80001bc:	40011000 	.word	0x40011000

080001c0 <tim2_callback>:

	}
}

static void tim2_callback(void)
{
 80001c0:	b580      	push	{r7, lr}
 80001c2:	af00      	add	r7, sp, #0
	printf("A second passed \n\r");
 80001c4:	4805      	ldr	r0, [pc, #20]	; (80001dc <tim2_callback+0x1c>)
 80001c6:	f000 fa7b 	bl	80006c0 <iprintf>
	GPIOC->ODR ^= LED_PIN;
 80001ca:	4b05      	ldr	r3, [pc, #20]	; (80001e0 <tim2_callback+0x20>)
 80001cc:	68db      	ldr	r3, [r3, #12]
 80001ce:	4a04      	ldr	r2, [pc, #16]	; (80001e0 <tim2_callback+0x20>)
 80001d0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80001d4:	60d3      	str	r3, [r2, #12]
}
 80001d6:	bf00      	nop
 80001d8:	bd80      	pop	{r7, pc}
 80001da:	bf00      	nop
 80001dc:	080013d4 	.word	0x080013d4
 80001e0:	40011000 	.word	0x40011000

080001e4 <TIM2_IRQHandler>:

void TIM2_IRQHandler(void)
{
 80001e4:	b580      	push	{r7, lr}
 80001e6:	af00      	add	r7, sp, #0
	/*Clear update interrupt flag*/
	TIM2->SR &= ~SR_UIF;
 80001e8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80001ec:	691b      	ldr	r3, [r3, #16]
 80001ee:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80001f2:	f023 0301 	bic.w	r3, r3, #1
 80001f6:	6113      	str	r3, [r2, #16]

	//DO something
	tim2_callback();
 80001f8:	f7ff ffe2 	bl	80001c0 <tim2_callback>
}
 80001fc:	bf00      	nop
 80001fe:	bd80      	pop	{r7, pc}

08000200 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000200:	b580      	push	{r7, lr}
 8000202:	b086      	sub	sp, #24
 8000204:	af00      	add	r7, sp, #0
 8000206:	60f8      	str	r0, [r7, #12]
 8000208:	60b9      	str	r1, [r7, #8]
 800020a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800020c:	2300      	movs	r3, #0
 800020e:	617b      	str	r3, [r7, #20]
 8000210:	e00a      	b.n	8000228 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000212:	f3af 8000 	nop.w
 8000216:	4601      	mov	r1, r0
 8000218:	68bb      	ldr	r3, [r7, #8]
 800021a:	1c5a      	adds	r2, r3, #1
 800021c:	60ba      	str	r2, [r7, #8]
 800021e:	b2ca      	uxtb	r2, r1
 8000220:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000222:	697b      	ldr	r3, [r7, #20]
 8000224:	3301      	adds	r3, #1
 8000226:	617b      	str	r3, [r7, #20]
 8000228:	697a      	ldr	r2, [r7, #20]
 800022a:	687b      	ldr	r3, [r7, #4]
 800022c:	429a      	cmp	r2, r3
 800022e:	dbf0      	blt.n	8000212 <_read+0x12>
  }

  return len;
 8000230:	687b      	ldr	r3, [r7, #4]
}
 8000232:	4618      	mov	r0, r3
 8000234:	3718      	adds	r7, #24
 8000236:	46bd      	mov	sp, r7
 8000238:	bd80      	pop	{r7, pc}

0800023a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800023a:	b580      	push	{r7, lr}
 800023c:	b086      	sub	sp, #24
 800023e:	af00      	add	r7, sp, #0
 8000240:	60f8      	str	r0, [r7, #12]
 8000242:	60b9      	str	r1, [r7, #8]
 8000244:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000246:	2300      	movs	r3, #0
 8000248:	617b      	str	r3, [r7, #20]
 800024a:	e009      	b.n	8000260 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800024c:	68bb      	ldr	r3, [r7, #8]
 800024e:	1c5a      	adds	r2, r3, #1
 8000250:	60ba      	str	r2, [r7, #8]
 8000252:	781b      	ldrb	r3, [r3, #0]
 8000254:	4618      	mov	r0, r3
 8000256:	f000 f8b9 	bl	80003cc <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800025a:	697b      	ldr	r3, [r7, #20]
 800025c:	3301      	adds	r3, #1
 800025e:	617b      	str	r3, [r7, #20]
 8000260:	697a      	ldr	r2, [r7, #20]
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	429a      	cmp	r2, r3
 8000266:	dbf1      	blt.n	800024c <_write+0x12>
  }
  return len;
 8000268:	687b      	ldr	r3, [r7, #4]
}
 800026a:	4618      	mov	r0, r3
 800026c:	3718      	adds	r7, #24
 800026e:	46bd      	mov	sp, r7
 8000270:	bd80      	pop	{r7, pc}

08000272 <_close>:

int _close(int file)
{
 8000272:	b480      	push	{r7}
 8000274:	b083      	sub	sp, #12
 8000276:	af00      	add	r7, sp, #0
 8000278:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800027a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800027e:	4618      	mov	r0, r3
 8000280:	370c      	adds	r7, #12
 8000282:	46bd      	mov	sp, r7
 8000284:	bc80      	pop	{r7}
 8000286:	4770      	bx	lr

08000288 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000288:	b480      	push	{r7}
 800028a:	b083      	sub	sp, #12
 800028c:	af00      	add	r7, sp, #0
 800028e:	6078      	str	r0, [r7, #4]
 8000290:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000292:	683b      	ldr	r3, [r7, #0]
 8000294:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000298:	605a      	str	r2, [r3, #4]
  return 0;
 800029a:	2300      	movs	r3, #0
}
 800029c:	4618      	mov	r0, r3
 800029e:	370c      	adds	r7, #12
 80002a0:	46bd      	mov	sp, r7
 80002a2:	bc80      	pop	{r7}
 80002a4:	4770      	bx	lr

080002a6 <_isatty>:

int _isatty(int file)
{
 80002a6:	b480      	push	{r7}
 80002a8:	b083      	sub	sp, #12
 80002aa:	af00      	add	r7, sp, #0
 80002ac:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80002ae:	2301      	movs	r3, #1
}
 80002b0:	4618      	mov	r0, r3
 80002b2:	370c      	adds	r7, #12
 80002b4:	46bd      	mov	sp, r7
 80002b6:	bc80      	pop	{r7}
 80002b8:	4770      	bx	lr

080002ba <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80002ba:	b480      	push	{r7}
 80002bc:	b085      	sub	sp, #20
 80002be:	af00      	add	r7, sp, #0
 80002c0:	60f8      	str	r0, [r7, #12]
 80002c2:	60b9      	str	r1, [r7, #8]
 80002c4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80002c6:	2300      	movs	r3, #0
}
 80002c8:	4618      	mov	r0, r3
 80002ca:	3714      	adds	r7, #20
 80002cc:	46bd      	mov	sp, r7
 80002ce:	bc80      	pop	{r7}
 80002d0:	4770      	bx	lr
	...

080002d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80002d4:	b580      	push	{r7, lr}
 80002d6:	b086      	sub	sp, #24
 80002d8:	af00      	add	r7, sp, #0
 80002da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80002dc:	4a14      	ldr	r2, [pc, #80]	; (8000330 <_sbrk+0x5c>)
 80002de:	4b15      	ldr	r3, [pc, #84]	; (8000334 <_sbrk+0x60>)
 80002e0:	1ad3      	subs	r3, r2, r3
 80002e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80002e4:	697b      	ldr	r3, [r7, #20]
 80002e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80002e8:	4b13      	ldr	r3, [pc, #76]	; (8000338 <_sbrk+0x64>)
 80002ea:	681b      	ldr	r3, [r3, #0]
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d102      	bne.n	80002f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80002f0:	4b11      	ldr	r3, [pc, #68]	; (8000338 <_sbrk+0x64>)
 80002f2:	4a12      	ldr	r2, [pc, #72]	; (800033c <_sbrk+0x68>)
 80002f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80002f6:	4b10      	ldr	r3, [pc, #64]	; (8000338 <_sbrk+0x64>)
 80002f8:	681a      	ldr	r2, [r3, #0]
 80002fa:	687b      	ldr	r3, [r7, #4]
 80002fc:	4413      	add	r3, r2
 80002fe:	693a      	ldr	r2, [r7, #16]
 8000300:	429a      	cmp	r2, r3
 8000302:	d207      	bcs.n	8000314 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000304:	f000 fa80 	bl	8000808 <__errno>
 8000308:	4603      	mov	r3, r0
 800030a:	220c      	movs	r2, #12
 800030c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800030e:	f04f 33ff 	mov.w	r3, #4294967295
 8000312:	e009      	b.n	8000328 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000314:	4b08      	ldr	r3, [pc, #32]	; (8000338 <_sbrk+0x64>)
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800031a:	4b07      	ldr	r3, [pc, #28]	; (8000338 <_sbrk+0x64>)
 800031c:	681a      	ldr	r2, [r3, #0]
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	4413      	add	r3, r2
 8000322:	4a05      	ldr	r2, [pc, #20]	; (8000338 <_sbrk+0x64>)
 8000324:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000326:	68fb      	ldr	r3, [r7, #12]
}
 8000328:	4618      	mov	r0, r3
 800032a:	3718      	adds	r7, #24
 800032c:	46bd      	mov	sp, r7
 800032e:	bd80      	pop	{r7, pc}
 8000330:	20005000 	.word	0x20005000
 8000334:	00000400 	.word	0x00000400
 8000338:	20000078 	.word	0x20000078
 800033c:	200001c8 	.word	0x200001c8

08000340 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000340:	b480      	push	{r7}
 8000342:	b083      	sub	sp, #12
 8000344:	af00      	add	r7, sp, #0
 8000346:	4603      	mov	r3, r0
 8000348:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800034a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800034e:	2b00      	cmp	r3, #0
 8000350:	db0b      	blt.n	800036a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000352:	79fb      	ldrb	r3, [r7, #7]
 8000354:	f003 021f 	and.w	r2, r3, #31
 8000358:	4906      	ldr	r1, [pc, #24]	; (8000374 <__NVIC_EnableIRQ+0x34>)
 800035a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800035e:	095b      	lsrs	r3, r3, #5
 8000360:	2001      	movs	r0, #1
 8000362:	fa00 f202 	lsl.w	r2, r0, r2
 8000366:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800036a:	bf00      	nop
 800036c:	370c      	adds	r7, #12
 800036e:	46bd      	mov	sp, r7
 8000370:	bc80      	pop	{r7}
 8000372:	4770      	bx	lr
 8000374:	e000e100 	.word	0xe000e100

08000378 <tim2_1Hz_interrupt_init>:
	/*Enable timer*/
	TIM2->CR1 = CR1_CEN;
}

void tim2_1Hz_interrupt_init(void)
{
 8000378:	b580      	push	{r7, lr}
 800037a:	af00      	add	r7, sp, #0
	/*Enable clock access to TIM2*/
	RCC->APB1ENR |= TIM2EN;
 800037c:	4b12      	ldr	r3, [pc, #72]	; (80003c8 <tim2_1Hz_interrupt_init+0x50>)
 800037e:	69db      	ldr	r3, [r3, #28]
 8000380:	4a11      	ldr	r2, [pc, #68]	; (80003c8 <tim2_1Hz_interrupt_init+0x50>)
 8000382:	f043 0301 	orr.w	r3, r3, #1
 8000386:	61d3      	str	r3, [r2, #28]

	/*Set pre-scalar value*/
	TIM2->PSC = 1600-1;  /* 16MHz/1600 = 10kHz */
 8000388:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800038c:	f240 623f 	movw	r2, #1599	; 0x63f
 8000390:	629a      	str	r2, [r3, #40]	; 0x28

	/*Set auto reload value*/
	TIM2->ARR = 10000 - 1; /* 10kHz/10000 = 1Hz */
 8000392:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000396:	f242 720f 	movw	r2, #9999	; 0x270f
 800039a:	62da      	str	r2, [r3, #44]	; 0x2c

	/*clean counter*/
	TIM2->CNT = 0;
 800039c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80003a0:	2200      	movs	r2, #0
 80003a2:	625a      	str	r2, [r3, #36]	; 0x24

	/*Enable timer*/
	TIM2->CR1 = CR1_CEN;
 80003a4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80003a8:	2201      	movs	r2, #1
 80003aa:	601a      	str	r2, [r3, #0]

	/*Enable TIM2 interrupt*/
	TIM2->DIER |= DIER_UIE;
 80003ac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80003b0:	68db      	ldr	r3, [r3, #12]
 80003b2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80003b6:	f043 0301 	orr.w	r3, r3, #1
 80003ba:	60d3      	str	r3, [r2, #12]

	/*Enable TIM2 NVIC interrupt*/
	NVIC_EnableIRQ(TIM2_IRQn);
 80003bc:	201c      	movs	r0, #28
 80003be:	f7ff ffbf 	bl	8000340 <__NVIC_EnableIRQ>
}
 80003c2:	bf00      	nop
 80003c4:	bd80      	pop	{r7, pc}
 80003c6:	bf00      	nop
 80003c8:	40021000 	.word	0x40021000

080003cc <__io_putchar>:
static uint16_t compute_uart_bd(uint32_t PeriphClk, uint32_t BaudRate);

void uart1_write(int ch);

int __io_putchar(int ch)
{
 80003cc:	b580      	push	{r7, lr}
 80003ce:	b082      	sub	sp, #8
 80003d0:	af00      	add	r7, sp, #0
 80003d2:	6078      	str	r0, [r7, #4]
	uart1_write(ch);
 80003d4:	6878      	ldr	r0, [r7, #4]
 80003d6:	f000 f84d 	bl	8000474 <uart1_write>
	return ch;
 80003da:	687b      	ldr	r3, [r7, #4]
}
 80003dc:	4618      	mov	r0, r3
 80003de:	3708      	adds	r7, #8
 80003e0:	46bd      	mov	sp, r7
 80003e2:	bd80      	pop	{r7, pc}

080003e4 <uart1_tx_init>:
	/*Enable uart module*/
	USART1->CR1 |= CR1_UE;
}

void uart1_tx_init(void)
{
 80003e4:	b580      	push	{r7, lr}
 80003e6:	af00      	add	r7, sp, #0
	/*******Configure usart gpio pins*********/
	/*Enable clock access to gpioa*/
	RCC->APB2ENR |= GPIOA_EN;
 80003e8:	4b1d      	ldr	r3, [pc, #116]	; (8000460 <uart1_tx_init+0x7c>)
 80003ea:	699b      	ldr	r3, [r3, #24]
 80003ec:	4a1c      	ldr	r2, [pc, #112]	; (8000460 <uart1_tx_init+0x7c>)
 80003ee:	f043 0304 	orr.w	r3, r3, #4
 80003f2:	6193      	str	r3, [r2, #24]

	/*Set PA9 to alternate function mode*/
	GPIOA->CRH |= (1U<<4);
 80003f4:	4b1b      	ldr	r3, [pc, #108]	; (8000464 <uart1_tx_init+0x80>)
 80003f6:	685b      	ldr	r3, [r3, #4]
 80003f8:	4a1a      	ldr	r2, [pc, #104]	; (8000464 <uart1_tx_init+0x80>)
 80003fa:	f043 0310 	orr.w	r3, r3, #16
 80003fe:	6053      	str	r3, [r2, #4]
	GPIOA->CRH |= (1U<<5);
 8000400:	4b18      	ldr	r3, [pc, #96]	; (8000464 <uart1_tx_init+0x80>)
 8000402:	685b      	ldr	r3, [r3, #4]
 8000404:	4a17      	ldr	r2, [pc, #92]	; (8000464 <uart1_tx_init+0x80>)
 8000406:	f043 0320 	orr.w	r3, r3, #32
 800040a:	6053      	str	r3, [r2, #4]
	GPIOA->CRH &= ~(1U<<6);
 800040c:	4b15      	ldr	r3, [pc, #84]	; (8000464 <uart1_tx_init+0x80>)
 800040e:	685b      	ldr	r3, [r3, #4]
 8000410:	4a14      	ldr	r2, [pc, #80]	; (8000464 <uart1_tx_init+0x80>)
 8000412:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000416:	6053      	str	r3, [r2, #4]
	GPIOA->CRH |= (1U<<7);
 8000418:	4b12      	ldr	r3, [pc, #72]	; (8000464 <uart1_tx_init+0x80>)
 800041a:	685b      	ldr	r3, [r3, #4]
 800041c:	4a11      	ldr	r2, [pc, #68]	; (8000464 <uart1_tx_init+0x80>)
 800041e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000422:	6053      	str	r3, [r2, #4]

	/*Set PA2 type to UART_TX*/
	AFIO->MAPR &= ~(1U<<2);
 8000424:	4b10      	ldr	r3, [pc, #64]	; (8000468 <uart1_tx_init+0x84>)
 8000426:	685b      	ldr	r3, [r3, #4]
 8000428:	4a0f      	ldr	r2, [pc, #60]	; (8000468 <uart1_tx_init+0x84>)
 800042a:	f023 0304 	bic.w	r3, r3, #4
 800042e:	6053      	str	r3, [r2, #4]

	/**********Configure uart module**************/
	/*Enable clock access to uart1*/
	RCC->APB2ENR |= UART1_EN;
 8000430:	4b0b      	ldr	r3, [pc, #44]	; (8000460 <uart1_tx_init+0x7c>)
 8000432:	699b      	ldr	r3, [r3, #24]
 8000434:	4a0a      	ldr	r2, [pc, #40]	; (8000460 <uart1_tx_init+0x7c>)
 8000436:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800043a:	6193      	str	r3, [r2, #24]

	/*configure baudrate*/
	uart_set_baudrate(USART1,APB2_CLK,UART_BAUDRATE);
 800043c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000440:	490a      	ldr	r1, [pc, #40]	; (800046c <uart1_tx_init+0x88>)
 8000442:	480b      	ldr	r0, [pc, #44]	; (8000470 <uart1_tx_init+0x8c>)
 8000444:	f000 f82c 	bl	80004a0 <uart_set_baudrate>

	/*Configure transfer direction*/
	USART1->CR1 = CR1_TE;  //SETTING THE VALUE
 8000448:	4b09      	ldr	r3, [pc, #36]	; (8000470 <uart1_tx_init+0x8c>)
 800044a:	2208      	movs	r2, #8
 800044c:	60da      	str	r2, [r3, #12]
	//TO ERASE THE UART REGISTER

	/*Enable uart module*/
	USART1->CR1 |= CR1_UE;
 800044e:	4b08      	ldr	r3, [pc, #32]	; (8000470 <uart1_tx_init+0x8c>)
 8000450:	68db      	ldr	r3, [r3, #12]
 8000452:	4a07      	ldr	r2, [pc, #28]	; (8000470 <uart1_tx_init+0x8c>)
 8000454:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000458:	60d3      	str	r3, [r2, #12]
}
 800045a:	bf00      	nop
 800045c:	bd80      	pop	{r7, pc}
 800045e:	bf00      	nop
 8000460:	40021000 	.word	0x40021000
 8000464:	40010800 	.word	0x40010800
 8000468:	40010000 	.word	0x40010000
 800046c:	00f42400 	.word	0x00f42400
 8000470:	40013800 	.word	0x40013800

08000474 <uart1_write>:
	/*Read data*/
	return USART1->DR;
}

void uart1_write(int ch)
{
 8000474:	b480      	push	{r7}
 8000476:	b083      	sub	sp, #12
 8000478:	af00      	add	r7, sp, #0
 800047a:	6078      	str	r0, [r7, #4]
	/*Make sure transmit data register is empty*/
	while(!(USART1->SR & SR_TXE)){}
 800047c:	bf00      	nop
 800047e:	4b07      	ldr	r3, [pc, #28]	; (800049c <uart1_write+0x28>)
 8000480:	681b      	ldr	r3, [r3, #0]
 8000482:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000486:	2b00      	cmp	r3, #0
 8000488:	d0f9      	beq.n	800047e <uart1_write+0xa>

	/*Write to transmit data register*/
	USART1->DR = (ch & 0xFF); //to transmit 8 bit
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	4a03      	ldr	r2, [pc, #12]	; (800049c <uart1_write+0x28>)
 800048e:	b2db      	uxtb	r3, r3
 8000490:	6053      	str	r3, [r2, #4]

}
 8000492:	bf00      	nop
 8000494:	370c      	adds	r7, #12
 8000496:	46bd      	mov	sp, r7
 8000498:	bc80      	pop	{r7}
 800049a:	4770      	bx	lr
 800049c:	40013800 	.word	0x40013800

080004a0 <uart_set_baudrate>:

static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t BaudRate)
{
 80004a0:	b580      	push	{r7, lr}
 80004a2:	b084      	sub	sp, #16
 80004a4:	af00      	add	r7, sp, #0
 80004a6:	60f8      	str	r0, [r7, #12]
 80004a8:	60b9      	str	r1, [r7, #8]
 80004aa:	607a      	str	r2, [r7, #4]
	USARTx->BRR = compute_uart_bd(PeriphClk, BaudRate);
 80004ac:	6879      	ldr	r1, [r7, #4]
 80004ae:	68b8      	ldr	r0, [r7, #8]
 80004b0:	f000 f808 	bl	80004c4 <compute_uart_bd>
 80004b4:	4603      	mov	r3, r0
 80004b6:	461a      	mov	r2, r3
 80004b8:	68fb      	ldr	r3, [r7, #12]
 80004ba:	609a      	str	r2, [r3, #8]
}
 80004bc:	bf00      	nop
 80004be:	3710      	adds	r7, #16
 80004c0:	46bd      	mov	sp, r7
 80004c2:	bd80      	pop	{r7, pc}

080004c4 <compute_uart_bd>:

static uint16_t compute_uart_bd(uint32_t PeriphClk, uint32_t BaudRate)
{
 80004c4:	b480      	push	{r7}
 80004c6:	b083      	sub	sp, #12
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	6078      	str	r0, [r7, #4]
 80004cc:	6039      	str	r1, [r7, #0]
	return ((PeriphClk + (BaudRate/2U))/BaudRate);
 80004ce:	683b      	ldr	r3, [r7, #0]
 80004d0:	085a      	lsrs	r2, r3, #1
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	441a      	add	r2, r3
 80004d6:	683b      	ldr	r3, [r7, #0]
 80004d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80004dc:	b29b      	uxth	r3, r3
}
 80004de:	4618      	mov	r0, r3
 80004e0:	370c      	adds	r7, #12
 80004e2:	46bd      	mov	sp, r7
 80004e4:	bc80      	pop	{r7}
 80004e6:	4770      	bx	lr

080004e8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80004e8:	480d      	ldr	r0, [pc, #52]	; (8000520 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80004ea:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80004ec:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80004f0:	480c      	ldr	r0, [pc, #48]	; (8000524 <LoopForever+0x6>)
  ldr r1, =_edata
 80004f2:	490d      	ldr	r1, [pc, #52]	; (8000528 <LoopForever+0xa>)
  ldr r2, =_sidata
 80004f4:	4a0d      	ldr	r2, [pc, #52]	; (800052c <LoopForever+0xe>)
  movs r3, #0
 80004f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004f8:	e002      	b.n	8000500 <LoopCopyDataInit>

080004fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004fe:	3304      	adds	r3, #4

08000500 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000500:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000502:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000504:	d3f9      	bcc.n	80004fa <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000506:	4a0a      	ldr	r2, [pc, #40]	; (8000530 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000508:	4c0a      	ldr	r4, [pc, #40]	; (8000534 <LoopForever+0x16>)
  movs r3, #0
 800050a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800050c:	e001      	b.n	8000512 <LoopFillZerobss>

0800050e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800050e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000510:	3204      	adds	r2, #4

08000512 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000512:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000514:	d3fb      	bcc.n	800050e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000516:	f000 f97d 	bl	8000814 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800051a:	f7ff fe29 	bl	8000170 <main>

0800051e <LoopForever>:

LoopForever:
  b LoopForever
 800051e:	e7fe      	b.n	800051e <LoopForever>
  ldr   r0, =_estack
 8000520:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000524:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000528:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 800052c:	08001424 	.word	0x08001424
  ldr r2, =_sbss
 8000530:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000534:	200001c8 	.word	0x200001c8

08000538 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000538:	e7fe      	b.n	8000538 <ADC1_2_IRQHandler>
	...

0800053c <std>:
 800053c:	2300      	movs	r3, #0
 800053e:	b510      	push	{r4, lr}
 8000540:	4604      	mov	r4, r0
 8000542:	e9c0 3300 	strd	r3, r3, [r0]
 8000546:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800054a:	6083      	str	r3, [r0, #8]
 800054c:	8181      	strh	r1, [r0, #12]
 800054e:	6643      	str	r3, [r0, #100]	; 0x64
 8000550:	81c2      	strh	r2, [r0, #14]
 8000552:	6183      	str	r3, [r0, #24]
 8000554:	4619      	mov	r1, r3
 8000556:	2208      	movs	r2, #8
 8000558:	305c      	adds	r0, #92	; 0x5c
 800055a:	f000 f906 	bl	800076a <memset>
 800055e:	4b0d      	ldr	r3, [pc, #52]	; (8000594 <std+0x58>)
 8000560:	6224      	str	r4, [r4, #32]
 8000562:	6263      	str	r3, [r4, #36]	; 0x24
 8000564:	4b0c      	ldr	r3, [pc, #48]	; (8000598 <std+0x5c>)
 8000566:	62a3      	str	r3, [r4, #40]	; 0x28
 8000568:	4b0c      	ldr	r3, [pc, #48]	; (800059c <std+0x60>)
 800056a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800056c:	4b0c      	ldr	r3, [pc, #48]	; (80005a0 <std+0x64>)
 800056e:	6323      	str	r3, [r4, #48]	; 0x30
 8000570:	4b0c      	ldr	r3, [pc, #48]	; (80005a4 <std+0x68>)
 8000572:	429c      	cmp	r4, r3
 8000574:	d006      	beq.n	8000584 <std+0x48>
 8000576:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800057a:	4294      	cmp	r4, r2
 800057c:	d002      	beq.n	8000584 <std+0x48>
 800057e:	33d0      	adds	r3, #208	; 0xd0
 8000580:	429c      	cmp	r4, r3
 8000582:	d105      	bne.n	8000590 <std+0x54>
 8000584:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8000588:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800058c:	f000 b966 	b.w	800085c <__retarget_lock_init_recursive>
 8000590:	bd10      	pop	{r4, pc}
 8000592:	bf00      	nop
 8000594:	080006e5 	.word	0x080006e5
 8000598:	08000707 	.word	0x08000707
 800059c:	0800073f 	.word	0x0800073f
 80005a0:	08000763 	.word	0x08000763
 80005a4:	2000007c 	.word	0x2000007c

080005a8 <stdio_exit_handler>:
 80005a8:	4a02      	ldr	r2, [pc, #8]	; (80005b4 <stdio_exit_handler+0xc>)
 80005aa:	4903      	ldr	r1, [pc, #12]	; (80005b8 <stdio_exit_handler+0x10>)
 80005ac:	4803      	ldr	r0, [pc, #12]	; (80005bc <stdio_exit_handler+0x14>)
 80005ae:	f000 b869 	b.w	8000684 <_fwalk_sglue>
 80005b2:	bf00      	nop
 80005b4:	20000000 	.word	0x20000000
 80005b8:	080010fd 	.word	0x080010fd
 80005bc:	2000000c 	.word	0x2000000c

080005c0 <cleanup_stdio>:
 80005c0:	6841      	ldr	r1, [r0, #4]
 80005c2:	4b0c      	ldr	r3, [pc, #48]	; (80005f4 <cleanup_stdio+0x34>)
 80005c4:	b510      	push	{r4, lr}
 80005c6:	4299      	cmp	r1, r3
 80005c8:	4604      	mov	r4, r0
 80005ca:	d001      	beq.n	80005d0 <cleanup_stdio+0x10>
 80005cc:	f000 fd96 	bl	80010fc <_fflush_r>
 80005d0:	68a1      	ldr	r1, [r4, #8]
 80005d2:	4b09      	ldr	r3, [pc, #36]	; (80005f8 <cleanup_stdio+0x38>)
 80005d4:	4299      	cmp	r1, r3
 80005d6:	d002      	beq.n	80005de <cleanup_stdio+0x1e>
 80005d8:	4620      	mov	r0, r4
 80005da:	f000 fd8f 	bl	80010fc <_fflush_r>
 80005de:	68e1      	ldr	r1, [r4, #12]
 80005e0:	4b06      	ldr	r3, [pc, #24]	; (80005fc <cleanup_stdio+0x3c>)
 80005e2:	4299      	cmp	r1, r3
 80005e4:	d004      	beq.n	80005f0 <cleanup_stdio+0x30>
 80005e6:	4620      	mov	r0, r4
 80005e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80005ec:	f000 bd86 	b.w	80010fc <_fflush_r>
 80005f0:	bd10      	pop	{r4, pc}
 80005f2:	bf00      	nop
 80005f4:	2000007c 	.word	0x2000007c
 80005f8:	200000e4 	.word	0x200000e4
 80005fc:	2000014c 	.word	0x2000014c

08000600 <global_stdio_init.part.0>:
 8000600:	b510      	push	{r4, lr}
 8000602:	4b0b      	ldr	r3, [pc, #44]	; (8000630 <global_stdio_init.part.0+0x30>)
 8000604:	4c0b      	ldr	r4, [pc, #44]	; (8000634 <global_stdio_init.part.0+0x34>)
 8000606:	4a0c      	ldr	r2, [pc, #48]	; (8000638 <global_stdio_init.part.0+0x38>)
 8000608:	4620      	mov	r0, r4
 800060a:	601a      	str	r2, [r3, #0]
 800060c:	2104      	movs	r1, #4
 800060e:	2200      	movs	r2, #0
 8000610:	f7ff ff94 	bl	800053c <std>
 8000614:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8000618:	2201      	movs	r2, #1
 800061a:	2109      	movs	r1, #9
 800061c:	f7ff ff8e 	bl	800053c <std>
 8000620:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8000624:	2202      	movs	r2, #2
 8000626:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800062a:	2112      	movs	r1, #18
 800062c:	f7ff bf86 	b.w	800053c <std>
 8000630:	200001b4 	.word	0x200001b4
 8000634:	2000007c 	.word	0x2000007c
 8000638:	080005a9 	.word	0x080005a9

0800063c <__sfp_lock_acquire>:
 800063c:	4801      	ldr	r0, [pc, #4]	; (8000644 <__sfp_lock_acquire+0x8>)
 800063e:	f000 b90e 	b.w	800085e <__retarget_lock_acquire_recursive>
 8000642:	bf00      	nop
 8000644:	200001bd 	.word	0x200001bd

08000648 <__sfp_lock_release>:
 8000648:	4801      	ldr	r0, [pc, #4]	; (8000650 <__sfp_lock_release+0x8>)
 800064a:	f000 b909 	b.w	8000860 <__retarget_lock_release_recursive>
 800064e:	bf00      	nop
 8000650:	200001bd 	.word	0x200001bd

08000654 <__sinit>:
 8000654:	b510      	push	{r4, lr}
 8000656:	4604      	mov	r4, r0
 8000658:	f7ff fff0 	bl	800063c <__sfp_lock_acquire>
 800065c:	6a23      	ldr	r3, [r4, #32]
 800065e:	b11b      	cbz	r3, 8000668 <__sinit+0x14>
 8000660:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000664:	f7ff bff0 	b.w	8000648 <__sfp_lock_release>
 8000668:	4b04      	ldr	r3, [pc, #16]	; (800067c <__sinit+0x28>)
 800066a:	6223      	str	r3, [r4, #32]
 800066c:	4b04      	ldr	r3, [pc, #16]	; (8000680 <__sinit+0x2c>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	2b00      	cmp	r3, #0
 8000672:	d1f5      	bne.n	8000660 <__sinit+0xc>
 8000674:	f7ff ffc4 	bl	8000600 <global_stdio_init.part.0>
 8000678:	e7f2      	b.n	8000660 <__sinit+0xc>
 800067a:	bf00      	nop
 800067c:	080005c1 	.word	0x080005c1
 8000680:	200001b4 	.word	0x200001b4

08000684 <_fwalk_sglue>:
 8000684:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000688:	4607      	mov	r7, r0
 800068a:	4688      	mov	r8, r1
 800068c:	4614      	mov	r4, r2
 800068e:	2600      	movs	r6, #0
 8000690:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000694:	f1b9 0901 	subs.w	r9, r9, #1
 8000698:	d505      	bpl.n	80006a6 <_fwalk_sglue+0x22>
 800069a:	6824      	ldr	r4, [r4, #0]
 800069c:	2c00      	cmp	r4, #0
 800069e:	d1f7      	bne.n	8000690 <_fwalk_sglue+0xc>
 80006a0:	4630      	mov	r0, r6
 80006a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80006a6:	89ab      	ldrh	r3, [r5, #12]
 80006a8:	2b01      	cmp	r3, #1
 80006aa:	d907      	bls.n	80006bc <_fwalk_sglue+0x38>
 80006ac:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80006b0:	3301      	adds	r3, #1
 80006b2:	d003      	beq.n	80006bc <_fwalk_sglue+0x38>
 80006b4:	4629      	mov	r1, r5
 80006b6:	4638      	mov	r0, r7
 80006b8:	47c0      	blx	r8
 80006ba:	4306      	orrs	r6, r0
 80006bc:	3568      	adds	r5, #104	; 0x68
 80006be:	e7e9      	b.n	8000694 <_fwalk_sglue+0x10>

080006c0 <iprintf>:
 80006c0:	b40f      	push	{r0, r1, r2, r3}
 80006c2:	b507      	push	{r0, r1, r2, lr}
 80006c4:	4906      	ldr	r1, [pc, #24]	; (80006e0 <iprintf+0x20>)
 80006c6:	ab04      	add	r3, sp, #16
 80006c8:	6808      	ldr	r0, [r1, #0]
 80006ca:	f853 2b04 	ldr.w	r2, [r3], #4
 80006ce:	6881      	ldr	r1, [r0, #8]
 80006d0:	9301      	str	r3, [sp, #4]
 80006d2:	f000 f9e3 	bl	8000a9c <_vfiprintf_r>
 80006d6:	b003      	add	sp, #12
 80006d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80006dc:	b004      	add	sp, #16
 80006de:	4770      	bx	lr
 80006e0:	20000058 	.word	0x20000058

080006e4 <__sread>:
 80006e4:	b510      	push	{r4, lr}
 80006e6:	460c      	mov	r4, r1
 80006e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80006ec:	f000 f868 	bl	80007c0 <_read_r>
 80006f0:	2800      	cmp	r0, #0
 80006f2:	bfab      	itete	ge
 80006f4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80006f6:	89a3      	ldrhlt	r3, [r4, #12]
 80006f8:	181b      	addge	r3, r3, r0
 80006fa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80006fe:	bfac      	ite	ge
 8000700:	6563      	strge	r3, [r4, #84]	; 0x54
 8000702:	81a3      	strhlt	r3, [r4, #12]
 8000704:	bd10      	pop	{r4, pc}

08000706 <__swrite>:
 8000706:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800070a:	461f      	mov	r7, r3
 800070c:	898b      	ldrh	r3, [r1, #12]
 800070e:	4605      	mov	r5, r0
 8000710:	05db      	lsls	r3, r3, #23
 8000712:	460c      	mov	r4, r1
 8000714:	4616      	mov	r6, r2
 8000716:	d505      	bpl.n	8000724 <__swrite+0x1e>
 8000718:	2302      	movs	r3, #2
 800071a:	2200      	movs	r2, #0
 800071c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000720:	f000 f83c 	bl	800079c <_lseek_r>
 8000724:	89a3      	ldrh	r3, [r4, #12]
 8000726:	4632      	mov	r2, r6
 8000728:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800072c:	81a3      	strh	r3, [r4, #12]
 800072e:	4628      	mov	r0, r5
 8000730:	463b      	mov	r3, r7
 8000732:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000736:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800073a:	f000 b853 	b.w	80007e4 <_write_r>

0800073e <__sseek>:
 800073e:	b510      	push	{r4, lr}
 8000740:	460c      	mov	r4, r1
 8000742:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000746:	f000 f829 	bl	800079c <_lseek_r>
 800074a:	1c43      	adds	r3, r0, #1
 800074c:	89a3      	ldrh	r3, [r4, #12]
 800074e:	bf15      	itete	ne
 8000750:	6560      	strne	r0, [r4, #84]	; 0x54
 8000752:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8000756:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800075a:	81a3      	strheq	r3, [r4, #12]
 800075c:	bf18      	it	ne
 800075e:	81a3      	strhne	r3, [r4, #12]
 8000760:	bd10      	pop	{r4, pc}

08000762 <__sclose>:
 8000762:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000766:	f000 b809 	b.w	800077c <_close_r>

0800076a <memset>:
 800076a:	4603      	mov	r3, r0
 800076c:	4402      	add	r2, r0
 800076e:	4293      	cmp	r3, r2
 8000770:	d100      	bne.n	8000774 <memset+0xa>
 8000772:	4770      	bx	lr
 8000774:	f803 1b01 	strb.w	r1, [r3], #1
 8000778:	e7f9      	b.n	800076e <memset+0x4>
	...

0800077c <_close_r>:
 800077c:	b538      	push	{r3, r4, r5, lr}
 800077e:	2300      	movs	r3, #0
 8000780:	4d05      	ldr	r5, [pc, #20]	; (8000798 <_close_r+0x1c>)
 8000782:	4604      	mov	r4, r0
 8000784:	4608      	mov	r0, r1
 8000786:	602b      	str	r3, [r5, #0]
 8000788:	f7ff fd73 	bl	8000272 <_close>
 800078c:	1c43      	adds	r3, r0, #1
 800078e:	d102      	bne.n	8000796 <_close_r+0x1a>
 8000790:	682b      	ldr	r3, [r5, #0]
 8000792:	b103      	cbz	r3, 8000796 <_close_r+0x1a>
 8000794:	6023      	str	r3, [r4, #0]
 8000796:	bd38      	pop	{r3, r4, r5, pc}
 8000798:	200001b8 	.word	0x200001b8

0800079c <_lseek_r>:
 800079c:	b538      	push	{r3, r4, r5, lr}
 800079e:	4604      	mov	r4, r0
 80007a0:	4608      	mov	r0, r1
 80007a2:	4611      	mov	r1, r2
 80007a4:	2200      	movs	r2, #0
 80007a6:	4d05      	ldr	r5, [pc, #20]	; (80007bc <_lseek_r+0x20>)
 80007a8:	602a      	str	r2, [r5, #0]
 80007aa:	461a      	mov	r2, r3
 80007ac:	f7ff fd85 	bl	80002ba <_lseek>
 80007b0:	1c43      	adds	r3, r0, #1
 80007b2:	d102      	bne.n	80007ba <_lseek_r+0x1e>
 80007b4:	682b      	ldr	r3, [r5, #0]
 80007b6:	b103      	cbz	r3, 80007ba <_lseek_r+0x1e>
 80007b8:	6023      	str	r3, [r4, #0]
 80007ba:	bd38      	pop	{r3, r4, r5, pc}
 80007bc:	200001b8 	.word	0x200001b8

080007c0 <_read_r>:
 80007c0:	b538      	push	{r3, r4, r5, lr}
 80007c2:	4604      	mov	r4, r0
 80007c4:	4608      	mov	r0, r1
 80007c6:	4611      	mov	r1, r2
 80007c8:	2200      	movs	r2, #0
 80007ca:	4d05      	ldr	r5, [pc, #20]	; (80007e0 <_read_r+0x20>)
 80007cc:	602a      	str	r2, [r5, #0]
 80007ce:	461a      	mov	r2, r3
 80007d0:	f7ff fd16 	bl	8000200 <_read>
 80007d4:	1c43      	adds	r3, r0, #1
 80007d6:	d102      	bne.n	80007de <_read_r+0x1e>
 80007d8:	682b      	ldr	r3, [r5, #0]
 80007da:	b103      	cbz	r3, 80007de <_read_r+0x1e>
 80007dc:	6023      	str	r3, [r4, #0]
 80007de:	bd38      	pop	{r3, r4, r5, pc}
 80007e0:	200001b8 	.word	0x200001b8

080007e4 <_write_r>:
 80007e4:	b538      	push	{r3, r4, r5, lr}
 80007e6:	4604      	mov	r4, r0
 80007e8:	4608      	mov	r0, r1
 80007ea:	4611      	mov	r1, r2
 80007ec:	2200      	movs	r2, #0
 80007ee:	4d05      	ldr	r5, [pc, #20]	; (8000804 <_write_r+0x20>)
 80007f0:	602a      	str	r2, [r5, #0]
 80007f2:	461a      	mov	r2, r3
 80007f4:	f7ff fd21 	bl	800023a <_write>
 80007f8:	1c43      	adds	r3, r0, #1
 80007fa:	d102      	bne.n	8000802 <_write_r+0x1e>
 80007fc:	682b      	ldr	r3, [r5, #0]
 80007fe:	b103      	cbz	r3, 8000802 <_write_r+0x1e>
 8000800:	6023      	str	r3, [r4, #0]
 8000802:	bd38      	pop	{r3, r4, r5, pc}
 8000804:	200001b8 	.word	0x200001b8

08000808 <__errno>:
 8000808:	4b01      	ldr	r3, [pc, #4]	; (8000810 <__errno+0x8>)
 800080a:	6818      	ldr	r0, [r3, #0]
 800080c:	4770      	bx	lr
 800080e:	bf00      	nop
 8000810:	20000058 	.word	0x20000058

08000814 <__libc_init_array>:
 8000814:	b570      	push	{r4, r5, r6, lr}
 8000816:	2600      	movs	r6, #0
 8000818:	4d0c      	ldr	r5, [pc, #48]	; (800084c <__libc_init_array+0x38>)
 800081a:	4c0d      	ldr	r4, [pc, #52]	; (8000850 <__libc_init_array+0x3c>)
 800081c:	1b64      	subs	r4, r4, r5
 800081e:	10a4      	asrs	r4, r4, #2
 8000820:	42a6      	cmp	r6, r4
 8000822:	d109      	bne.n	8000838 <__libc_init_array+0x24>
 8000824:	f000 fdca 	bl	80013bc <_init>
 8000828:	2600      	movs	r6, #0
 800082a:	4d0a      	ldr	r5, [pc, #40]	; (8000854 <__libc_init_array+0x40>)
 800082c:	4c0a      	ldr	r4, [pc, #40]	; (8000858 <__libc_init_array+0x44>)
 800082e:	1b64      	subs	r4, r4, r5
 8000830:	10a4      	asrs	r4, r4, #2
 8000832:	42a6      	cmp	r6, r4
 8000834:	d105      	bne.n	8000842 <__libc_init_array+0x2e>
 8000836:	bd70      	pop	{r4, r5, r6, pc}
 8000838:	f855 3b04 	ldr.w	r3, [r5], #4
 800083c:	4798      	blx	r3
 800083e:	3601      	adds	r6, #1
 8000840:	e7ee      	b.n	8000820 <__libc_init_array+0xc>
 8000842:	f855 3b04 	ldr.w	r3, [r5], #4
 8000846:	4798      	blx	r3
 8000848:	3601      	adds	r6, #1
 800084a:	e7f2      	b.n	8000832 <__libc_init_array+0x1e>
 800084c:	0800141c 	.word	0x0800141c
 8000850:	0800141c 	.word	0x0800141c
 8000854:	0800141c 	.word	0x0800141c
 8000858:	08001420 	.word	0x08001420

0800085c <__retarget_lock_init_recursive>:
 800085c:	4770      	bx	lr

0800085e <__retarget_lock_acquire_recursive>:
 800085e:	4770      	bx	lr

08000860 <__retarget_lock_release_recursive>:
 8000860:	4770      	bx	lr
	...

08000864 <_free_r>:
 8000864:	b538      	push	{r3, r4, r5, lr}
 8000866:	4605      	mov	r5, r0
 8000868:	2900      	cmp	r1, #0
 800086a:	d040      	beq.n	80008ee <_free_r+0x8a>
 800086c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000870:	1f0c      	subs	r4, r1, #4
 8000872:	2b00      	cmp	r3, #0
 8000874:	bfb8      	it	lt
 8000876:	18e4      	addlt	r4, r4, r3
 8000878:	f000 f8dc 	bl	8000a34 <__malloc_lock>
 800087c:	4a1c      	ldr	r2, [pc, #112]	; (80008f0 <_free_r+0x8c>)
 800087e:	6813      	ldr	r3, [r2, #0]
 8000880:	b933      	cbnz	r3, 8000890 <_free_r+0x2c>
 8000882:	6063      	str	r3, [r4, #4]
 8000884:	6014      	str	r4, [r2, #0]
 8000886:	4628      	mov	r0, r5
 8000888:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800088c:	f000 b8d8 	b.w	8000a40 <__malloc_unlock>
 8000890:	42a3      	cmp	r3, r4
 8000892:	d908      	bls.n	80008a6 <_free_r+0x42>
 8000894:	6820      	ldr	r0, [r4, #0]
 8000896:	1821      	adds	r1, r4, r0
 8000898:	428b      	cmp	r3, r1
 800089a:	bf01      	itttt	eq
 800089c:	6819      	ldreq	r1, [r3, #0]
 800089e:	685b      	ldreq	r3, [r3, #4]
 80008a0:	1809      	addeq	r1, r1, r0
 80008a2:	6021      	streq	r1, [r4, #0]
 80008a4:	e7ed      	b.n	8000882 <_free_r+0x1e>
 80008a6:	461a      	mov	r2, r3
 80008a8:	685b      	ldr	r3, [r3, #4]
 80008aa:	b10b      	cbz	r3, 80008b0 <_free_r+0x4c>
 80008ac:	42a3      	cmp	r3, r4
 80008ae:	d9fa      	bls.n	80008a6 <_free_r+0x42>
 80008b0:	6811      	ldr	r1, [r2, #0]
 80008b2:	1850      	adds	r0, r2, r1
 80008b4:	42a0      	cmp	r0, r4
 80008b6:	d10b      	bne.n	80008d0 <_free_r+0x6c>
 80008b8:	6820      	ldr	r0, [r4, #0]
 80008ba:	4401      	add	r1, r0
 80008bc:	1850      	adds	r0, r2, r1
 80008be:	4283      	cmp	r3, r0
 80008c0:	6011      	str	r1, [r2, #0]
 80008c2:	d1e0      	bne.n	8000886 <_free_r+0x22>
 80008c4:	6818      	ldr	r0, [r3, #0]
 80008c6:	685b      	ldr	r3, [r3, #4]
 80008c8:	4408      	add	r0, r1
 80008ca:	6010      	str	r0, [r2, #0]
 80008cc:	6053      	str	r3, [r2, #4]
 80008ce:	e7da      	b.n	8000886 <_free_r+0x22>
 80008d0:	d902      	bls.n	80008d8 <_free_r+0x74>
 80008d2:	230c      	movs	r3, #12
 80008d4:	602b      	str	r3, [r5, #0]
 80008d6:	e7d6      	b.n	8000886 <_free_r+0x22>
 80008d8:	6820      	ldr	r0, [r4, #0]
 80008da:	1821      	adds	r1, r4, r0
 80008dc:	428b      	cmp	r3, r1
 80008de:	bf01      	itttt	eq
 80008e0:	6819      	ldreq	r1, [r3, #0]
 80008e2:	685b      	ldreq	r3, [r3, #4]
 80008e4:	1809      	addeq	r1, r1, r0
 80008e6:	6021      	streq	r1, [r4, #0]
 80008e8:	6063      	str	r3, [r4, #4]
 80008ea:	6054      	str	r4, [r2, #4]
 80008ec:	e7cb      	b.n	8000886 <_free_r+0x22>
 80008ee:	bd38      	pop	{r3, r4, r5, pc}
 80008f0:	200001c0 	.word	0x200001c0

080008f4 <sbrk_aligned>:
 80008f4:	b570      	push	{r4, r5, r6, lr}
 80008f6:	4e0e      	ldr	r6, [pc, #56]	; (8000930 <sbrk_aligned+0x3c>)
 80008f8:	460c      	mov	r4, r1
 80008fa:	6831      	ldr	r1, [r6, #0]
 80008fc:	4605      	mov	r5, r0
 80008fe:	b911      	cbnz	r1, 8000906 <sbrk_aligned+0x12>
 8000900:	f000 fcba 	bl	8001278 <_sbrk_r>
 8000904:	6030      	str	r0, [r6, #0]
 8000906:	4621      	mov	r1, r4
 8000908:	4628      	mov	r0, r5
 800090a:	f000 fcb5 	bl	8001278 <_sbrk_r>
 800090e:	1c43      	adds	r3, r0, #1
 8000910:	d00a      	beq.n	8000928 <sbrk_aligned+0x34>
 8000912:	1cc4      	adds	r4, r0, #3
 8000914:	f024 0403 	bic.w	r4, r4, #3
 8000918:	42a0      	cmp	r0, r4
 800091a:	d007      	beq.n	800092c <sbrk_aligned+0x38>
 800091c:	1a21      	subs	r1, r4, r0
 800091e:	4628      	mov	r0, r5
 8000920:	f000 fcaa 	bl	8001278 <_sbrk_r>
 8000924:	3001      	adds	r0, #1
 8000926:	d101      	bne.n	800092c <sbrk_aligned+0x38>
 8000928:	f04f 34ff 	mov.w	r4, #4294967295
 800092c:	4620      	mov	r0, r4
 800092e:	bd70      	pop	{r4, r5, r6, pc}
 8000930:	200001c4 	.word	0x200001c4

08000934 <_malloc_r>:
 8000934:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000938:	1ccd      	adds	r5, r1, #3
 800093a:	f025 0503 	bic.w	r5, r5, #3
 800093e:	3508      	adds	r5, #8
 8000940:	2d0c      	cmp	r5, #12
 8000942:	bf38      	it	cc
 8000944:	250c      	movcc	r5, #12
 8000946:	2d00      	cmp	r5, #0
 8000948:	4607      	mov	r7, r0
 800094a:	db01      	blt.n	8000950 <_malloc_r+0x1c>
 800094c:	42a9      	cmp	r1, r5
 800094e:	d905      	bls.n	800095c <_malloc_r+0x28>
 8000950:	230c      	movs	r3, #12
 8000952:	2600      	movs	r6, #0
 8000954:	603b      	str	r3, [r7, #0]
 8000956:	4630      	mov	r0, r6
 8000958:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800095c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8000a30 <_malloc_r+0xfc>
 8000960:	f000 f868 	bl	8000a34 <__malloc_lock>
 8000964:	f8d8 3000 	ldr.w	r3, [r8]
 8000968:	461c      	mov	r4, r3
 800096a:	bb5c      	cbnz	r4, 80009c4 <_malloc_r+0x90>
 800096c:	4629      	mov	r1, r5
 800096e:	4638      	mov	r0, r7
 8000970:	f7ff ffc0 	bl	80008f4 <sbrk_aligned>
 8000974:	1c43      	adds	r3, r0, #1
 8000976:	4604      	mov	r4, r0
 8000978:	d155      	bne.n	8000a26 <_malloc_r+0xf2>
 800097a:	f8d8 4000 	ldr.w	r4, [r8]
 800097e:	4626      	mov	r6, r4
 8000980:	2e00      	cmp	r6, #0
 8000982:	d145      	bne.n	8000a10 <_malloc_r+0xdc>
 8000984:	2c00      	cmp	r4, #0
 8000986:	d048      	beq.n	8000a1a <_malloc_r+0xe6>
 8000988:	6823      	ldr	r3, [r4, #0]
 800098a:	4631      	mov	r1, r6
 800098c:	4638      	mov	r0, r7
 800098e:	eb04 0903 	add.w	r9, r4, r3
 8000992:	f000 fc71 	bl	8001278 <_sbrk_r>
 8000996:	4581      	cmp	r9, r0
 8000998:	d13f      	bne.n	8000a1a <_malloc_r+0xe6>
 800099a:	6821      	ldr	r1, [r4, #0]
 800099c:	4638      	mov	r0, r7
 800099e:	1a6d      	subs	r5, r5, r1
 80009a0:	4629      	mov	r1, r5
 80009a2:	f7ff ffa7 	bl	80008f4 <sbrk_aligned>
 80009a6:	3001      	adds	r0, #1
 80009a8:	d037      	beq.n	8000a1a <_malloc_r+0xe6>
 80009aa:	6823      	ldr	r3, [r4, #0]
 80009ac:	442b      	add	r3, r5
 80009ae:	6023      	str	r3, [r4, #0]
 80009b0:	f8d8 3000 	ldr.w	r3, [r8]
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d038      	beq.n	8000a2a <_malloc_r+0xf6>
 80009b8:	685a      	ldr	r2, [r3, #4]
 80009ba:	42a2      	cmp	r2, r4
 80009bc:	d12b      	bne.n	8000a16 <_malloc_r+0xe2>
 80009be:	2200      	movs	r2, #0
 80009c0:	605a      	str	r2, [r3, #4]
 80009c2:	e00f      	b.n	80009e4 <_malloc_r+0xb0>
 80009c4:	6822      	ldr	r2, [r4, #0]
 80009c6:	1b52      	subs	r2, r2, r5
 80009c8:	d41f      	bmi.n	8000a0a <_malloc_r+0xd6>
 80009ca:	2a0b      	cmp	r2, #11
 80009cc:	d917      	bls.n	80009fe <_malloc_r+0xca>
 80009ce:	1961      	adds	r1, r4, r5
 80009d0:	42a3      	cmp	r3, r4
 80009d2:	6025      	str	r5, [r4, #0]
 80009d4:	bf18      	it	ne
 80009d6:	6059      	strne	r1, [r3, #4]
 80009d8:	6863      	ldr	r3, [r4, #4]
 80009da:	bf08      	it	eq
 80009dc:	f8c8 1000 	streq.w	r1, [r8]
 80009e0:	5162      	str	r2, [r4, r5]
 80009e2:	604b      	str	r3, [r1, #4]
 80009e4:	4638      	mov	r0, r7
 80009e6:	f104 060b 	add.w	r6, r4, #11
 80009ea:	f000 f829 	bl	8000a40 <__malloc_unlock>
 80009ee:	f026 0607 	bic.w	r6, r6, #7
 80009f2:	1d23      	adds	r3, r4, #4
 80009f4:	1af2      	subs	r2, r6, r3
 80009f6:	d0ae      	beq.n	8000956 <_malloc_r+0x22>
 80009f8:	1b9b      	subs	r3, r3, r6
 80009fa:	50a3      	str	r3, [r4, r2]
 80009fc:	e7ab      	b.n	8000956 <_malloc_r+0x22>
 80009fe:	42a3      	cmp	r3, r4
 8000a00:	6862      	ldr	r2, [r4, #4]
 8000a02:	d1dd      	bne.n	80009c0 <_malloc_r+0x8c>
 8000a04:	f8c8 2000 	str.w	r2, [r8]
 8000a08:	e7ec      	b.n	80009e4 <_malloc_r+0xb0>
 8000a0a:	4623      	mov	r3, r4
 8000a0c:	6864      	ldr	r4, [r4, #4]
 8000a0e:	e7ac      	b.n	800096a <_malloc_r+0x36>
 8000a10:	4634      	mov	r4, r6
 8000a12:	6876      	ldr	r6, [r6, #4]
 8000a14:	e7b4      	b.n	8000980 <_malloc_r+0x4c>
 8000a16:	4613      	mov	r3, r2
 8000a18:	e7cc      	b.n	80009b4 <_malloc_r+0x80>
 8000a1a:	230c      	movs	r3, #12
 8000a1c:	4638      	mov	r0, r7
 8000a1e:	603b      	str	r3, [r7, #0]
 8000a20:	f000 f80e 	bl	8000a40 <__malloc_unlock>
 8000a24:	e797      	b.n	8000956 <_malloc_r+0x22>
 8000a26:	6025      	str	r5, [r4, #0]
 8000a28:	e7dc      	b.n	80009e4 <_malloc_r+0xb0>
 8000a2a:	605b      	str	r3, [r3, #4]
 8000a2c:	deff      	udf	#255	; 0xff
 8000a2e:	bf00      	nop
 8000a30:	200001c0 	.word	0x200001c0

08000a34 <__malloc_lock>:
 8000a34:	4801      	ldr	r0, [pc, #4]	; (8000a3c <__malloc_lock+0x8>)
 8000a36:	f7ff bf12 	b.w	800085e <__retarget_lock_acquire_recursive>
 8000a3a:	bf00      	nop
 8000a3c:	200001bc 	.word	0x200001bc

08000a40 <__malloc_unlock>:
 8000a40:	4801      	ldr	r0, [pc, #4]	; (8000a48 <__malloc_unlock+0x8>)
 8000a42:	f7ff bf0d 	b.w	8000860 <__retarget_lock_release_recursive>
 8000a46:	bf00      	nop
 8000a48:	200001bc 	.word	0x200001bc

08000a4c <__sfputc_r>:
 8000a4c:	6893      	ldr	r3, [r2, #8]
 8000a4e:	b410      	push	{r4}
 8000a50:	3b01      	subs	r3, #1
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	6093      	str	r3, [r2, #8]
 8000a56:	da07      	bge.n	8000a68 <__sfputc_r+0x1c>
 8000a58:	6994      	ldr	r4, [r2, #24]
 8000a5a:	42a3      	cmp	r3, r4
 8000a5c:	db01      	blt.n	8000a62 <__sfputc_r+0x16>
 8000a5e:	290a      	cmp	r1, #10
 8000a60:	d102      	bne.n	8000a68 <__sfputc_r+0x1c>
 8000a62:	bc10      	pop	{r4}
 8000a64:	f000 bb72 	b.w	800114c <__swbuf_r>
 8000a68:	6813      	ldr	r3, [r2, #0]
 8000a6a:	1c58      	adds	r0, r3, #1
 8000a6c:	6010      	str	r0, [r2, #0]
 8000a6e:	7019      	strb	r1, [r3, #0]
 8000a70:	4608      	mov	r0, r1
 8000a72:	bc10      	pop	{r4}
 8000a74:	4770      	bx	lr

08000a76 <__sfputs_r>:
 8000a76:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a78:	4606      	mov	r6, r0
 8000a7a:	460f      	mov	r7, r1
 8000a7c:	4614      	mov	r4, r2
 8000a7e:	18d5      	adds	r5, r2, r3
 8000a80:	42ac      	cmp	r4, r5
 8000a82:	d101      	bne.n	8000a88 <__sfputs_r+0x12>
 8000a84:	2000      	movs	r0, #0
 8000a86:	e007      	b.n	8000a98 <__sfputs_r+0x22>
 8000a88:	463a      	mov	r2, r7
 8000a8a:	4630      	mov	r0, r6
 8000a8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000a90:	f7ff ffdc 	bl	8000a4c <__sfputc_r>
 8000a94:	1c43      	adds	r3, r0, #1
 8000a96:	d1f3      	bne.n	8000a80 <__sfputs_r+0xa>
 8000a98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08000a9c <_vfiprintf_r>:
 8000a9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000aa0:	460d      	mov	r5, r1
 8000aa2:	4614      	mov	r4, r2
 8000aa4:	4698      	mov	r8, r3
 8000aa6:	4606      	mov	r6, r0
 8000aa8:	b09d      	sub	sp, #116	; 0x74
 8000aaa:	b118      	cbz	r0, 8000ab4 <_vfiprintf_r+0x18>
 8000aac:	6a03      	ldr	r3, [r0, #32]
 8000aae:	b90b      	cbnz	r3, 8000ab4 <_vfiprintf_r+0x18>
 8000ab0:	f7ff fdd0 	bl	8000654 <__sinit>
 8000ab4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000ab6:	07d9      	lsls	r1, r3, #31
 8000ab8:	d405      	bmi.n	8000ac6 <_vfiprintf_r+0x2a>
 8000aba:	89ab      	ldrh	r3, [r5, #12]
 8000abc:	059a      	lsls	r2, r3, #22
 8000abe:	d402      	bmi.n	8000ac6 <_vfiprintf_r+0x2a>
 8000ac0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000ac2:	f7ff fecc 	bl	800085e <__retarget_lock_acquire_recursive>
 8000ac6:	89ab      	ldrh	r3, [r5, #12]
 8000ac8:	071b      	lsls	r3, r3, #28
 8000aca:	d501      	bpl.n	8000ad0 <_vfiprintf_r+0x34>
 8000acc:	692b      	ldr	r3, [r5, #16]
 8000ace:	b99b      	cbnz	r3, 8000af8 <_vfiprintf_r+0x5c>
 8000ad0:	4629      	mov	r1, r5
 8000ad2:	4630      	mov	r0, r6
 8000ad4:	f000 fb78 	bl	80011c8 <__swsetup_r>
 8000ad8:	b170      	cbz	r0, 8000af8 <_vfiprintf_r+0x5c>
 8000ada:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000adc:	07dc      	lsls	r4, r3, #31
 8000ade:	d504      	bpl.n	8000aea <_vfiprintf_r+0x4e>
 8000ae0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ae4:	b01d      	add	sp, #116	; 0x74
 8000ae6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000aea:	89ab      	ldrh	r3, [r5, #12]
 8000aec:	0598      	lsls	r0, r3, #22
 8000aee:	d4f7      	bmi.n	8000ae0 <_vfiprintf_r+0x44>
 8000af0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000af2:	f7ff feb5 	bl	8000860 <__retarget_lock_release_recursive>
 8000af6:	e7f3      	b.n	8000ae0 <_vfiprintf_r+0x44>
 8000af8:	2300      	movs	r3, #0
 8000afa:	9309      	str	r3, [sp, #36]	; 0x24
 8000afc:	2320      	movs	r3, #32
 8000afe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8000b02:	2330      	movs	r3, #48	; 0x30
 8000b04:	f04f 0901 	mov.w	r9, #1
 8000b08:	f8cd 800c 	str.w	r8, [sp, #12]
 8000b0c:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8000cbc <_vfiprintf_r+0x220>
 8000b10:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8000b14:	4623      	mov	r3, r4
 8000b16:	469a      	mov	sl, r3
 8000b18:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000b1c:	b10a      	cbz	r2, 8000b22 <_vfiprintf_r+0x86>
 8000b1e:	2a25      	cmp	r2, #37	; 0x25
 8000b20:	d1f9      	bne.n	8000b16 <_vfiprintf_r+0x7a>
 8000b22:	ebba 0b04 	subs.w	fp, sl, r4
 8000b26:	d00b      	beq.n	8000b40 <_vfiprintf_r+0xa4>
 8000b28:	465b      	mov	r3, fp
 8000b2a:	4622      	mov	r2, r4
 8000b2c:	4629      	mov	r1, r5
 8000b2e:	4630      	mov	r0, r6
 8000b30:	f7ff ffa1 	bl	8000a76 <__sfputs_r>
 8000b34:	3001      	adds	r0, #1
 8000b36:	f000 80a9 	beq.w	8000c8c <_vfiprintf_r+0x1f0>
 8000b3a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8000b3c:	445a      	add	r2, fp
 8000b3e:	9209      	str	r2, [sp, #36]	; 0x24
 8000b40:	f89a 3000 	ldrb.w	r3, [sl]
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	f000 80a1 	beq.w	8000c8c <_vfiprintf_r+0x1f0>
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	f04f 32ff 	mov.w	r2, #4294967295
 8000b50:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000b54:	f10a 0a01 	add.w	sl, sl, #1
 8000b58:	9304      	str	r3, [sp, #16]
 8000b5a:	9307      	str	r3, [sp, #28]
 8000b5c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8000b60:	931a      	str	r3, [sp, #104]	; 0x68
 8000b62:	4654      	mov	r4, sl
 8000b64:	2205      	movs	r2, #5
 8000b66:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000b6a:	4854      	ldr	r0, [pc, #336]	; (8000cbc <_vfiprintf_r+0x220>)
 8000b6c:	f000 fb94 	bl	8001298 <memchr>
 8000b70:	9a04      	ldr	r2, [sp, #16]
 8000b72:	b9d8      	cbnz	r0, 8000bac <_vfiprintf_r+0x110>
 8000b74:	06d1      	lsls	r1, r2, #27
 8000b76:	bf44      	itt	mi
 8000b78:	2320      	movmi	r3, #32
 8000b7a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000b7e:	0713      	lsls	r3, r2, #28
 8000b80:	bf44      	itt	mi
 8000b82:	232b      	movmi	r3, #43	; 0x2b
 8000b84:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000b88:	f89a 3000 	ldrb.w	r3, [sl]
 8000b8c:	2b2a      	cmp	r3, #42	; 0x2a
 8000b8e:	d015      	beq.n	8000bbc <_vfiprintf_r+0x120>
 8000b90:	4654      	mov	r4, sl
 8000b92:	2000      	movs	r0, #0
 8000b94:	f04f 0c0a 	mov.w	ip, #10
 8000b98:	9a07      	ldr	r2, [sp, #28]
 8000b9a:	4621      	mov	r1, r4
 8000b9c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000ba0:	3b30      	subs	r3, #48	; 0x30
 8000ba2:	2b09      	cmp	r3, #9
 8000ba4:	d94d      	bls.n	8000c42 <_vfiprintf_r+0x1a6>
 8000ba6:	b1b0      	cbz	r0, 8000bd6 <_vfiprintf_r+0x13a>
 8000ba8:	9207      	str	r2, [sp, #28]
 8000baa:	e014      	b.n	8000bd6 <_vfiprintf_r+0x13a>
 8000bac:	eba0 0308 	sub.w	r3, r0, r8
 8000bb0:	fa09 f303 	lsl.w	r3, r9, r3
 8000bb4:	4313      	orrs	r3, r2
 8000bb6:	46a2      	mov	sl, r4
 8000bb8:	9304      	str	r3, [sp, #16]
 8000bba:	e7d2      	b.n	8000b62 <_vfiprintf_r+0xc6>
 8000bbc:	9b03      	ldr	r3, [sp, #12]
 8000bbe:	1d19      	adds	r1, r3, #4
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	9103      	str	r1, [sp, #12]
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	bfbb      	ittet	lt
 8000bc8:	425b      	neglt	r3, r3
 8000bca:	f042 0202 	orrlt.w	r2, r2, #2
 8000bce:	9307      	strge	r3, [sp, #28]
 8000bd0:	9307      	strlt	r3, [sp, #28]
 8000bd2:	bfb8      	it	lt
 8000bd4:	9204      	strlt	r2, [sp, #16]
 8000bd6:	7823      	ldrb	r3, [r4, #0]
 8000bd8:	2b2e      	cmp	r3, #46	; 0x2e
 8000bda:	d10c      	bne.n	8000bf6 <_vfiprintf_r+0x15a>
 8000bdc:	7863      	ldrb	r3, [r4, #1]
 8000bde:	2b2a      	cmp	r3, #42	; 0x2a
 8000be0:	d134      	bne.n	8000c4c <_vfiprintf_r+0x1b0>
 8000be2:	9b03      	ldr	r3, [sp, #12]
 8000be4:	3402      	adds	r4, #2
 8000be6:	1d1a      	adds	r2, r3, #4
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	9203      	str	r2, [sp, #12]
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	bfb8      	it	lt
 8000bf0:	f04f 33ff 	movlt.w	r3, #4294967295
 8000bf4:	9305      	str	r3, [sp, #20]
 8000bf6:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8000cc0 <_vfiprintf_r+0x224>
 8000bfa:	2203      	movs	r2, #3
 8000bfc:	4650      	mov	r0, sl
 8000bfe:	7821      	ldrb	r1, [r4, #0]
 8000c00:	f000 fb4a 	bl	8001298 <memchr>
 8000c04:	b138      	cbz	r0, 8000c16 <_vfiprintf_r+0x17a>
 8000c06:	2240      	movs	r2, #64	; 0x40
 8000c08:	9b04      	ldr	r3, [sp, #16]
 8000c0a:	eba0 000a 	sub.w	r0, r0, sl
 8000c0e:	4082      	lsls	r2, r0
 8000c10:	4313      	orrs	r3, r2
 8000c12:	3401      	adds	r4, #1
 8000c14:	9304      	str	r3, [sp, #16]
 8000c16:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000c1a:	2206      	movs	r2, #6
 8000c1c:	4829      	ldr	r0, [pc, #164]	; (8000cc4 <_vfiprintf_r+0x228>)
 8000c1e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8000c22:	f000 fb39 	bl	8001298 <memchr>
 8000c26:	2800      	cmp	r0, #0
 8000c28:	d03f      	beq.n	8000caa <_vfiprintf_r+0x20e>
 8000c2a:	4b27      	ldr	r3, [pc, #156]	; (8000cc8 <_vfiprintf_r+0x22c>)
 8000c2c:	bb1b      	cbnz	r3, 8000c76 <_vfiprintf_r+0x1da>
 8000c2e:	9b03      	ldr	r3, [sp, #12]
 8000c30:	3307      	adds	r3, #7
 8000c32:	f023 0307 	bic.w	r3, r3, #7
 8000c36:	3308      	adds	r3, #8
 8000c38:	9303      	str	r3, [sp, #12]
 8000c3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000c3c:	443b      	add	r3, r7
 8000c3e:	9309      	str	r3, [sp, #36]	; 0x24
 8000c40:	e768      	b.n	8000b14 <_vfiprintf_r+0x78>
 8000c42:	460c      	mov	r4, r1
 8000c44:	2001      	movs	r0, #1
 8000c46:	fb0c 3202 	mla	r2, ip, r2, r3
 8000c4a:	e7a6      	b.n	8000b9a <_vfiprintf_r+0xfe>
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	f04f 0c0a 	mov.w	ip, #10
 8000c52:	4619      	mov	r1, r3
 8000c54:	3401      	adds	r4, #1
 8000c56:	9305      	str	r3, [sp, #20]
 8000c58:	4620      	mov	r0, r4
 8000c5a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000c5e:	3a30      	subs	r2, #48	; 0x30
 8000c60:	2a09      	cmp	r2, #9
 8000c62:	d903      	bls.n	8000c6c <_vfiprintf_r+0x1d0>
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d0c6      	beq.n	8000bf6 <_vfiprintf_r+0x15a>
 8000c68:	9105      	str	r1, [sp, #20]
 8000c6a:	e7c4      	b.n	8000bf6 <_vfiprintf_r+0x15a>
 8000c6c:	4604      	mov	r4, r0
 8000c6e:	2301      	movs	r3, #1
 8000c70:	fb0c 2101 	mla	r1, ip, r1, r2
 8000c74:	e7f0      	b.n	8000c58 <_vfiprintf_r+0x1bc>
 8000c76:	ab03      	add	r3, sp, #12
 8000c78:	9300      	str	r3, [sp, #0]
 8000c7a:	462a      	mov	r2, r5
 8000c7c:	4630      	mov	r0, r6
 8000c7e:	4b13      	ldr	r3, [pc, #76]	; (8000ccc <_vfiprintf_r+0x230>)
 8000c80:	a904      	add	r1, sp, #16
 8000c82:	f3af 8000 	nop.w
 8000c86:	4607      	mov	r7, r0
 8000c88:	1c78      	adds	r0, r7, #1
 8000c8a:	d1d6      	bne.n	8000c3a <_vfiprintf_r+0x19e>
 8000c8c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000c8e:	07d9      	lsls	r1, r3, #31
 8000c90:	d405      	bmi.n	8000c9e <_vfiprintf_r+0x202>
 8000c92:	89ab      	ldrh	r3, [r5, #12]
 8000c94:	059a      	lsls	r2, r3, #22
 8000c96:	d402      	bmi.n	8000c9e <_vfiprintf_r+0x202>
 8000c98:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000c9a:	f7ff fde1 	bl	8000860 <__retarget_lock_release_recursive>
 8000c9e:	89ab      	ldrh	r3, [r5, #12]
 8000ca0:	065b      	lsls	r3, r3, #25
 8000ca2:	f53f af1d 	bmi.w	8000ae0 <_vfiprintf_r+0x44>
 8000ca6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8000ca8:	e71c      	b.n	8000ae4 <_vfiprintf_r+0x48>
 8000caa:	ab03      	add	r3, sp, #12
 8000cac:	9300      	str	r3, [sp, #0]
 8000cae:	462a      	mov	r2, r5
 8000cb0:	4630      	mov	r0, r6
 8000cb2:	4b06      	ldr	r3, [pc, #24]	; (8000ccc <_vfiprintf_r+0x230>)
 8000cb4:	a904      	add	r1, sp, #16
 8000cb6:	f000 f87d 	bl	8000db4 <_printf_i>
 8000cba:	e7e4      	b.n	8000c86 <_vfiprintf_r+0x1ea>
 8000cbc:	080013e7 	.word	0x080013e7
 8000cc0:	080013ed 	.word	0x080013ed
 8000cc4:	080013f1 	.word	0x080013f1
 8000cc8:	00000000 	.word	0x00000000
 8000ccc:	08000a77 	.word	0x08000a77

08000cd0 <_printf_common>:
 8000cd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cd4:	4616      	mov	r6, r2
 8000cd6:	4699      	mov	r9, r3
 8000cd8:	688a      	ldr	r2, [r1, #8]
 8000cda:	690b      	ldr	r3, [r1, #16]
 8000cdc:	4607      	mov	r7, r0
 8000cde:	4293      	cmp	r3, r2
 8000ce0:	bfb8      	it	lt
 8000ce2:	4613      	movlt	r3, r2
 8000ce4:	6033      	str	r3, [r6, #0]
 8000ce6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8000cea:	460c      	mov	r4, r1
 8000cec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8000cf0:	b10a      	cbz	r2, 8000cf6 <_printf_common+0x26>
 8000cf2:	3301      	adds	r3, #1
 8000cf4:	6033      	str	r3, [r6, #0]
 8000cf6:	6823      	ldr	r3, [r4, #0]
 8000cf8:	0699      	lsls	r1, r3, #26
 8000cfa:	bf42      	ittt	mi
 8000cfc:	6833      	ldrmi	r3, [r6, #0]
 8000cfe:	3302      	addmi	r3, #2
 8000d00:	6033      	strmi	r3, [r6, #0]
 8000d02:	6825      	ldr	r5, [r4, #0]
 8000d04:	f015 0506 	ands.w	r5, r5, #6
 8000d08:	d106      	bne.n	8000d18 <_printf_common+0x48>
 8000d0a:	f104 0a19 	add.w	sl, r4, #25
 8000d0e:	68e3      	ldr	r3, [r4, #12]
 8000d10:	6832      	ldr	r2, [r6, #0]
 8000d12:	1a9b      	subs	r3, r3, r2
 8000d14:	42ab      	cmp	r3, r5
 8000d16:	dc2b      	bgt.n	8000d70 <_printf_common+0xa0>
 8000d18:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8000d1c:	1e13      	subs	r3, r2, #0
 8000d1e:	6822      	ldr	r2, [r4, #0]
 8000d20:	bf18      	it	ne
 8000d22:	2301      	movne	r3, #1
 8000d24:	0692      	lsls	r2, r2, #26
 8000d26:	d430      	bmi.n	8000d8a <_printf_common+0xba>
 8000d28:	4649      	mov	r1, r9
 8000d2a:	4638      	mov	r0, r7
 8000d2c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8000d30:	47c0      	blx	r8
 8000d32:	3001      	adds	r0, #1
 8000d34:	d023      	beq.n	8000d7e <_printf_common+0xae>
 8000d36:	6823      	ldr	r3, [r4, #0]
 8000d38:	6922      	ldr	r2, [r4, #16]
 8000d3a:	f003 0306 	and.w	r3, r3, #6
 8000d3e:	2b04      	cmp	r3, #4
 8000d40:	bf14      	ite	ne
 8000d42:	2500      	movne	r5, #0
 8000d44:	6833      	ldreq	r3, [r6, #0]
 8000d46:	f04f 0600 	mov.w	r6, #0
 8000d4a:	bf08      	it	eq
 8000d4c:	68e5      	ldreq	r5, [r4, #12]
 8000d4e:	f104 041a 	add.w	r4, r4, #26
 8000d52:	bf08      	it	eq
 8000d54:	1aed      	subeq	r5, r5, r3
 8000d56:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8000d5a:	bf08      	it	eq
 8000d5c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000d60:	4293      	cmp	r3, r2
 8000d62:	bfc4      	itt	gt
 8000d64:	1a9b      	subgt	r3, r3, r2
 8000d66:	18ed      	addgt	r5, r5, r3
 8000d68:	42b5      	cmp	r5, r6
 8000d6a:	d11a      	bne.n	8000da2 <_printf_common+0xd2>
 8000d6c:	2000      	movs	r0, #0
 8000d6e:	e008      	b.n	8000d82 <_printf_common+0xb2>
 8000d70:	2301      	movs	r3, #1
 8000d72:	4652      	mov	r2, sl
 8000d74:	4649      	mov	r1, r9
 8000d76:	4638      	mov	r0, r7
 8000d78:	47c0      	blx	r8
 8000d7a:	3001      	adds	r0, #1
 8000d7c:	d103      	bne.n	8000d86 <_printf_common+0xb6>
 8000d7e:	f04f 30ff 	mov.w	r0, #4294967295
 8000d82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d86:	3501      	adds	r5, #1
 8000d88:	e7c1      	b.n	8000d0e <_printf_common+0x3e>
 8000d8a:	2030      	movs	r0, #48	; 0x30
 8000d8c:	18e1      	adds	r1, r4, r3
 8000d8e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8000d92:	1c5a      	adds	r2, r3, #1
 8000d94:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8000d98:	4422      	add	r2, r4
 8000d9a:	3302      	adds	r3, #2
 8000d9c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8000da0:	e7c2      	b.n	8000d28 <_printf_common+0x58>
 8000da2:	2301      	movs	r3, #1
 8000da4:	4622      	mov	r2, r4
 8000da6:	4649      	mov	r1, r9
 8000da8:	4638      	mov	r0, r7
 8000daa:	47c0      	blx	r8
 8000dac:	3001      	adds	r0, #1
 8000dae:	d0e6      	beq.n	8000d7e <_printf_common+0xae>
 8000db0:	3601      	adds	r6, #1
 8000db2:	e7d9      	b.n	8000d68 <_printf_common+0x98>

08000db4 <_printf_i>:
 8000db4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000db8:	7e0f      	ldrb	r7, [r1, #24]
 8000dba:	4691      	mov	r9, r2
 8000dbc:	2f78      	cmp	r7, #120	; 0x78
 8000dbe:	4680      	mov	r8, r0
 8000dc0:	460c      	mov	r4, r1
 8000dc2:	469a      	mov	sl, r3
 8000dc4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8000dc6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8000dca:	d807      	bhi.n	8000ddc <_printf_i+0x28>
 8000dcc:	2f62      	cmp	r7, #98	; 0x62
 8000dce:	d80a      	bhi.n	8000de6 <_printf_i+0x32>
 8000dd0:	2f00      	cmp	r7, #0
 8000dd2:	f000 80d5 	beq.w	8000f80 <_printf_i+0x1cc>
 8000dd6:	2f58      	cmp	r7, #88	; 0x58
 8000dd8:	f000 80c1 	beq.w	8000f5e <_printf_i+0x1aa>
 8000ddc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8000de0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8000de4:	e03a      	b.n	8000e5c <_printf_i+0xa8>
 8000de6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8000dea:	2b15      	cmp	r3, #21
 8000dec:	d8f6      	bhi.n	8000ddc <_printf_i+0x28>
 8000dee:	a101      	add	r1, pc, #4	; (adr r1, 8000df4 <_printf_i+0x40>)
 8000df0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8000df4:	08000e4d 	.word	0x08000e4d
 8000df8:	08000e61 	.word	0x08000e61
 8000dfc:	08000ddd 	.word	0x08000ddd
 8000e00:	08000ddd 	.word	0x08000ddd
 8000e04:	08000ddd 	.word	0x08000ddd
 8000e08:	08000ddd 	.word	0x08000ddd
 8000e0c:	08000e61 	.word	0x08000e61
 8000e10:	08000ddd 	.word	0x08000ddd
 8000e14:	08000ddd 	.word	0x08000ddd
 8000e18:	08000ddd 	.word	0x08000ddd
 8000e1c:	08000ddd 	.word	0x08000ddd
 8000e20:	08000f67 	.word	0x08000f67
 8000e24:	08000e8d 	.word	0x08000e8d
 8000e28:	08000f21 	.word	0x08000f21
 8000e2c:	08000ddd 	.word	0x08000ddd
 8000e30:	08000ddd 	.word	0x08000ddd
 8000e34:	08000f89 	.word	0x08000f89
 8000e38:	08000ddd 	.word	0x08000ddd
 8000e3c:	08000e8d 	.word	0x08000e8d
 8000e40:	08000ddd 	.word	0x08000ddd
 8000e44:	08000ddd 	.word	0x08000ddd
 8000e48:	08000f29 	.word	0x08000f29
 8000e4c:	682b      	ldr	r3, [r5, #0]
 8000e4e:	1d1a      	adds	r2, r3, #4
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	602a      	str	r2, [r5, #0]
 8000e54:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8000e58:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8000e5c:	2301      	movs	r3, #1
 8000e5e:	e0a0      	b.n	8000fa2 <_printf_i+0x1ee>
 8000e60:	6820      	ldr	r0, [r4, #0]
 8000e62:	682b      	ldr	r3, [r5, #0]
 8000e64:	0607      	lsls	r7, r0, #24
 8000e66:	f103 0104 	add.w	r1, r3, #4
 8000e6a:	6029      	str	r1, [r5, #0]
 8000e6c:	d501      	bpl.n	8000e72 <_printf_i+0xbe>
 8000e6e:	681e      	ldr	r6, [r3, #0]
 8000e70:	e003      	b.n	8000e7a <_printf_i+0xc6>
 8000e72:	0646      	lsls	r6, r0, #25
 8000e74:	d5fb      	bpl.n	8000e6e <_printf_i+0xba>
 8000e76:	f9b3 6000 	ldrsh.w	r6, [r3]
 8000e7a:	2e00      	cmp	r6, #0
 8000e7c:	da03      	bge.n	8000e86 <_printf_i+0xd2>
 8000e7e:	232d      	movs	r3, #45	; 0x2d
 8000e80:	4276      	negs	r6, r6
 8000e82:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8000e86:	230a      	movs	r3, #10
 8000e88:	4859      	ldr	r0, [pc, #356]	; (8000ff0 <_printf_i+0x23c>)
 8000e8a:	e012      	b.n	8000eb2 <_printf_i+0xfe>
 8000e8c:	682b      	ldr	r3, [r5, #0]
 8000e8e:	6820      	ldr	r0, [r4, #0]
 8000e90:	1d19      	adds	r1, r3, #4
 8000e92:	6029      	str	r1, [r5, #0]
 8000e94:	0605      	lsls	r5, r0, #24
 8000e96:	d501      	bpl.n	8000e9c <_printf_i+0xe8>
 8000e98:	681e      	ldr	r6, [r3, #0]
 8000e9a:	e002      	b.n	8000ea2 <_printf_i+0xee>
 8000e9c:	0641      	lsls	r1, r0, #25
 8000e9e:	d5fb      	bpl.n	8000e98 <_printf_i+0xe4>
 8000ea0:	881e      	ldrh	r6, [r3, #0]
 8000ea2:	2f6f      	cmp	r7, #111	; 0x6f
 8000ea4:	bf0c      	ite	eq
 8000ea6:	2308      	moveq	r3, #8
 8000ea8:	230a      	movne	r3, #10
 8000eaa:	4851      	ldr	r0, [pc, #324]	; (8000ff0 <_printf_i+0x23c>)
 8000eac:	2100      	movs	r1, #0
 8000eae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8000eb2:	6865      	ldr	r5, [r4, #4]
 8000eb4:	2d00      	cmp	r5, #0
 8000eb6:	bfa8      	it	ge
 8000eb8:	6821      	ldrge	r1, [r4, #0]
 8000eba:	60a5      	str	r5, [r4, #8]
 8000ebc:	bfa4      	itt	ge
 8000ebe:	f021 0104 	bicge.w	r1, r1, #4
 8000ec2:	6021      	strge	r1, [r4, #0]
 8000ec4:	b90e      	cbnz	r6, 8000eca <_printf_i+0x116>
 8000ec6:	2d00      	cmp	r5, #0
 8000ec8:	d04b      	beq.n	8000f62 <_printf_i+0x1ae>
 8000eca:	4615      	mov	r5, r2
 8000ecc:	fbb6 f1f3 	udiv	r1, r6, r3
 8000ed0:	fb03 6711 	mls	r7, r3, r1, r6
 8000ed4:	5dc7      	ldrb	r7, [r0, r7]
 8000ed6:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8000eda:	4637      	mov	r7, r6
 8000edc:	42bb      	cmp	r3, r7
 8000ede:	460e      	mov	r6, r1
 8000ee0:	d9f4      	bls.n	8000ecc <_printf_i+0x118>
 8000ee2:	2b08      	cmp	r3, #8
 8000ee4:	d10b      	bne.n	8000efe <_printf_i+0x14a>
 8000ee6:	6823      	ldr	r3, [r4, #0]
 8000ee8:	07de      	lsls	r6, r3, #31
 8000eea:	d508      	bpl.n	8000efe <_printf_i+0x14a>
 8000eec:	6923      	ldr	r3, [r4, #16]
 8000eee:	6861      	ldr	r1, [r4, #4]
 8000ef0:	4299      	cmp	r1, r3
 8000ef2:	bfde      	ittt	le
 8000ef4:	2330      	movle	r3, #48	; 0x30
 8000ef6:	f805 3c01 	strble.w	r3, [r5, #-1]
 8000efa:	f105 35ff 	addle.w	r5, r5, #4294967295
 8000efe:	1b52      	subs	r2, r2, r5
 8000f00:	6122      	str	r2, [r4, #16]
 8000f02:	464b      	mov	r3, r9
 8000f04:	4621      	mov	r1, r4
 8000f06:	4640      	mov	r0, r8
 8000f08:	f8cd a000 	str.w	sl, [sp]
 8000f0c:	aa03      	add	r2, sp, #12
 8000f0e:	f7ff fedf 	bl	8000cd0 <_printf_common>
 8000f12:	3001      	adds	r0, #1
 8000f14:	d14a      	bne.n	8000fac <_printf_i+0x1f8>
 8000f16:	f04f 30ff 	mov.w	r0, #4294967295
 8000f1a:	b004      	add	sp, #16
 8000f1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f20:	6823      	ldr	r3, [r4, #0]
 8000f22:	f043 0320 	orr.w	r3, r3, #32
 8000f26:	6023      	str	r3, [r4, #0]
 8000f28:	2778      	movs	r7, #120	; 0x78
 8000f2a:	4832      	ldr	r0, [pc, #200]	; (8000ff4 <_printf_i+0x240>)
 8000f2c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8000f30:	6823      	ldr	r3, [r4, #0]
 8000f32:	6829      	ldr	r1, [r5, #0]
 8000f34:	061f      	lsls	r7, r3, #24
 8000f36:	f851 6b04 	ldr.w	r6, [r1], #4
 8000f3a:	d402      	bmi.n	8000f42 <_printf_i+0x18e>
 8000f3c:	065f      	lsls	r7, r3, #25
 8000f3e:	bf48      	it	mi
 8000f40:	b2b6      	uxthmi	r6, r6
 8000f42:	07df      	lsls	r7, r3, #31
 8000f44:	bf48      	it	mi
 8000f46:	f043 0320 	orrmi.w	r3, r3, #32
 8000f4a:	6029      	str	r1, [r5, #0]
 8000f4c:	bf48      	it	mi
 8000f4e:	6023      	strmi	r3, [r4, #0]
 8000f50:	b91e      	cbnz	r6, 8000f5a <_printf_i+0x1a6>
 8000f52:	6823      	ldr	r3, [r4, #0]
 8000f54:	f023 0320 	bic.w	r3, r3, #32
 8000f58:	6023      	str	r3, [r4, #0]
 8000f5a:	2310      	movs	r3, #16
 8000f5c:	e7a6      	b.n	8000eac <_printf_i+0xf8>
 8000f5e:	4824      	ldr	r0, [pc, #144]	; (8000ff0 <_printf_i+0x23c>)
 8000f60:	e7e4      	b.n	8000f2c <_printf_i+0x178>
 8000f62:	4615      	mov	r5, r2
 8000f64:	e7bd      	b.n	8000ee2 <_printf_i+0x12e>
 8000f66:	682b      	ldr	r3, [r5, #0]
 8000f68:	6826      	ldr	r6, [r4, #0]
 8000f6a:	1d18      	adds	r0, r3, #4
 8000f6c:	6961      	ldr	r1, [r4, #20]
 8000f6e:	6028      	str	r0, [r5, #0]
 8000f70:	0635      	lsls	r5, r6, #24
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	d501      	bpl.n	8000f7a <_printf_i+0x1c6>
 8000f76:	6019      	str	r1, [r3, #0]
 8000f78:	e002      	b.n	8000f80 <_printf_i+0x1cc>
 8000f7a:	0670      	lsls	r0, r6, #25
 8000f7c:	d5fb      	bpl.n	8000f76 <_printf_i+0x1c2>
 8000f7e:	8019      	strh	r1, [r3, #0]
 8000f80:	2300      	movs	r3, #0
 8000f82:	4615      	mov	r5, r2
 8000f84:	6123      	str	r3, [r4, #16]
 8000f86:	e7bc      	b.n	8000f02 <_printf_i+0x14e>
 8000f88:	682b      	ldr	r3, [r5, #0]
 8000f8a:	2100      	movs	r1, #0
 8000f8c:	1d1a      	adds	r2, r3, #4
 8000f8e:	602a      	str	r2, [r5, #0]
 8000f90:	681d      	ldr	r5, [r3, #0]
 8000f92:	6862      	ldr	r2, [r4, #4]
 8000f94:	4628      	mov	r0, r5
 8000f96:	f000 f97f 	bl	8001298 <memchr>
 8000f9a:	b108      	cbz	r0, 8000fa0 <_printf_i+0x1ec>
 8000f9c:	1b40      	subs	r0, r0, r5
 8000f9e:	6060      	str	r0, [r4, #4]
 8000fa0:	6863      	ldr	r3, [r4, #4]
 8000fa2:	6123      	str	r3, [r4, #16]
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8000faa:	e7aa      	b.n	8000f02 <_printf_i+0x14e>
 8000fac:	462a      	mov	r2, r5
 8000fae:	4649      	mov	r1, r9
 8000fb0:	4640      	mov	r0, r8
 8000fb2:	6923      	ldr	r3, [r4, #16]
 8000fb4:	47d0      	blx	sl
 8000fb6:	3001      	adds	r0, #1
 8000fb8:	d0ad      	beq.n	8000f16 <_printf_i+0x162>
 8000fba:	6823      	ldr	r3, [r4, #0]
 8000fbc:	079b      	lsls	r3, r3, #30
 8000fbe:	d413      	bmi.n	8000fe8 <_printf_i+0x234>
 8000fc0:	68e0      	ldr	r0, [r4, #12]
 8000fc2:	9b03      	ldr	r3, [sp, #12]
 8000fc4:	4298      	cmp	r0, r3
 8000fc6:	bfb8      	it	lt
 8000fc8:	4618      	movlt	r0, r3
 8000fca:	e7a6      	b.n	8000f1a <_printf_i+0x166>
 8000fcc:	2301      	movs	r3, #1
 8000fce:	4632      	mov	r2, r6
 8000fd0:	4649      	mov	r1, r9
 8000fd2:	4640      	mov	r0, r8
 8000fd4:	47d0      	blx	sl
 8000fd6:	3001      	adds	r0, #1
 8000fd8:	d09d      	beq.n	8000f16 <_printf_i+0x162>
 8000fda:	3501      	adds	r5, #1
 8000fdc:	68e3      	ldr	r3, [r4, #12]
 8000fde:	9903      	ldr	r1, [sp, #12]
 8000fe0:	1a5b      	subs	r3, r3, r1
 8000fe2:	42ab      	cmp	r3, r5
 8000fe4:	dcf2      	bgt.n	8000fcc <_printf_i+0x218>
 8000fe6:	e7eb      	b.n	8000fc0 <_printf_i+0x20c>
 8000fe8:	2500      	movs	r5, #0
 8000fea:	f104 0619 	add.w	r6, r4, #25
 8000fee:	e7f5      	b.n	8000fdc <_printf_i+0x228>
 8000ff0:	080013f8 	.word	0x080013f8
 8000ff4:	08001409 	.word	0x08001409

08000ff8 <__sflush_r>:
 8000ff8:	898a      	ldrh	r2, [r1, #12]
 8000ffa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ffc:	4605      	mov	r5, r0
 8000ffe:	0710      	lsls	r0, r2, #28
 8001000:	460c      	mov	r4, r1
 8001002:	d457      	bmi.n	80010b4 <__sflush_r+0xbc>
 8001004:	684b      	ldr	r3, [r1, #4]
 8001006:	2b00      	cmp	r3, #0
 8001008:	dc04      	bgt.n	8001014 <__sflush_r+0x1c>
 800100a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800100c:	2b00      	cmp	r3, #0
 800100e:	dc01      	bgt.n	8001014 <__sflush_r+0x1c>
 8001010:	2000      	movs	r0, #0
 8001012:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001014:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001016:	2e00      	cmp	r6, #0
 8001018:	d0fa      	beq.n	8001010 <__sflush_r+0x18>
 800101a:	2300      	movs	r3, #0
 800101c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001020:	682f      	ldr	r7, [r5, #0]
 8001022:	6a21      	ldr	r1, [r4, #32]
 8001024:	602b      	str	r3, [r5, #0]
 8001026:	d032      	beq.n	800108e <__sflush_r+0x96>
 8001028:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800102a:	89a3      	ldrh	r3, [r4, #12]
 800102c:	075a      	lsls	r2, r3, #29
 800102e:	d505      	bpl.n	800103c <__sflush_r+0x44>
 8001030:	6863      	ldr	r3, [r4, #4]
 8001032:	1ac0      	subs	r0, r0, r3
 8001034:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001036:	b10b      	cbz	r3, 800103c <__sflush_r+0x44>
 8001038:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800103a:	1ac0      	subs	r0, r0, r3
 800103c:	2300      	movs	r3, #0
 800103e:	4602      	mov	r2, r0
 8001040:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001042:	4628      	mov	r0, r5
 8001044:	6a21      	ldr	r1, [r4, #32]
 8001046:	47b0      	blx	r6
 8001048:	1c43      	adds	r3, r0, #1
 800104a:	89a3      	ldrh	r3, [r4, #12]
 800104c:	d106      	bne.n	800105c <__sflush_r+0x64>
 800104e:	6829      	ldr	r1, [r5, #0]
 8001050:	291d      	cmp	r1, #29
 8001052:	d82b      	bhi.n	80010ac <__sflush_r+0xb4>
 8001054:	4a28      	ldr	r2, [pc, #160]	; (80010f8 <__sflush_r+0x100>)
 8001056:	410a      	asrs	r2, r1
 8001058:	07d6      	lsls	r6, r2, #31
 800105a:	d427      	bmi.n	80010ac <__sflush_r+0xb4>
 800105c:	2200      	movs	r2, #0
 800105e:	6062      	str	r2, [r4, #4]
 8001060:	6922      	ldr	r2, [r4, #16]
 8001062:	04d9      	lsls	r1, r3, #19
 8001064:	6022      	str	r2, [r4, #0]
 8001066:	d504      	bpl.n	8001072 <__sflush_r+0x7a>
 8001068:	1c42      	adds	r2, r0, #1
 800106a:	d101      	bne.n	8001070 <__sflush_r+0x78>
 800106c:	682b      	ldr	r3, [r5, #0]
 800106e:	b903      	cbnz	r3, 8001072 <__sflush_r+0x7a>
 8001070:	6560      	str	r0, [r4, #84]	; 0x54
 8001072:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001074:	602f      	str	r7, [r5, #0]
 8001076:	2900      	cmp	r1, #0
 8001078:	d0ca      	beq.n	8001010 <__sflush_r+0x18>
 800107a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800107e:	4299      	cmp	r1, r3
 8001080:	d002      	beq.n	8001088 <__sflush_r+0x90>
 8001082:	4628      	mov	r0, r5
 8001084:	f7ff fbee 	bl	8000864 <_free_r>
 8001088:	2000      	movs	r0, #0
 800108a:	6360      	str	r0, [r4, #52]	; 0x34
 800108c:	e7c1      	b.n	8001012 <__sflush_r+0x1a>
 800108e:	2301      	movs	r3, #1
 8001090:	4628      	mov	r0, r5
 8001092:	47b0      	blx	r6
 8001094:	1c41      	adds	r1, r0, #1
 8001096:	d1c8      	bne.n	800102a <__sflush_r+0x32>
 8001098:	682b      	ldr	r3, [r5, #0]
 800109a:	2b00      	cmp	r3, #0
 800109c:	d0c5      	beq.n	800102a <__sflush_r+0x32>
 800109e:	2b1d      	cmp	r3, #29
 80010a0:	d001      	beq.n	80010a6 <__sflush_r+0xae>
 80010a2:	2b16      	cmp	r3, #22
 80010a4:	d101      	bne.n	80010aa <__sflush_r+0xb2>
 80010a6:	602f      	str	r7, [r5, #0]
 80010a8:	e7b2      	b.n	8001010 <__sflush_r+0x18>
 80010aa:	89a3      	ldrh	r3, [r4, #12]
 80010ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80010b0:	81a3      	strh	r3, [r4, #12]
 80010b2:	e7ae      	b.n	8001012 <__sflush_r+0x1a>
 80010b4:	690f      	ldr	r7, [r1, #16]
 80010b6:	2f00      	cmp	r7, #0
 80010b8:	d0aa      	beq.n	8001010 <__sflush_r+0x18>
 80010ba:	0793      	lsls	r3, r2, #30
 80010bc:	bf18      	it	ne
 80010be:	2300      	movne	r3, #0
 80010c0:	680e      	ldr	r6, [r1, #0]
 80010c2:	bf08      	it	eq
 80010c4:	694b      	ldreq	r3, [r1, #20]
 80010c6:	1bf6      	subs	r6, r6, r7
 80010c8:	600f      	str	r7, [r1, #0]
 80010ca:	608b      	str	r3, [r1, #8]
 80010cc:	2e00      	cmp	r6, #0
 80010ce:	dd9f      	ble.n	8001010 <__sflush_r+0x18>
 80010d0:	4633      	mov	r3, r6
 80010d2:	463a      	mov	r2, r7
 80010d4:	4628      	mov	r0, r5
 80010d6:	6a21      	ldr	r1, [r4, #32]
 80010d8:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80010dc:	47e0      	blx	ip
 80010de:	2800      	cmp	r0, #0
 80010e0:	dc06      	bgt.n	80010f0 <__sflush_r+0xf8>
 80010e2:	89a3      	ldrh	r3, [r4, #12]
 80010e4:	f04f 30ff 	mov.w	r0, #4294967295
 80010e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80010ec:	81a3      	strh	r3, [r4, #12]
 80010ee:	e790      	b.n	8001012 <__sflush_r+0x1a>
 80010f0:	4407      	add	r7, r0
 80010f2:	1a36      	subs	r6, r6, r0
 80010f4:	e7ea      	b.n	80010cc <__sflush_r+0xd4>
 80010f6:	bf00      	nop
 80010f8:	dfbffffe 	.word	0xdfbffffe

080010fc <_fflush_r>:
 80010fc:	b538      	push	{r3, r4, r5, lr}
 80010fe:	690b      	ldr	r3, [r1, #16]
 8001100:	4605      	mov	r5, r0
 8001102:	460c      	mov	r4, r1
 8001104:	b913      	cbnz	r3, 800110c <_fflush_r+0x10>
 8001106:	2500      	movs	r5, #0
 8001108:	4628      	mov	r0, r5
 800110a:	bd38      	pop	{r3, r4, r5, pc}
 800110c:	b118      	cbz	r0, 8001116 <_fflush_r+0x1a>
 800110e:	6a03      	ldr	r3, [r0, #32]
 8001110:	b90b      	cbnz	r3, 8001116 <_fflush_r+0x1a>
 8001112:	f7ff fa9f 	bl	8000654 <__sinit>
 8001116:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800111a:	2b00      	cmp	r3, #0
 800111c:	d0f3      	beq.n	8001106 <_fflush_r+0xa>
 800111e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001120:	07d0      	lsls	r0, r2, #31
 8001122:	d404      	bmi.n	800112e <_fflush_r+0x32>
 8001124:	0599      	lsls	r1, r3, #22
 8001126:	d402      	bmi.n	800112e <_fflush_r+0x32>
 8001128:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800112a:	f7ff fb98 	bl	800085e <__retarget_lock_acquire_recursive>
 800112e:	4628      	mov	r0, r5
 8001130:	4621      	mov	r1, r4
 8001132:	f7ff ff61 	bl	8000ff8 <__sflush_r>
 8001136:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001138:	4605      	mov	r5, r0
 800113a:	07da      	lsls	r2, r3, #31
 800113c:	d4e4      	bmi.n	8001108 <_fflush_r+0xc>
 800113e:	89a3      	ldrh	r3, [r4, #12]
 8001140:	059b      	lsls	r3, r3, #22
 8001142:	d4e1      	bmi.n	8001108 <_fflush_r+0xc>
 8001144:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001146:	f7ff fb8b 	bl	8000860 <__retarget_lock_release_recursive>
 800114a:	e7dd      	b.n	8001108 <_fflush_r+0xc>

0800114c <__swbuf_r>:
 800114c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800114e:	460e      	mov	r6, r1
 8001150:	4614      	mov	r4, r2
 8001152:	4605      	mov	r5, r0
 8001154:	b118      	cbz	r0, 800115e <__swbuf_r+0x12>
 8001156:	6a03      	ldr	r3, [r0, #32]
 8001158:	b90b      	cbnz	r3, 800115e <__swbuf_r+0x12>
 800115a:	f7ff fa7b 	bl	8000654 <__sinit>
 800115e:	69a3      	ldr	r3, [r4, #24]
 8001160:	60a3      	str	r3, [r4, #8]
 8001162:	89a3      	ldrh	r3, [r4, #12]
 8001164:	071a      	lsls	r2, r3, #28
 8001166:	d525      	bpl.n	80011b4 <__swbuf_r+0x68>
 8001168:	6923      	ldr	r3, [r4, #16]
 800116a:	b31b      	cbz	r3, 80011b4 <__swbuf_r+0x68>
 800116c:	6823      	ldr	r3, [r4, #0]
 800116e:	6922      	ldr	r2, [r4, #16]
 8001170:	b2f6      	uxtb	r6, r6
 8001172:	1a98      	subs	r0, r3, r2
 8001174:	6963      	ldr	r3, [r4, #20]
 8001176:	4637      	mov	r7, r6
 8001178:	4283      	cmp	r3, r0
 800117a:	dc04      	bgt.n	8001186 <__swbuf_r+0x3a>
 800117c:	4621      	mov	r1, r4
 800117e:	4628      	mov	r0, r5
 8001180:	f7ff ffbc 	bl	80010fc <_fflush_r>
 8001184:	b9e0      	cbnz	r0, 80011c0 <__swbuf_r+0x74>
 8001186:	68a3      	ldr	r3, [r4, #8]
 8001188:	3b01      	subs	r3, #1
 800118a:	60a3      	str	r3, [r4, #8]
 800118c:	6823      	ldr	r3, [r4, #0]
 800118e:	1c5a      	adds	r2, r3, #1
 8001190:	6022      	str	r2, [r4, #0]
 8001192:	701e      	strb	r6, [r3, #0]
 8001194:	6962      	ldr	r2, [r4, #20]
 8001196:	1c43      	adds	r3, r0, #1
 8001198:	429a      	cmp	r2, r3
 800119a:	d004      	beq.n	80011a6 <__swbuf_r+0x5a>
 800119c:	89a3      	ldrh	r3, [r4, #12]
 800119e:	07db      	lsls	r3, r3, #31
 80011a0:	d506      	bpl.n	80011b0 <__swbuf_r+0x64>
 80011a2:	2e0a      	cmp	r6, #10
 80011a4:	d104      	bne.n	80011b0 <__swbuf_r+0x64>
 80011a6:	4621      	mov	r1, r4
 80011a8:	4628      	mov	r0, r5
 80011aa:	f7ff ffa7 	bl	80010fc <_fflush_r>
 80011ae:	b938      	cbnz	r0, 80011c0 <__swbuf_r+0x74>
 80011b0:	4638      	mov	r0, r7
 80011b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80011b4:	4621      	mov	r1, r4
 80011b6:	4628      	mov	r0, r5
 80011b8:	f000 f806 	bl	80011c8 <__swsetup_r>
 80011bc:	2800      	cmp	r0, #0
 80011be:	d0d5      	beq.n	800116c <__swbuf_r+0x20>
 80011c0:	f04f 37ff 	mov.w	r7, #4294967295
 80011c4:	e7f4      	b.n	80011b0 <__swbuf_r+0x64>
	...

080011c8 <__swsetup_r>:
 80011c8:	b538      	push	{r3, r4, r5, lr}
 80011ca:	4b2a      	ldr	r3, [pc, #168]	; (8001274 <__swsetup_r+0xac>)
 80011cc:	4605      	mov	r5, r0
 80011ce:	6818      	ldr	r0, [r3, #0]
 80011d0:	460c      	mov	r4, r1
 80011d2:	b118      	cbz	r0, 80011dc <__swsetup_r+0x14>
 80011d4:	6a03      	ldr	r3, [r0, #32]
 80011d6:	b90b      	cbnz	r3, 80011dc <__swsetup_r+0x14>
 80011d8:	f7ff fa3c 	bl	8000654 <__sinit>
 80011dc:	89a3      	ldrh	r3, [r4, #12]
 80011de:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80011e2:	0718      	lsls	r0, r3, #28
 80011e4:	d422      	bmi.n	800122c <__swsetup_r+0x64>
 80011e6:	06d9      	lsls	r1, r3, #27
 80011e8:	d407      	bmi.n	80011fa <__swsetup_r+0x32>
 80011ea:	2309      	movs	r3, #9
 80011ec:	602b      	str	r3, [r5, #0]
 80011ee:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80011f2:	f04f 30ff 	mov.w	r0, #4294967295
 80011f6:	81a3      	strh	r3, [r4, #12]
 80011f8:	e034      	b.n	8001264 <__swsetup_r+0x9c>
 80011fa:	0758      	lsls	r0, r3, #29
 80011fc:	d512      	bpl.n	8001224 <__swsetup_r+0x5c>
 80011fe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001200:	b141      	cbz	r1, 8001214 <__swsetup_r+0x4c>
 8001202:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001206:	4299      	cmp	r1, r3
 8001208:	d002      	beq.n	8001210 <__swsetup_r+0x48>
 800120a:	4628      	mov	r0, r5
 800120c:	f7ff fb2a 	bl	8000864 <_free_r>
 8001210:	2300      	movs	r3, #0
 8001212:	6363      	str	r3, [r4, #52]	; 0x34
 8001214:	89a3      	ldrh	r3, [r4, #12]
 8001216:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800121a:	81a3      	strh	r3, [r4, #12]
 800121c:	2300      	movs	r3, #0
 800121e:	6063      	str	r3, [r4, #4]
 8001220:	6923      	ldr	r3, [r4, #16]
 8001222:	6023      	str	r3, [r4, #0]
 8001224:	89a3      	ldrh	r3, [r4, #12]
 8001226:	f043 0308 	orr.w	r3, r3, #8
 800122a:	81a3      	strh	r3, [r4, #12]
 800122c:	6923      	ldr	r3, [r4, #16]
 800122e:	b94b      	cbnz	r3, 8001244 <__swsetup_r+0x7c>
 8001230:	89a3      	ldrh	r3, [r4, #12]
 8001232:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001236:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800123a:	d003      	beq.n	8001244 <__swsetup_r+0x7c>
 800123c:	4621      	mov	r1, r4
 800123e:	4628      	mov	r0, r5
 8001240:	f000 f85d 	bl	80012fe <__smakebuf_r>
 8001244:	89a0      	ldrh	r0, [r4, #12]
 8001246:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800124a:	f010 0301 	ands.w	r3, r0, #1
 800124e:	d00a      	beq.n	8001266 <__swsetup_r+0x9e>
 8001250:	2300      	movs	r3, #0
 8001252:	60a3      	str	r3, [r4, #8]
 8001254:	6963      	ldr	r3, [r4, #20]
 8001256:	425b      	negs	r3, r3
 8001258:	61a3      	str	r3, [r4, #24]
 800125a:	6923      	ldr	r3, [r4, #16]
 800125c:	b943      	cbnz	r3, 8001270 <__swsetup_r+0xa8>
 800125e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8001262:	d1c4      	bne.n	80011ee <__swsetup_r+0x26>
 8001264:	bd38      	pop	{r3, r4, r5, pc}
 8001266:	0781      	lsls	r1, r0, #30
 8001268:	bf58      	it	pl
 800126a:	6963      	ldrpl	r3, [r4, #20]
 800126c:	60a3      	str	r3, [r4, #8]
 800126e:	e7f4      	b.n	800125a <__swsetup_r+0x92>
 8001270:	2000      	movs	r0, #0
 8001272:	e7f7      	b.n	8001264 <__swsetup_r+0x9c>
 8001274:	20000058 	.word	0x20000058

08001278 <_sbrk_r>:
 8001278:	b538      	push	{r3, r4, r5, lr}
 800127a:	2300      	movs	r3, #0
 800127c:	4d05      	ldr	r5, [pc, #20]	; (8001294 <_sbrk_r+0x1c>)
 800127e:	4604      	mov	r4, r0
 8001280:	4608      	mov	r0, r1
 8001282:	602b      	str	r3, [r5, #0]
 8001284:	f7ff f826 	bl	80002d4 <_sbrk>
 8001288:	1c43      	adds	r3, r0, #1
 800128a:	d102      	bne.n	8001292 <_sbrk_r+0x1a>
 800128c:	682b      	ldr	r3, [r5, #0]
 800128e:	b103      	cbz	r3, 8001292 <_sbrk_r+0x1a>
 8001290:	6023      	str	r3, [r4, #0]
 8001292:	bd38      	pop	{r3, r4, r5, pc}
 8001294:	200001b8 	.word	0x200001b8

08001298 <memchr>:
 8001298:	4603      	mov	r3, r0
 800129a:	b510      	push	{r4, lr}
 800129c:	b2c9      	uxtb	r1, r1
 800129e:	4402      	add	r2, r0
 80012a0:	4293      	cmp	r3, r2
 80012a2:	4618      	mov	r0, r3
 80012a4:	d101      	bne.n	80012aa <memchr+0x12>
 80012a6:	2000      	movs	r0, #0
 80012a8:	e003      	b.n	80012b2 <memchr+0x1a>
 80012aa:	7804      	ldrb	r4, [r0, #0]
 80012ac:	3301      	adds	r3, #1
 80012ae:	428c      	cmp	r4, r1
 80012b0:	d1f6      	bne.n	80012a0 <memchr+0x8>
 80012b2:	bd10      	pop	{r4, pc}

080012b4 <__swhatbuf_r>:
 80012b4:	b570      	push	{r4, r5, r6, lr}
 80012b6:	460c      	mov	r4, r1
 80012b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80012bc:	4615      	mov	r5, r2
 80012be:	2900      	cmp	r1, #0
 80012c0:	461e      	mov	r6, r3
 80012c2:	b096      	sub	sp, #88	; 0x58
 80012c4:	da0c      	bge.n	80012e0 <__swhatbuf_r+0x2c>
 80012c6:	89a3      	ldrh	r3, [r4, #12]
 80012c8:	2100      	movs	r1, #0
 80012ca:	f013 0f80 	tst.w	r3, #128	; 0x80
 80012ce:	bf0c      	ite	eq
 80012d0:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80012d4:	2340      	movne	r3, #64	; 0x40
 80012d6:	2000      	movs	r0, #0
 80012d8:	6031      	str	r1, [r6, #0]
 80012da:	602b      	str	r3, [r5, #0]
 80012dc:	b016      	add	sp, #88	; 0x58
 80012de:	bd70      	pop	{r4, r5, r6, pc}
 80012e0:	466a      	mov	r2, sp
 80012e2:	f000 f849 	bl	8001378 <_fstat_r>
 80012e6:	2800      	cmp	r0, #0
 80012e8:	dbed      	blt.n	80012c6 <__swhatbuf_r+0x12>
 80012ea:	9901      	ldr	r1, [sp, #4]
 80012ec:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80012f0:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80012f4:	4259      	negs	r1, r3
 80012f6:	4159      	adcs	r1, r3
 80012f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012fc:	e7eb      	b.n	80012d6 <__swhatbuf_r+0x22>

080012fe <__smakebuf_r>:
 80012fe:	898b      	ldrh	r3, [r1, #12]
 8001300:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001302:	079d      	lsls	r5, r3, #30
 8001304:	4606      	mov	r6, r0
 8001306:	460c      	mov	r4, r1
 8001308:	d507      	bpl.n	800131a <__smakebuf_r+0x1c>
 800130a:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800130e:	6023      	str	r3, [r4, #0]
 8001310:	6123      	str	r3, [r4, #16]
 8001312:	2301      	movs	r3, #1
 8001314:	6163      	str	r3, [r4, #20]
 8001316:	b002      	add	sp, #8
 8001318:	bd70      	pop	{r4, r5, r6, pc}
 800131a:	466a      	mov	r2, sp
 800131c:	ab01      	add	r3, sp, #4
 800131e:	f7ff ffc9 	bl	80012b4 <__swhatbuf_r>
 8001322:	9900      	ldr	r1, [sp, #0]
 8001324:	4605      	mov	r5, r0
 8001326:	4630      	mov	r0, r6
 8001328:	f7ff fb04 	bl	8000934 <_malloc_r>
 800132c:	b948      	cbnz	r0, 8001342 <__smakebuf_r+0x44>
 800132e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001332:	059a      	lsls	r2, r3, #22
 8001334:	d4ef      	bmi.n	8001316 <__smakebuf_r+0x18>
 8001336:	f023 0303 	bic.w	r3, r3, #3
 800133a:	f043 0302 	orr.w	r3, r3, #2
 800133e:	81a3      	strh	r3, [r4, #12]
 8001340:	e7e3      	b.n	800130a <__smakebuf_r+0xc>
 8001342:	89a3      	ldrh	r3, [r4, #12]
 8001344:	6020      	str	r0, [r4, #0]
 8001346:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800134a:	81a3      	strh	r3, [r4, #12]
 800134c:	9b00      	ldr	r3, [sp, #0]
 800134e:	6120      	str	r0, [r4, #16]
 8001350:	6163      	str	r3, [r4, #20]
 8001352:	9b01      	ldr	r3, [sp, #4]
 8001354:	b15b      	cbz	r3, 800136e <__smakebuf_r+0x70>
 8001356:	4630      	mov	r0, r6
 8001358:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800135c:	f000 f81e 	bl	800139c <_isatty_r>
 8001360:	b128      	cbz	r0, 800136e <__smakebuf_r+0x70>
 8001362:	89a3      	ldrh	r3, [r4, #12]
 8001364:	f023 0303 	bic.w	r3, r3, #3
 8001368:	f043 0301 	orr.w	r3, r3, #1
 800136c:	81a3      	strh	r3, [r4, #12]
 800136e:	89a3      	ldrh	r3, [r4, #12]
 8001370:	431d      	orrs	r5, r3
 8001372:	81a5      	strh	r5, [r4, #12]
 8001374:	e7cf      	b.n	8001316 <__smakebuf_r+0x18>
	...

08001378 <_fstat_r>:
 8001378:	b538      	push	{r3, r4, r5, lr}
 800137a:	2300      	movs	r3, #0
 800137c:	4d06      	ldr	r5, [pc, #24]	; (8001398 <_fstat_r+0x20>)
 800137e:	4604      	mov	r4, r0
 8001380:	4608      	mov	r0, r1
 8001382:	4611      	mov	r1, r2
 8001384:	602b      	str	r3, [r5, #0]
 8001386:	f7fe ff7f 	bl	8000288 <_fstat>
 800138a:	1c43      	adds	r3, r0, #1
 800138c:	d102      	bne.n	8001394 <_fstat_r+0x1c>
 800138e:	682b      	ldr	r3, [r5, #0]
 8001390:	b103      	cbz	r3, 8001394 <_fstat_r+0x1c>
 8001392:	6023      	str	r3, [r4, #0]
 8001394:	bd38      	pop	{r3, r4, r5, pc}
 8001396:	bf00      	nop
 8001398:	200001b8 	.word	0x200001b8

0800139c <_isatty_r>:
 800139c:	b538      	push	{r3, r4, r5, lr}
 800139e:	2300      	movs	r3, #0
 80013a0:	4d05      	ldr	r5, [pc, #20]	; (80013b8 <_isatty_r+0x1c>)
 80013a2:	4604      	mov	r4, r0
 80013a4:	4608      	mov	r0, r1
 80013a6:	602b      	str	r3, [r5, #0]
 80013a8:	f7fe ff7d 	bl	80002a6 <_isatty>
 80013ac:	1c43      	adds	r3, r0, #1
 80013ae:	d102      	bne.n	80013b6 <_isatty_r+0x1a>
 80013b0:	682b      	ldr	r3, [r5, #0]
 80013b2:	b103      	cbz	r3, 80013b6 <_isatty_r+0x1a>
 80013b4:	6023      	str	r3, [r4, #0]
 80013b6:	bd38      	pop	{r3, r4, r5, pc}
 80013b8:	200001b8 	.word	0x200001b8

080013bc <_init>:
 80013bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013be:	bf00      	nop
 80013c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80013c2:	bc08      	pop	{r3}
 80013c4:	469e      	mov	lr, r3
 80013c6:	4770      	bx	lr

080013c8 <_fini>:
 80013c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013ca:	bf00      	nop
 80013cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80013ce:	bc08      	pop	{r3}
 80013d0:	469e      	mov	lr, r3
 80013d2:	4770      	bx	lr
