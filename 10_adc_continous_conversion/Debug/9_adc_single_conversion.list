
9_adc_single_conversion.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000001c8  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080002f8  08000300  00010300  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080002f8  080002f8  00010300  2**0
                  CONTENTS
  4 .ARM          00000000  080002f8  080002f8  00010300  2**0
                  CONTENTS
  5 .preinit_array 00000000  080002f8  08000300  00010300  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080002f8  080002f8  000102f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080002fc  080002fc  000102fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010300  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000000  08000300  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  08000300  00020020  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010300  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00010329  2**0
                  CONTENTS, READONLY
 13 .debug_info   000003a7  00000000  00000000  0001036c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000019d  00000000  00000000  00010713  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000078  00000000  00000000  000108b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000004b  00000000  00000000  00010928  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00010b79  00000000  00000000  00010973  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000ccc  00000000  00000000  000214ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00057b30  00000000  00000000  000221b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000000c8  00000000  00000000  00079ce8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  00079db0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	080002e0 	.word	0x080002e0

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	080002e0 	.word	0x080002e0

08000170 <pa1_adc_init>:
#define CR2_SWSTART       (1U<<30)
#define SR_EOC            (1U<<1)


void pa1_adc_init(void)
{
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
	/*Configure the ADC GPIO pin*/

	/*Enable clock access to GPIOA*/
	RCC->APB2ENR |= GPIOAEN;
 8000174:	4b19      	ldr	r3, [pc, #100]	; (80001dc <pa1_adc_init+0x6c>)
 8000176:	699b      	ldr	r3, [r3, #24]
 8000178:	4a18      	ldr	r2, [pc, #96]	; (80001dc <pa1_adc_init+0x6c>)
 800017a:	f043 0304 	orr.w	r3, r3, #4
 800017e:	6193      	str	r3, [r2, #24]

	/*Set the mode for PA1 to analog*/
	GPIOA->CRL &= ~(1U<<4);
 8000180:	4b17      	ldr	r3, [pc, #92]	; (80001e0 <pa1_adc_init+0x70>)
 8000182:	681b      	ldr	r3, [r3, #0]
 8000184:	4a16      	ldr	r2, [pc, #88]	; (80001e0 <pa1_adc_init+0x70>)
 8000186:	f023 0310 	bic.w	r3, r3, #16
 800018a:	6013      	str	r3, [r2, #0]
	GPIOA->CRL &= ~(1U<<5);
 800018c:	4b14      	ldr	r3, [pc, #80]	; (80001e0 <pa1_adc_init+0x70>)
 800018e:	681b      	ldr	r3, [r3, #0]
 8000190:	4a13      	ldr	r2, [pc, #76]	; (80001e0 <pa1_adc_init+0x70>)
 8000192:	f023 0320 	bic.w	r3, r3, #32
 8000196:	6013      	str	r3, [r2, #0]
	GPIOA->CRL &= ~(1U<<6);
 8000198:	4b11      	ldr	r3, [pc, #68]	; (80001e0 <pa1_adc_init+0x70>)
 800019a:	681b      	ldr	r3, [r3, #0]
 800019c:	4a10      	ldr	r2, [pc, #64]	; (80001e0 <pa1_adc_init+0x70>)
 800019e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80001a2:	6013      	str	r3, [r2, #0]
	GPIOA->CRL &= ~(1U<<7);
 80001a4:	4b0e      	ldr	r3, [pc, #56]	; (80001e0 <pa1_adc_init+0x70>)
 80001a6:	681b      	ldr	r3, [r3, #0]
 80001a8:	4a0d      	ldr	r2, [pc, #52]	; (80001e0 <pa1_adc_init+0x70>)
 80001aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80001ae:	6013      	str	r3, [r2, #0]

	/*Configure the ADC module*/
	/*Clock access to ADC module*/
	RCC->APB2ENR |= ADC1EN;
 80001b0:	4b0a      	ldr	r3, [pc, #40]	; (80001dc <pa1_adc_init+0x6c>)
 80001b2:	699b      	ldr	r3, [r3, #24]
 80001b4:	4a09      	ldr	r2, [pc, #36]	; (80001dc <pa1_adc_init+0x6c>)
 80001b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80001ba:	6193      	str	r3, [r2, #24]

	/*Conversion sequence start*/
	ADC1->SQR3 = ADC_CH1;
 80001bc:	4b09      	ldr	r3, [pc, #36]	; (80001e4 <pa1_adc_init+0x74>)
 80001be:	2201      	movs	r2, #1
 80001c0:	635a      	str	r2, [r3, #52]	; 0x34

	/*Conversion sequence length*/
	ADC1->SQR1 = ADC_SEQ_LEN_1;
 80001c2:	4b08      	ldr	r3, [pc, #32]	; (80001e4 <pa1_adc_init+0x74>)
 80001c4:	2200      	movs	r2, #0
 80001c6:	62da      	str	r2, [r3, #44]	; 0x2c

	/*Enable ADC module*/
	ADC1->CR2 |= CR2_ADON;
 80001c8:	4b06      	ldr	r3, [pc, #24]	; (80001e4 <pa1_adc_init+0x74>)
 80001ca:	689b      	ldr	r3, [r3, #8]
 80001cc:	4a05      	ldr	r2, [pc, #20]	; (80001e4 <pa1_adc_init+0x74>)
 80001ce:	f043 0301 	orr.w	r3, r3, #1
 80001d2:	6093      	str	r3, [r2, #8]

}
 80001d4:	bf00      	nop
 80001d6:	46bd      	mov	sp, r7
 80001d8:	bc80      	pop	{r7}
 80001da:	4770      	bx	lr
 80001dc:	40021000 	.word	0x40021000
 80001e0:	40010800 	.word	0x40010800
 80001e4:	40012400 	.word	0x40012400

080001e8 <start_conversion>:

void start_conversion(void)
{
 80001e8:	b480      	push	{r7}
 80001ea:	af00      	add	r7, sp, #0
	/*start ADC conversion*/
	ADC1->CR2 |= CR2_SWSTART;
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <start_conversion+0x18>)
 80001ee:	689b      	ldr	r3, [r3, #8]
 80001f0:	4a03      	ldr	r2, [pc, #12]	; (8000200 <start_conversion+0x18>)
 80001f2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80001f6:	6093      	str	r3, [r2, #8]
}
 80001f8:	bf00      	nop
 80001fa:	46bd      	mov	sp, r7
 80001fc:	bc80      	pop	{r7}
 80001fe:	4770      	bx	lr
 8000200:	40012400 	.word	0x40012400

08000204 <adc_read>:

uint32_t adc_read()
{
 8000204:	b480      	push	{r7}
 8000206:	af00      	add	r7, sp, #0
	/*wait for conversion to be complete*/
	while(!(ADC1->SR & SR_EOC)){}
 8000208:	bf00      	nop
 800020a:	4b06      	ldr	r3, [pc, #24]	; (8000224 <adc_read+0x20>)
 800020c:	681b      	ldr	r3, [r3, #0]
 800020e:	f003 0302 	and.w	r3, r3, #2
 8000212:	2b00      	cmp	r3, #0
 8000214:	d0f9      	beq.n	800020a <adc_read+0x6>

	/*Read converted result*/
	return (ADC1->DR);
 8000216:	4b03      	ldr	r3, [pc, #12]	; (8000224 <adc_read+0x20>)
 8000218:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800021a:	4618      	mov	r0, r3
 800021c:	46bd      	mov	sp, r7
 800021e:	bc80      	pop	{r7}
 8000220:	4770      	bx	lr
 8000222:	bf00      	nop
 8000224:	40012400 	.word	0x40012400

08000228 <main>:


uint32_t sensor_value;

int main(void)
{
 8000228:	b580      	push	{r7, lr}
 800022a:	af00      	add	r7, sp, #0

	pa1_adc_init();
 800022c:	f7ff ffa0 	bl	8000170 <pa1_adc_init>

	while(1)
	{
		start_conversion();
 8000230:	f7ff ffda 	bl	80001e8 <start_conversion>
		sensor_value = adc_read();
 8000234:	f7ff ffe6 	bl	8000204 <adc_read>
 8000238:	4603      	mov	r3, r0
 800023a:	4a01      	ldr	r2, [pc, #4]	; (8000240 <main+0x18>)
 800023c:	6013      	str	r3, [r2, #0]
		start_conversion();
 800023e:	e7f7      	b.n	8000230 <main+0x8>
 8000240:	2000001c 	.word	0x2000001c

08000244 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000244:	480d      	ldr	r0, [pc, #52]	; (800027c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000246:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000248:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800024c:	480c      	ldr	r0, [pc, #48]	; (8000280 <LoopForever+0x6>)
  ldr r1, =_edata
 800024e:	490d      	ldr	r1, [pc, #52]	; (8000284 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000250:	4a0d      	ldr	r2, [pc, #52]	; (8000288 <LoopForever+0xe>)
  movs r3, #0
 8000252:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000254:	e002      	b.n	800025c <LoopCopyDataInit>

08000256 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000256:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000258:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800025a:	3304      	adds	r3, #4

0800025c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800025c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800025e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000260:	d3f9      	bcc.n	8000256 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000262:	4a0a      	ldr	r2, [pc, #40]	; (800028c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000264:	4c0a      	ldr	r4, [pc, #40]	; (8000290 <LoopForever+0x16>)
  movs r3, #0
 8000266:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000268:	e001      	b.n	800026e <LoopFillZerobss>

0800026a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800026a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800026c:	3204      	adds	r2, #4

0800026e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800026e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000270:	d3fb      	bcc.n	800026a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000272:	f000 f811 	bl	8000298 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000276:	f7ff ffd7 	bl	8000228 <main>

0800027a <LoopForever>:

LoopForever:
  b LoopForever
 800027a:	e7fe      	b.n	800027a <LoopForever>
  ldr   r0, =_estack
 800027c:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000280:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000284:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000288:	08000300 	.word	0x08000300
  ldr r2, =_sbss
 800028c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000290:	20000020 	.word	0x20000020

08000294 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000294:	e7fe      	b.n	8000294 <ADC1_2_IRQHandler>
	...

08000298 <__libc_init_array>:
 8000298:	b570      	push	{r4, r5, r6, lr}
 800029a:	2600      	movs	r6, #0
 800029c:	4d0c      	ldr	r5, [pc, #48]	; (80002d0 <__libc_init_array+0x38>)
 800029e:	4c0d      	ldr	r4, [pc, #52]	; (80002d4 <__libc_init_array+0x3c>)
 80002a0:	1b64      	subs	r4, r4, r5
 80002a2:	10a4      	asrs	r4, r4, #2
 80002a4:	42a6      	cmp	r6, r4
 80002a6:	d109      	bne.n	80002bc <__libc_init_array+0x24>
 80002a8:	f000 f81a 	bl	80002e0 <_init>
 80002ac:	2600      	movs	r6, #0
 80002ae:	4d0a      	ldr	r5, [pc, #40]	; (80002d8 <__libc_init_array+0x40>)
 80002b0:	4c0a      	ldr	r4, [pc, #40]	; (80002dc <__libc_init_array+0x44>)
 80002b2:	1b64      	subs	r4, r4, r5
 80002b4:	10a4      	asrs	r4, r4, #2
 80002b6:	42a6      	cmp	r6, r4
 80002b8:	d105      	bne.n	80002c6 <__libc_init_array+0x2e>
 80002ba:	bd70      	pop	{r4, r5, r6, pc}
 80002bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80002c0:	4798      	blx	r3
 80002c2:	3601      	adds	r6, #1
 80002c4:	e7ee      	b.n	80002a4 <__libc_init_array+0xc>
 80002c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80002ca:	4798      	blx	r3
 80002cc:	3601      	adds	r6, #1
 80002ce:	e7f2      	b.n	80002b6 <__libc_init_array+0x1e>
 80002d0:	080002f8 	.word	0x080002f8
 80002d4:	080002f8 	.word	0x080002f8
 80002d8:	080002f8 	.word	0x080002f8
 80002dc:	080002fc 	.word	0x080002fc

080002e0 <_init>:
 80002e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002e2:	bf00      	nop
 80002e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80002e6:	bc08      	pop	{r3}
 80002e8:	469e      	mov	lr, r3
 80002ea:	4770      	bx	lr

080002ec <_fini>:
 80002ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002ee:	bf00      	nop
 80002f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80002f2:	bc08      	pop	{r3}
 80002f4:	469e      	mov	lr, r3
 80002f6:	4770      	bx	lr
