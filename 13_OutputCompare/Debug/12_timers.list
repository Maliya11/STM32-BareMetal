
12_timers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000124c  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  0800137c  0800137c  0001137c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080013c4  080013c4  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  080013c4  080013c4  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080013c4  080013c4  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080013c4  080013c4  000113c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080013c8  080013c8  000113c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  080013cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000016c  2000005c  08001428  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c8  08001428  000201c8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020085  2**0
                  CONTENTS, READONLY
 13 .debug_info   000010c3  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000057a  00000000  00000000  0002118b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000180  00000000  00000000  00021708  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000105  00000000  00000000  00021888  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002004  00000000  00000000  0002198d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00002123  00000000  00000000  00023991  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00059dbd  00000000  00000000  00025ab4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000c38  00000000  00000000  0007f874  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  000804ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	2000005c 	.word	0x2000005c
 800014c:	00000000 	.word	0x00000000
 8000150:	08001364 	.word	0x08001364

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000060 	.word	0x20000060
 800016c:	08001364 	.word	0x08001364

08000170 <main>:
#define GPIOC_EN           (1U<<4)
#define PIN13              (1U<<13)
#define LED_PIN             PIN13

int main(void)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	af00      	add	r7, sp, #0
	RCC -> APB2ENR |= GPIOC_EN;
 8000174:	4b1c      	ldr	r3, [pc, #112]	; (80001e8 <main+0x78>)
 8000176:	699b      	ldr	r3, [r3, #24]
 8000178:	4a1b      	ldr	r2, [pc, #108]	; (80001e8 <main+0x78>)
 800017a:	f043 0310 	orr.w	r3, r3, #16
 800017e:	6193      	str	r3, [r2, #24]

	GPIOC->CRH |= (1U << 20);
 8000180:	4b1a      	ldr	r3, [pc, #104]	; (80001ec <main+0x7c>)
 8000182:	685b      	ldr	r3, [r3, #4]
 8000184:	4a19      	ldr	r2, [pc, #100]	; (80001ec <main+0x7c>)
 8000186:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800018a:	6053      	str	r3, [r2, #4]
	GPIOC->CRH |= (1U << 21);
 800018c:	4b17      	ldr	r3, [pc, #92]	; (80001ec <main+0x7c>)
 800018e:	685b      	ldr	r3, [r3, #4]
 8000190:	4a16      	ldr	r2, [pc, #88]	; (80001ec <main+0x7c>)
 8000192:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000196:	6053      	str	r3, [r2, #4]
	GPIOC->CRH &= ~(1U << 22);
 8000198:	4b14      	ldr	r3, [pc, #80]	; (80001ec <main+0x7c>)
 800019a:	685b      	ldr	r3, [r3, #4]
 800019c:	4a13      	ldr	r2, [pc, #76]	; (80001ec <main+0x7c>)
 800019e:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80001a2:	6053      	str	r3, [r2, #4]
	GPIOC->CRH &= ~(0U << 23);
 80001a4:	4b11      	ldr	r3, [pc, #68]	; (80001ec <main+0x7c>)
 80001a6:	4a11      	ldr	r2, [pc, #68]	; (80001ec <main+0x7c>)
 80001a8:	685b      	ldr	r3, [r3, #4]
 80001aa:	6053      	str	r3, [r2, #4]

	uart1_tx_init();
 80001ac:	f000 f8ee 	bl	800038c <uart1_tx_init>
	tim2_1Hz_init();
 80001b0:	f000 f8c0 	bl	8000334 <tim2_1Hz_init>

	while(1)
	{
		/*Wait for UIF*/
		while(!(TIM2->SR & SR_UIF)){}
 80001b4:	bf00      	nop
 80001b6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80001ba:	691b      	ldr	r3, [r3, #16]
 80001bc:	f003 0301 	and.w	r3, r3, #1
 80001c0:	2b00      	cmp	r3, #0
 80001c2:	d0f8      	beq.n	80001b6 <main+0x46>

		/*Clear UIF*/
		TIM2->SR &= ~SR_UIF;
 80001c4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80001c8:	691b      	ldr	r3, [r3, #16]
 80001ca:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80001ce:	f023 0301 	bic.w	r3, r3, #1
 80001d2:	6113      	str	r3, [r2, #16]

		printf("A second passed \n\r");
 80001d4:	4806      	ldr	r0, [pc, #24]	; (80001f0 <main+0x80>)
 80001d6:	f000 fa47 	bl	8000668 <iprintf>
		GPIOC->ODR ^= LED_PIN;
 80001da:	4b04      	ldr	r3, [pc, #16]	; (80001ec <main+0x7c>)
 80001dc:	68db      	ldr	r3, [r3, #12]
 80001de:	4a03      	ldr	r2, [pc, #12]	; (80001ec <main+0x7c>)
 80001e0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80001e4:	60d3      	str	r3, [r2, #12]
		while(!(TIM2->SR & SR_UIF)){}
 80001e6:	e7e5      	b.n	80001b4 <main+0x44>
 80001e8:	40021000 	.word	0x40021000
 80001ec:	40011000 	.word	0x40011000
 80001f0:	0800137c 	.word	0x0800137c

080001f4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80001f4:	b580      	push	{r7, lr}
 80001f6:	b086      	sub	sp, #24
 80001f8:	af00      	add	r7, sp, #0
 80001fa:	60f8      	str	r0, [r7, #12]
 80001fc:	60b9      	str	r1, [r7, #8]
 80001fe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000200:	2300      	movs	r3, #0
 8000202:	617b      	str	r3, [r7, #20]
 8000204:	e00a      	b.n	800021c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000206:	f3af 8000 	nop.w
 800020a:	4601      	mov	r1, r0
 800020c:	68bb      	ldr	r3, [r7, #8]
 800020e:	1c5a      	adds	r2, r3, #1
 8000210:	60ba      	str	r2, [r7, #8]
 8000212:	b2ca      	uxtb	r2, r1
 8000214:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000216:	697b      	ldr	r3, [r7, #20]
 8000218:	3301      	adds	r3, #1
 800021a:	617b      	str	r3, [r7, #20]
 800021c:	697a      	ldr	r2, [r7, #20]
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	429a      	cmp	r2, r3
 8000222:	dbf0      	blt.n	8000206 <_read+0x12>
  }

  return len;
 8000224:	687b      	ldr	r3, [r7, #4]
}
 8000226:	4618      	mov	r0, r3
 8000228:	3718      	adds	r7, #24
 800022a:	46bd      	mov	sp, r7
 800022c:	bd80      	pop	{r7, pc}

0800022e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800022e:	b580      	push	{r7, lr}
 8000230:	b086      	sub	sp, #24
 8000232:	af00      	add	r7, sp, #0
 8000234:	60f8      	str	r0, [r7, #12]
 8000236:	60b9      	str	r1, [r7, #8]
 8000238:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800023a:	2300      	movs	r3, #0
 800023c:	617b      	str	r3, [r7, #20]
 800023e:	e009      	b.n	8000254 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000240:	68bb      	ldr	r3, [r7, #8]
 8000242:	1c5a      	adds	r2, r3, #1
 8000244:	60ba      	str	r2, [r7, #8]
 8000246:	781b      	ldrb	r3, [r3, #0]
 8000248:	4618      	mov	r0, r3
 800024a:	f000 f893 	bl	8000374 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800024e:	697b      	ldr	r3, [r7, #20]
 8000250:	3301      	adds	r3, #1
 8000252:	617b      	str	r3, [r7, #20]
 8000254:	697a      	ldr	r2, [r7, #20]
 8000256:	687b      	ldr	r3, [r7, #4]
 8000258:	429a      	cmp	r2, r3
 800025a:	dbf1      	blt.n	8000240 <_write+0x12>
  }
  return len;
 800025c:	687b      	ldr	r3, [r7, #4]
}
 800025e:	4618      	mov	r0, r3
 8000260:	3718      	adds	r7, #24
 8000262:	46bd      	mov	sp, r7
 8000264:	bd80      	pop	{r7, pc}

08000266 <_close>:

int _close(int file)
{
 8000266:	b480      	push	{r7}
 8000268:	b083      	sub	sp, #12
 800026a:	af00      	add	r7, sp, #0
 800026c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800026e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000272:	4618      	mov	r0, r3
 8000274:	370c      	adds	r7, #12
 8000276:	46bd      	mov	sp, r7
 8000278:	bc80      	pop	{r7}
 800027a:	4770      	bx	lr

0800027c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800027c:	b480      	push	{r7}
 800027e:	b083      	sub	sp, #12
 8000280:	af00      	add	r7, sp, #0
 8000282:	6078      	str	r0, [r7, #4]
 8000284:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000286:	683b      	ldr	r3, [r7, #0]
 8000288:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800028c:	605a      	str	r2, [r3, #4]
  return 0;
 800028e:	2300      	movs	r3, #0
}
 8000290:	4618      	mov	r0, r3
 8000292:	370c      	adds	r7, #12
 8000294:	46bd      	mov	sp, r7
 8000296:	bc80      	pop	{r7}
 8000298:	4770      	bx	lr

0800029a <_isatty>:

int _isatty(int file)
{
 800029a:	b480      	push	{r7}
 800029c:	b083      	sub	sp, #12
 800029e:	af00      	add	r7, sp, #0
 80002a0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80002a2:	2301      	movs	r3, #1
}
 80002a4:	4618      	mov	r0, r3
 80002a6:	370c      	adds	r7, #12
 80002a8:	46bd      	mov	sp, r7
 80002aa:	bc80      	pop	{r7}
 80002ac:	4770      	bx	lr

080002ae <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80002ae:	b480      	push	{r7}
 80002b0:	b085      	sub	sp, #20
 80002b2:	af00      	add	r7, sp, #0
 80002b4:	60f8      	str	r0, [r7, #12]
 80002b6:	60b9      	str	r1, [r7, #8]
 80002b8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80002ba:	2300      	movs	r3, #0
}
 80002bc:	4618      	mov	r0, r3
 80002be:	3714      	adds	r7, #20
 80002c0:	46bd      	mov	sp, r7
 80002c2:	bc80      	pop	{r7}
 80002c4:	4770      	bx	lr
	...

080002c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80002c8:	b580      	push	{r7, lr}
 80002ca:	b086      	sub	sp, #24
 80002cc:	af00      	add	r7, sp, #0
 80002ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80002d0:	4a14      	ldr	r2, [pc, #80]	; (8000324 <_sbrk+0x5c>)
 80002d2:	4b15      	ldr	r3, [pc, #84]	; (8000328 <_sbrk+0x60>)
 80002d4:	1ad3      	subs	r3, r2, r3
 80002d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80002d8:	697b      	ldr	r3, [r7, #20]
 80002da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80002dc:	4b13      	ldr	r3, [pc, #76]	; (800032c <_sbrk+0x64>)
 80002de:	681b      	ldr	r3, [r3, #0]
 80002e0:	2b00      	cmp	r3, #0
 80002e2:	d102      	bne.n	80002ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80002e4:	4b11      	ldr	r3, [pc, #68]	; (800032c <_sbrk+0x64>)
 80002e6:	4a12      	ldr	r2, [pc, #72]	; (8000330 <_sbrk+0x68>)
 80002e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80002ea:	4b10      	ldr	r3, [pc, #64]	; (800032c <_sbrk+0x64>)
 80002ec:	681a      	ldr	r2, [r3, #0]
 80002ee:	687b      	ldr	r3, [r7, #4]
 80002f0:	4413      	add	r3, r2
 80002f2:	693a      	ldr	r2, [r7, #16]
 80002f4:	429a      	cmp	r2, r3
 80002f6:	d207      	bcs.n	8000308 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80002f8:	f000 fa5a 	bl	80007b0 <__errno>
 80002fc:	4603      	mov	r3, r0
 80002fe:	220c      	movs	r2, #12
 8000300:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000302:	f04f 33ff 	mov.w	r3, #4294967295
 8000306:	e009      	b.n	800031c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000308:	4b08      	ldr	r3, [pc, #32]	; (800032c <_sbrk+0x64>)
 800030a:	681b      	ldr	r3, [r3, #0]
 800030c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800030e:	4b07      	ldr	r3, [pc, #28]	; (800032c <_sbrk+0x64>)
 8000310:	681a      	ldr	r2, [r3, #0]
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	4413      	add	r3, r2
 8000316:	4a05      	ldr	r2, [pc, #20]	; (800032c <_sbrk+0x64>)
 8000318:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800031a:	68fb      	ldr	r3, [r7, #12]
}
 800031c:	4618      	mov	r0, r3
 800031e:	3718      	adds	r7, #24
 8000320:	46bd      	mov	sp, r7
 8000322:	bd80      	pop	{r7, pc}
 8000324:	20005000 	.word	0x20005000
 8000328:	00000400 	.word	0x00000400
 800032c:	20000078 	.word	0x20000078
 8000330:	200001c8 	.word	0x200001c8

08000334 <tim2_1Hz_init>:
#define TIM2EN      (1U<<0)
#define CR1_CEN     (1U<<0)


void tim2_1Hz_init(void)
{
 8000334:	b480      	push	{r7}
 8000336:	af00      	add	r7, sp, #0
	/*Enable clock access to TIM2*/
	RCC->APB1ENR |= TIM2EN;
 8000338:	4b0d      	ldr	r3, [pc, #52]	; (8000370 <tim2_1Hz_init+0x3c>)
 800033a:	69db      	ldr	r3, [r3, #28]
 800033c:	4a0c      	ldr	r2, [pc, #48]	; (8000370 <tim2_1Hz_init+0x3c>)
 800033e:	f043 0301 	orr.w	r3, r3, #1
 8000342:	61d3      	str	r3, [r2, #28]

	/*Set pre-scalar value*/
	TIM2->PSC = 1600-1;  /* 16MHz/1600 = 10kHz */
 8000344:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000348:	f240 623f 	movw	r2, #1599	; 0x63f
 800034c:	629a      	str	r2, [r3, #40]	; 0x28

	/*Set auto reload value*/
	TIM2->ARR = 10000 - 1; /* 10kHz/10000 = 1Hz */
 800034e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000352:	f242 720f 	movw	r2, #9999	; 0x270f
 8000356:	62da      	str	r2, [r3, #44]	; 0x2c

	/*clean counter*/
	TIM2->CNT = 0;
 8000358:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800035c:	2200      	movs	r2, #0
 800035e:	625a      	str	r2, [r3, #36]	; 0x24

	/*Enable timer*/
	TIM2->CR1 = CR1_CEN;
 8000360:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000364:	2201      	movs	r2, #1
 8000366:	601a      	str	r2, [r3, #0]
}
 8000368:	bf00      	nop
 800036a:	46bd      	mov	sp, r7
 800036c:	bc80      	pop	{r7}
 800036e:	4770      	bx	lr
 8000370:	40021000 	.word	0x40021000

08000374 <__io_putchar>:
static uint16_t compute_uart_bd(uint32_t PeriphClk, uint32_t BaudRate);

void uart1_write(int ch);

int __io_putchar(int ch)
{
 8000374:	b580      	push	{r7, lr}
 8000376:	b082      	sub	sp, #8
 8000378:	af00      	add	r7, sp, #0
 800037a:	6078      	str	r0, [r7, #4]
	uart1_write(ch);
 800037c:	6878      	ldr	r0, [r7, #4]
 800037e:	f000 f84d 	bl	800041c <uart1_write>
	return ch;
 8000382:	687b      	ldr	r3, [r7, #4]
}
 8000384:	4618      	mov	r0, r3
 8000386:	3708      	adds	r7, #8
 8000388:	46bd      	mov	sp, r7
 800038a:	bd80      	pop	{r7, pc}

0800038c <uart1_tx_init>:
	/*Enable uart module*/
	USART1->CR1 |= CR1_UE;
}

void uart1_tx_init(void)
{
 800038c:	b580      	push	{r7, lr}
 800038e:	af00      	add	r7, sp, #0
	/*******Configure usart gpio pins*********/
	/*Enable clock access to gpioa*/
	RCC->APB2ENR |= GPIOA_EN;
 8000390:	4b1d      	ldr	r3, [pc, #116]	; (8000408 <uart1_tx_init+0x7c>)
 8000392:	699b      	ldr	r3, [r3, #24]
 8000394:	4a1c      	ldr	r2, [pc, #112]	; (8000408 <uart1_tx_init+0x7c>)
 8000396:	f043 0304 	orr.w	r3, r3, #4
 800039a:	6193      	str	r3, [r2, #24]

	/*Set PA9 to alternate function mode*/
	GPIOA->CRH |= (1U<<4);
 800039c:	4b1b      	ldr	r3, [pc, #108]	; (800040c <uart1_tx_init+0x80>)
 800039e:	685b      	ldr	r3, [r3, #4]
 80003a0:	4a1a      	ldr	r2, [pc, #104]	; (800040c <uart1_tx_init+0x80>)
 80003a2:	f043 0310 	orr.w	r3, r3, #16
 80003a6:	6053      	str	r3, [r2, #4]
	GPIOA->CRH |= (1U<<5);
 80003a8:	4b18      	ldr	r3, [pc, #96]	; (800040c <uart1_tx_init+0x80>)
 80003aa:	685b      	ldr	r3, [r3, #4]
 80003ac:	4a17      	ldr	r2, [pc, #92]	; (800040c <uart1_tx_init+0x80>)
 80003ae:	f043 0320 	orr.w	r3, r3, #32
 80003b2:	6053      	str	r3, [r2, #4]
	GPIOA->CRH &= ~(1U<<6);
 80003b4:	4b15      	ldr	r3, [pc, #84]	; (800040c <uart1_tx_init+0x80>)
 80003b6:	685b      	ldr	r3, [r3, #4]
 80003b8:	4a14      	ldr	r2, [pc, #80]	; (800040c <uart1_tx_init+0x80>)
 80003ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80003be:	6053      	str	r3, [r2, #4]
	GPIOA->CRH |= (1U<<7);
 80003c0:	4b12      	ldr	r3, [pc, #72]	; (800040c <uart1_tx_init+0x80>)
 80003c2:	685b      	ldr	r3, [r3, #4]
 80003c4:	4a11      	ldr	r2, [pc, #68]	; (800040c <uart1_tx_init+0x80>)
 80003c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80003ca:	6053      	str	r3, [r2, #4]

	/*Set PA2 type to UART_TX*/
	AFIO->MAPR &= ~(1U<<2);
 80003cc:	4b10      	ldr	r3, [pc, #64]	; (8000410 <uart1_tx_init+0x84>)
 80003ce:	685b      	ldr	r3, [r3, #4]
 80003d0:	4a0f      	ldr	r2, [pc, #60]	; (8000410 <uart1_tx_init+0x84>)
 80003d2:	f023 0304 	bic.w	r3, r3, #4
 80003d6:	6053      	str	r3, [r2, #4]

	/**********Configure uart module**************/
	/*Enable clock access to uart1*/
	RCC->APB2ENR |= UART1_EN;
 80003d8:	4b0b      	ldr	r3, [pc, #44]	; (8000408 <uart1_tx_init+0x7c>)
 80003da:	699b      	ldr	r3, [r3, #24]
 80003dc:	4a0a      	ldr	r2, [pc, #40]	; (8000408 <uart1_tx_init+0x7c>)
 80003de:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80003e2:	6193      	str	r3, [r2, #24]

	/*configure baudrate*/
	uart_set_baudrate(USART1,APB2_CLK,UART_BAUDRATE);
 80003e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80003e8:	490a      	ldr	r1, [pc, #40]	; (8000414 <uart1_tx_init+0x88>)
 80003ea:	480b      	ldr	r0, [pc, #44]	; (8000418 <uart1_tx_init+0x8c>)
 80003ec:	f000 f82c 	bl	8000448 <uart_set_baudrate>

	/*Configure transfer direction*/
	USART1->CR1 = CR1_TE;  //SETTING THE VALUE
 80003f0:	4b09      	ldr	r3, [pc, #36]	; (8000418 <uart1_tx_init+0x8c>)
 80003f2:	2208      	movs	r2, #8
 80003f4:	60da      	str	r2, [r3, #12]
	//TO ERASE THE UART REGISTER

	/*Enable uart module*/
	USART1->CR1 |= CR1_UE;
 80003f6:	4b08      	ldr	r3, [pc, #32]	; (8000418 <uart1_tx_init+0x8c>)
 80003f8:	68db      	ldr	r3, [r3, #12]
 80003fa:	4a07      	ldr	r2, [pc, #28]	; (8000418 <uart1_tx_init+0x8c>)
 80003fc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000400:	60d3      	str	r3, [r2, #12]
}
 8000402:	bf00      	nop
 8000404:	bd80      	pop	{r7, pc}
 8000406:	bf00      	nop
 8000408:	40021000 	.word	0x40021000
 800040c:	40010800 	.word	0x40010800
 8000410:	40010000 	.word	0x40010000
 8000414:	00f42400 	.word	0x00f42400
 8000418:	40013800 	.word	0x40013800

0800041c <uart1_write>:
	/*Read data*/
	return USART1->DR;
}

void uart1_write(int ch)
{
 800041c:	b480      	push	{r7}
 800041e:	b083      	sub	sp, #12
 8000420:	af00      	add	r7, sp, #0
 8000422:	6078      	str	r0, [r7, #4]
	/*Make sure transmit data register is empty*/
	while(!(USART1->SR & SR_TXE)){}
 8000424:	bf00      	nop
 8000426:	4b07      	ldr	r3, [pc, #28]	; (8000444 <uart1_write+0x28>)
 8000428:	681b      	ldr	r3, [r3, #0]
 800042a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800042e:	2b00      	cmp	r3, #0
 8000430:	d0f9      	beq.n	8000426 <uart1_write+0xa>

	/*Write to transmit data register*/
	USART1->DR = (ch & 0xFF); //to transmit 8 bit
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	4a03      	ldr	r2, [pc, #12]	; (8000444 <uart1_write+0x28>)
 8000436:	b2db      	uxtb	r3, r3
 8000438:	6053      	str	r3, [r2, #4]

}
 800043a:	bf00      	nop
 800043c:	370c      	adds	r7, #12
 800043e:	46bd      	mov	sp, r7
 8000440:	bc80      	pop	{r7}
 8000442:	4770      	bx	lr
 8000444:	40013800 	.word	0x40013800

08000448 <uart_set_baudrate>:

static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t BaudRate)
{
 8000448:	b580      	push	{r7, lr}
 800044a:	b084      	sub	sp, #16
 800044c:	af00      	add	r7, sp, #0
 800044e:	60f8      	str	r0, [r7, #12]
 8000450:	60b9      	str	r1, [r7, #8]
 8000452:	607a      	str	r2, [r7, #4]
	USARTx->BRR = compute_uart_bd(PeriphClk, BaudRate);
 8000454:	6879      	ldr	r1, [r7, #4]
 8000456:	68b8      	ldr	r0, [r7, #8]
 8000458:	f000 f808 	bl	800046c <compute_uart_bd>
 800045c:	4603      	mov	r3, r0
 800045e:	461a      	mov	r2, r3
 8000460:	68fb      	ldr	r3, [r7, #12]
 8000462:	609a      	str	r2, [r3, #8]
}
 8000464:	bf00      	nop
 8000466:	3710      	adds	r7, #16
 8000468:	46bd      	mov	sp, r7
 800046a:	bd80      	pop	{r7, pc}

0800046c <compute_uart_bd>:

static uint16_t compute_uart_bd(uint32_t PeriphClk, uint32_t BaudRate)
{
 800046c:	b480      	push	{r7}
 800046e:	b083      	sub	sp, #12
 8000470:	af00      	add	r7, sp, #0
 8000472:	6078      	str	r0, [r7, #4]
 8000474:	6039      	str	r1, [r7, #0]
	return ((PeriphClk + (BaudRate/2U))/BaudRate);
 8000476:	683b      	ldr	r3, [r7, #0]
 8000478:	085a      	lsrs	r2, r3, #1
 800047a:	687b      	ldr	r3, [r7, #4]
 800047c:	441a      	add	r2, r3
 800047e:	683b      	ldr	r3, [r7, #0]
 8000480:	fbb2 f3f3 	udiv	r3, r2, r3
 8000484:	b29b      	uxth	r3, r3
}
 8000486:	4618      	mov	r0, r3
 8000488:	370c      	adds	r7, #12
 800048a:	46bd      	mov	sp, r7
 800048c:	bc80      	pop	{r7}
 800048e:	4770      	bx	lr

08000490 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000490:	480d      	ldr	r0, [pc, #52]	; (80004c8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000492:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000494:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000498:	480c      	ldr	r0, [pc, #48]	; (80004cc <LoopForever+0x6>)
  ldr r1, =_edata
 800049a:	490d      	ldr	r1, [pc, #52]	; (80004d0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800049c:	4a0d      	ldr	r2, [pc, #52]	; (80004d4 <LoopForever+0xe>)
  movs r3, #0
 800049e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004a0:	e002      	b.n	80004a8 <LoopCopyDataInit>

080004a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004a6:	3304      	adds	r3, #4

080004a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004ac:	d3f9      	bcc.n	80004a2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004ae:	4a0a      	ldr	r2, [pc, #40]	; (80004d8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80004b0:	4c0a      	ldr	r4, [pc, #40]	; (80004dc <LoopForever+0x16>)
  movs r3, #0
 80004b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004b4:	e001      	b.n	80004ba <LoopFillZerobss>

080004b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80004b8:	3204      	adds	r2, #4

080004ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80004ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80004bc:	d3fb      	bcc.n	80004b6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80004be:	f000 f97d 	bl	80007bc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80004c2:	f7ff fe55 	bl	8000170 <main>

080004c6 <LoopForever>:

LoopForever:
  b LoopForever
 80004c6:	e7fe      	b.n	80004c6 <LoopForever>
  ldr   r0, =_estack
 80004c8:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80004cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80004d0:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80004d4:	080013cc 	.word	0x080013cc
  ldr r2, =_sbss
 80004d8:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80004dc:	200001c8 	.word	0x200001c8

080004e0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80004e0:	e7fe      	b.n	80004e0 <ADC1_2_IRQHandler>
	...

080004e4 <std>:
 80004e4:	2300      	movs	r3, #0
 80004e6:	b510      	push	{r4, lr}
 80004e8:	4604      	mov	r4, r0
 80004ea:	e9c0 3300 	strd	r3, r3, [r0]
 80004ee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80004f2:	6083      	str	r3, [r0, #8]
 80004f4:	8181      	strh	r1, [r0, #12]
 80004f6:	6643      	str	r3, [r0, #100]	; 0x64
 80004f8:	81c2      	strh	r2, [r0, #14]
 80004fa:	6183      	str	r3, [r0, #24]
 80004fc:	4619      	mov	r1, r3
 80004fe:	2208      	movs	r2, #8
 8000500:	305c      	adds	r0, #92	; 0x5c
 8000502:	f000 f906 	bl	8000712 <memset>
 8000506:	4b0d      	ldr	r3, [pc, #52]	; (800053c <std+0x58>)
 8000508:	6224      	str	r4, [r4, #32]
 800050a:	6263      	str	r3, [r4, #36]	; 0x24
 800050c:	4b0c      	ldr	r3, [pc, #48]	; (8000540 <std+0x5c>)
 800050e:	62a3      	str	r3, [r4, #40]	; 0x28
 8000510:	4b0c      	ldr	r3, [pc, #48]	; (8000544 <std+0x60>)
 8000512:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000514:	4b0c      	ldr	r3, [pc, #48]	; (8000548 <std+0x64>)
 8000516:	6323      	str	r3, [r4, #48]	; 0x30
 8000518:	4b0c      	ldr	r3, [pc, #48]	; (800054c <std+0x68>)
 800051a:	429c      	cmp	r4, r3
 800051c:	d006      	beq.n	800052c <std+0x48>
 800051e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8000522:	4294      	cmp	r4, r2
 8000524:	d002      	beq.n	800052c <std+0x48>
 8000526:	33d0      	adds	r3, #208	; 0xd0
 8000528:	429c      	cmp	r4, r3
 800052a:	d105      	bne.n	8000538 <std+0x54>
 800052c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8000530:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000534:	f000 b966 	b.w	8000804 <__retarget_lock_init_recursive>
 8000538:	bd10      	pop	{r4, pc}
 800053a:	bf00      	nop
 800053c:	0800068d 	.word	0x0800068d
 8000540:	080006af 	.word	0x080006af
 8000544:	080006e7 	.word	0x080006e7
 8000548:	0800070b 	.word	0x0800070b
 800054c:	2000007c 	.word	0x2000007c

08000550 <stdio_exit_handler>:
 8000550:	4a02      	ldr	r2, [pc, #8]	; (800055c <stdio_exit_handler+0xc>)
 8000552:	4903      	ldr	r1, [pc, #12]	; (8000560 <stdio_exit_handler+0x10>)
 8000554:	4803      	ldr	r0, [pc, #12]	; (8000564 <stdio_exit_handler+0x14>)
 8000556:	f000 b869 	b.w	800062c <_fwalk_sglue>
 800055a:	bf00      	nop
 800055c:	20000000 	.word	0x20000000
 8000560:	080010a5 	.word	0x080010a5
 8000564:	2000000c 	.word	0x2000000c

08000568 <cleanup_stdio>:
 8000568:	6841      	ldr	r1, [r0, #4]
 800056a:	4b0c      	ldr	r3, [pc, #48]	; (800059c <cleanup_stdio+0x34>)
 800056c:	b510      	push	{r4, lr}
 800056e:	4299      	cmp	r1, r3
 8000570:	4604      	mov	r4, r0
 8000572:	d001      	beq.n	8000578 <cleanup_stdio+0x10>
 8000574:	f000 fd96 	bl	80010a4 <_fflush_r>
 8000578:	68a1      	ldr	r1, [r4, #8]
 800057a:	4b09      	ldr	r3, [pc, #36]	; (80005a0 <cleanup_stdio+0x38>)
 800057c:	4299      	cmp	r1, r3
 800057e:	d002      	beq.n	8000586 <cleanup_stdio+0x1e>
 8000580:	4620      	mov	r0, r4
 8000582:	f000 fd8f 	bl	80010a4 <_fflush_r>
 8000586:	68e1      	ldr	r1, [r4, #12]
 8000588:	4b06      	ldr	r3, [pc, #24]	; (80005a4 <cleanup_stdio+0x3c>)
 800058a:	4299      	cmp	r1, r3
 800058c:	d004      	beq.n	8000598 <cleanup_stdio+0x30>
 800058e:	4620      	mov	r0, r4
 8000590:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000594:	f000 bd86 	b.w	80010a4 <_fflush_r>
 8000598:	bd10      	pop	{r4, pc}
 800059a:	bf00      	nop
 800059c:	2000007c 	.word	0x2000007c
 80005a0:	200000e4 	.word	0x200000e4
 80005a4:	2000014c 	.word	0x2000014c

080005a8 <global_stdio_init.part.0>:
 80005a8:	b510      	push	{r4, lr}
 80005aa:	4b0b      	ldr	r3, [pc, #44]	; (80005d8 <global_stdio_init.part.0+0x30>)
 80005ac:	4c0b      	ldr	r4, [pc, #44]	; (80005dc <global_stdio_init.part.0+0x34>)
 80005ae:	4a0c      	ldr	r2, [pc, #48]	; (80005e0 <global_stdio_init.part.0+0x38>)
 80005b0:	4620      	mov	r0, r4
 80005b2:	601a      	str	r2, [r3, #0]
 80005b4:	2104      	movs	r1, #4
 80005b6:	2200      	movs	r2, #0
 80005b8:	f7ff ff94 	bl	80004e4 <std>
 80005bc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80005c0:	2201      	movs	r2, #1
 80005c2:	2109      	movs	r1, #9
 80005c4:	f7ff ff8e 	bl	80004e4 <std>
 80005c8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80005cc:	2202      	movs	r2, #2
 80005ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80005d2:	2112      	movs	r1, #18
 80005d4:	f7ff bf86 	b.w	80004e4 <std>
 80005d8:	200001b4 	.word	0x200001b4
 80005dc:	2000007c 	.word	0x2000007c
 80005e0:	08000551 	.word	0x08000551

080005e4 <__sfp_lock_acquire>:
 80005e4:	4801      	ldr	r0, [pc, #4]	; (80005ec <__sfp_lock_acquire+0x8>)
 80005e6:	f000 b90e 	b.w	8000806 <__retarget_lock_acquire_recursive>
 80005ea:	bf00      	nop
 80005ec:	200001bd 	.word	0x200001bd

080005f0 <__sfp_lock_release>:
 80005f0:	4801      	ldr	r0, [pc, #4]	; (80005f8 <__sfp_lock_release+0x8>)
 80005f2:	f000 b909 	b.w	8000808 <__retarget_lock_release_recursive>
 80005f6:	bf00      	nop
 80005f8:	200001bd 	.word	0x200001bd

080005fc <__sinit>:
 80005fc:	b510      	push	{r4, lr}
 80005fe:	4604      	mov	r4, r0
 8000600:	f7ff fff0 	bl	80005e4 <__sfp_lock_acquire>
 8000604:	6a23      	ldr	r3, [r4, #32]
 8000606:	b11b      	cbz	r3, 8000610 <__sinit+0x14>
 8000608:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800060c:	f7ff bff0 	b.w	80005f0 <__sfp_lock_release>
 8000610:	4b04      	ldr	r3, [pc, #16]	; (8000624 <__sinit+0x28>)
 8000612:	6223      	str	r3, [r4, #32]
 8000614:	4b04      	ldr	r3, [pc, #16]	; (8000628 <__sinit+0x2c>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	2b00      	cmp	r3, #0
 800061a:	d1f5      	bne.n	8000608 <__sinit+0xc>
 800061c:	f7ff ffc4 	bl	80005a8 <global_stdio_init.part.0>
 8000620:	e7f2      	b.n	8000608 <__sinit+0xc>
 8000622:	bf00      	nop
 8000624:	08000569 	.word	0x08000569
 8000628:	200001b4 	.word	0x200001b4

0800062c <_fwalk_sglue>:
 800062c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000630:	4607      	mov	r7, r0
 8000632:	4688      	mov	r8, r1
 8000634:	4614      	mov	r4, r2
 8000636:	2600      	movs	r6, #0
 8000638:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800063c:	f1b9 0901 	subs.w	r9, r9, #1
 8000640:	d505      	bpl.n	800064e <_fwalk_sglue+0x22>
 8000642:	6824      	ldr	r4, [r4, #0]
 8000644:	2c00      	cmp	r4, #0
 8000646:	d1f7      	bne.n	8000638 <_fwalk_sglue+0xc>
 8000648:	4630      	mov	r0, r6
 800064a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800064e:	89ab      	ldrh	r3, [r5, #12]
 8000650:	2b01      	cmp	r3, #1
 8000652:	d907      	bls.n	8000664 <_fwalk_sglue+0x38>
 8000654:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000658:	3301      	adds	r3, #1
 800065a:	d003      	beq.n	8000664 <_fwalk_sglue+0x38>
 800065c:	4629      	mov	r1, r5
 800065e:	4638      	mov	r0, r7
 8000660:	47c0      	blx	r8
 8000662:	4306      	orrs	r6, r0
 8000664:	3568      	adds	r5, #104	; 0x68
 8000666:	e7e9      	b.n	800063c <_fwalk_sglue+0x10>

08000668 <iprintf>:
 8000668:	b40f      	push	{r0, r1, r2, r3}
 800066a:	b507      	push	{r0, r1, r2, lr}
 800066c:	4906      	ldr	r1, [pc, #24]	; (8000688 <iprintf+0x20>)
 800066e:	ab04      	add	r3, sp, #16
 8000670:	6808      	ldr	r0, [r1, #0]
 8000672:	f853 2b04 	ldr.w	r2, [r3], #4
 8000676:	6881      	ldr	r1, [r0, #8]
 8000678:	9301      	str	r3, [sp, #4]
 800067a:	f000 f9e3 	bl	8000a44 <_vfiprintf_r>
 800067e:	b003      	add	sp, #12
 8000680:	f85d eb04 	ldr.w	lr, [sp], #4
 8000684:	b004      	add	sp, #16
 8000686:	4770      	bx	lr
 8000688:	20000058 	.word	0x20000058

0800068c <__sread>:
 800068c:	b510      	push	{r4, lr}
 800068e:	460c      	mov	r4, r1
 8000690:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000694:	f000 f868 	bl	8000768 <_read_r>
 8000698:	2800      	cmp	r0, #0
 800069a:	bfab      	itete	ge
 800069c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800069e:	89a3      	ldrhlt	r3, [r4, #12]
 80006a0:	181b      	addge	r3, r3, r0
 80006a2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80006a6:	bfac      	ite	ge
 80006a8:	6563      	strge	r3, [r4, #84]	; 0x54
 80006aa:	81a3      	strhlt	r3, [r4, #12]
 80006ac:	bd10      	pop	{r4, pc}

080006ae <__swrite>:
 80006ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80006b2:	461f      	mov	r7, r3
 80006b4:	898b      	ldrh	r3, [r1, #12]
 80006b6:	4605      	mov	r5, r0
 80006b8:	05db      	lsls	r3, r3, #23
 80006ba:	460c      	mov	r4, r1
 80006bc:	4616      	mov	r6, r2
 80006be:	d505      	bpl.n	80006cc <__swrite+0x1e>
 80006c0:	2302      	movs	r3, #2
 80006c2:	2200      	movs	r2, #0
 80006c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80006c8:	f000 f83c 	bl	8000744 <_lseek_r>
 80006cc:	89a3      	ldrh	r3, [r4, #12]
 80006ce:	4632      	mov	r2, r6
 80006d0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80006d4:	81a3      	strh	r3, [r4, #12]
 80006d6:	4628      	mov	r0, r5
 80006d8:	463b      	mov	r3, r7
 80006da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80006de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80006e2:	f000 b853 	b.w	800078c <_write_r>

080006e6 <__sseek>:
 80006e6:	b510      	push	{r4, lr}
 80006e8:	460c      	mov	r4, r1
 80006ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80006ee:	f000 f829 	bl	8000744 <_lseek_r>
 80006f2:	1c43      	adds	r3, r0, #1
 80006f4:	89a3      	ldrh	r3, [r4, #12]
 80006f6:	bf15      	itete	ne
 80006f8:	6560      	strne	r0, [r4, #84]	; 0x54
 80006fa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80006fe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8000702:	81a3      	strheq	r3, [r4, #12]
 8000704:	bf18      	it	ne
 8000706:	81a3      	strhne	r3, [r4, #12]
 8000708:	bd10      	pop	{r4, pc}

0800070a <__sclose>:
 800070a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800070e:	f000 b809 	b.w	8000724 <_close_r>

08000712 <memset>:
 8000712:	4603      	mov	r3, r0
 8000714:	4402      	add	r2, r0
 8000716:	4293      	cmp	r3, r2
 8000718:	d100      	bne.n	800071c <memset+0xa>
 800071a:	4770      	bx	lr
 800071c:	f803 1b01 	strb.w	r1, [r3], #1
 8000720:	e7f9      	b.n	8000716 <memset+0x4>
	...

08000724 <_close_r>:
 8000724:	b538      	push	{r3, r4, r5, lr}
 8000726:	2300      	movs	r3, #0
 8000728:	4d05      	ldr	r5, [pc, #20]	; (8000740 <_close_r+0x1c>)
 800072a:	4604      	mov	r4, r0
 800072c:	4608      	mov	r0, r1
 800072e:	602b      	str	r3, [r5, #0]
 8000730:	f7ff fd99 	bl	8000266 <_close>
 8000734:	1c43      	adds	r3, r0, #1
 8000736:	d102      	bne.n	800073e <_close_r+0x1a>
 8000738:	682b      	ldr	r3, [r5, #0]
 800073a:	b103      	cbz	r3, 800073e <_close_r+0x1a>
 800073c:	6023      	str	r3, [r4, #0]
 800073e:	bd38      	pop	{r3, r4, r5, pc}
 8000740:	200001b8 	.word	0x200001b8

08000744 <_lseek_r>:
 8000744:	b538      	push	{r3, r4, r5, lr}
 8000746:	4604      	mov	r4, r0
 8000748:	4608      	mov	r0, r1
 800074a:	4611      	mov	r1, r2
 800074c:	2200      	movs	r2, #0
 800074e:	4d05      	ldr	r5, [pc, #20]	; (8000764 <_lseek_r+0x20>)
 8000750:	602a      	str	r2, [r5, #0]
 8000752:	461a      	mov	r2, r3
 8000754:	f7ff fdab 	bl	80002ae <_lseek>
 8000758:	1c43      	adds	r3, r0, #1
 800075a:	d102      	bne.n	8000762 <_lseek_r+0x1e>
 800075c:	682b      	ldr	r3, [r5, #0]
 800075e:	b103      	cbz	r3, 8000762 <_lseek_r+0x1e>
 8000760:	6023      	str	r3, [r4, #0]
 8000762:	bd38      	pop	{r3, r4, r5, pc}
 8000764:	200001b8 	.word	0x200001b8

08000768 <_read_r>:
 8000768:	b538      	push	{r3, r4, r5, lr}
 800076a:	4604      	mov	r4, r0
 800076c:	4608      	mov	r0, r1
 800076e:	4611      	mov	r1, r2
 8000770:	2200      	movs	r2, #0
 8000772:	4d05      	ldr	r5, [pc, #20]	; (8000788 <_read_r+0x20>)
 8000774:	602a      	str	r2, [r5, #0]
 8000776:	461a      	mov	r2, r3
 8000778:	f7ff fd3c 	bl	80001f4 <_read>
 800077c:	1c43      	adds	r3, r0, #1
 800077e:	d102      	bne.n	8000786 <_read_r+0x1e>
 8000780:	682b      	ldr	r3, [r5, #0]
 8000782:	b103      	cbz	r3, 8000786 <_read_r+0x1e>
 8000784:	6023      	str	r3, [r4, #0]
 8000786:	bd38      	pop	{r3, r4, r5, pc}
 8000788:	200001b8 	.word	0x200001b8

0800078c <_write_r>:
 800078c:	b538      	push	{r3, r4, r5, lr}
 800078e:	4604      	mov	r4, r0
 8000790:	4608      	mov	r0, r1
 8000792:	4611      	mov	r1, r2
 8000794:	2200      	movs	r2, #0
 8000796:	4d05      	ldr	r5, [pc, #20]	; (80007ac <_write_r+0x20>)
 8000798:	602a      	str	r2, [r5, #0]
 800079a:	461a      	mov	r2, r3
 800079c:	f7ff fd47 	bl	800022e <_write>
 80007a0:	1c43      	adds	r3, r0, #1
 80007a2:	d102      	bne.n	80007aa <_write_r+0x1e>
 80007a4:	682b      	ldr	r3, [r5, #0]
 80007a6:	b103      	cbz	r3, 80007aa <_write_r+0x1e>
 80007a8:	6023      	str	r3, [r4, #0]
 80007aa:	bd38      	pop	{r3, r4, r5, pc}
 80007ac:	200001b8 	.word	0x200001b8

080007b0 <__errno>:
 80007b0:	4b01      	ldr	r3, [pc, #4]	; (80007b8 <__errno+0x8>)
 80007b2:	6818      	ldr	r0, [r3, #0]
 80007b4:	4770      	bx	lr
 80007b6:	bf00      	nop
 80007b8:	20000058 	.word	0x20000058

080007bc <__libc_init_array>:
 80007bc:	b570      	push	{r4, r5, r6, lr}
 80007be:	2600      	movs	r6, #0
 80007c0:	4d0c      	ldr	r5, [pc, #48]	; (80007f4 <__libc_init_array+0x38>)
 80007c2:	4c0d      	ldr	r4, [pc, #52]	; (80007f8 <__libc_init_array+0x3c>)
 80007c4:	1b64      	subs	r4, r4, r5
 80007c6:	10a4      	asrs	r4, r4, #2
 80007c8:	42a6      	cmp	r6, r4
 80007ca:	d109      	bne.n	80007e0 <__libc_init_array+0x24>
 80007cc:	f000 fdca 	bl	8001364 <_init>
 80007d0:	2600      	movs	r6, #0
 80007d2:	4d0a      	ldr	r5, [pc, #40]	; (80007fc <__libc_init_array+0x40>)
 80007d4:	4c0a      	ldr	r4, [pc, #40]	; (8000800 <__libc_init_array+0x44>)
 80007d6:	1b64      	subs	r4, r4, r5
 80007d8:	10a4      	asrs	r4, r4, #2
 80007da:	42a6      	cmp	r6, r4
 80007dc:	d105      	bne.n	80007ea <__libc_init_array+0x2e>
 80007de:	bd70      	pop	{r4, r5, r6, pc}
 80007e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80007e4:	4798      	blx	r3
 80007e6:	3601      	adds	r6, #1
 80007e8:	e7ee      	b.n	80007c8 <__libc_init_array+0xc>
 80007ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80007ee:	4798      	blx	r3
 80007f0:	3601      	adds	r6, #1
 80007f2:	e7f2      	b.n	80007da <__libc_init_array+0x1e>
 80007f4:	080013c4 	.word	0x080013c4
 80007f8:	080013c4 	.word	0x080013c4
 80007fc:	080013c4 	.word	0x080013c4
 8000800:	080013c8 	.word	0x080013c8

08000804 <__retarget_lock_init_recursive>:
 8000804:	4770      	bx	lr

08000806 <__retarget_lock_acquire_recursive>:
 8000806:	4770      	bx	lr

08000808 <__retarget_lock_release_recursive>:
 8000808:	4770      	bx	lr
	...

0800080c <_free_r>:
 800080c:	b538      	push	{r3, r4, r5, lr}
 800080e:	4605      	mov	r5, r0
 8000810:	2900      	cmp	r1, #0
 8000812:	d040      	beq.n	8000896 <_free_r+0x8a>
 8000814:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000818:	1f0c      	subs	r4, r1, #4
 800081a:	2b00      	cmp	r3, #0
 800081c:	bfb8      	it	lt
 800081e:	18e4      	addlt	r4, r4, r3
 8000820:	f000 f8dc 	bl	80009dc <__malloc_lock>
 8000824:	4a1c      	ldr	r2, [pc, #112]	; (8000898 <_free_r+0x8c>)
 8000826:	6813      	ldr	r3, [r2, #0]
 8000828:	b933      	cbnz	r3, 8000838 <_free_r+0x2c>
 800082a:	6063      	str	r3, [r4, #4]
 800082c:	6014      	str	r4, [r2, #0]
 800082e:	4628      	mov	r0, r5
 8000830:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000834:	f000 b8d8 	b.w	80009e8 <__malloc_unlock>
 8000838:	42a3      	cmp	r3, r4
 800083a:	d908      	bls.n	800084e <_free_r+0x42>
 800083c:	6820      	ldr	r0, [r4, #0]
 800083e:	1821      	adds	r1, r4, r0
 8000840:	428b      	cmp	r3, r1
 8000842:	bf01      	itttt	eq
 8000844:	6819      	ldreq	r1, [r3, #0]
 8000846:	685b      	ldreq	r3, [r3, #4]
 8000848:	1809      	addeq	r1, r1, r0
 800084a:	6021      	streq	r1, [r4, #0]
 800084c:	e7ed      	b.n	800082a <_free_r+0x1e>
 800084e:	461a      	mov	r2, r3
 8000850:	685b      	ldr	r3, [r3, #4]
 8000852:	b10b      	cbz	r3, 8000858 <_free_r+0x4c>
 8000854:	42a3      	cmp	r3, r4
 8000856:	d9fa      	bls.n	800084e <_free_r+0x42>
 8000858:	6811      	ldr	r1, [r2, #0]
 800085a:	1850      	adds	r0, r2, r1
 800085c:	42a0      	cmp	r0, r4
 800085e:	d10b      	bne.n	8000878 <_free_r+0x6c>
 8000860:	6820      	ldr	r0, [r4, #0]
 8000862:	4401      	add	r1, r0
 8000864:	1850      	adds	r0, r2, r1
 8000866:	4283      	cmp	r3, r0
 8000868:	6011      	str	r1, [r2, #0]
 800086a:	d1e0      	bne.n	800082e <_free_r+0x22>
 800086c:	6818      	ldr	r0, [r3, #0]
 800086e:	685b      	ldr	r3, [r3, #4]
 8000870:	4408      	add	r0, r1
 8000872:	6010      	str	r0, [r2, #0]
 8000874:	6053      	str	r3, [r2, #4]
 8000876:	e7da      	b.n	800082e <_free_r+0x22>
 8000878:	d902      	bls.n	8000880 <_free_r+0x74>
 800087a:	230c      	movs	r3, #12
 800087c:	602b      	str	r3, [r5, #0]
 800087e:	e7d6      	b.n	800082e <_free_r+0x22>
 8000880:	6820      	ldr	r0, [r4, #0]
 8000882:	1821      	adds	r1, r4, r0
 8000884:	428b      	cmp	r3, r1
 8000886:	bf01      	itttt	eq
 8000888:	6819      	ldreq	r1, [r3, #0]
 800088a:	685b      	ldreq	r3, [r3, #4]
 800088c:	1809      	addeq	r1, r1, r0
 800088e:	6021      	streq	r1, [r4, #0]
 8000890:	6063      	str	r3, [r4, #4]
 8000892:	6054      	str	r4, [r2, #4]
 8000894:	e7cb      	b.n	800082e <_free_r+0x22>
 8000896:	bd38      	pop	{r3, r4, r5, pc}
 8000898:	200001c0 	.word	0x200001c0

0800089c <sbrk_aligned>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	4e0e      	ldr	r6, [pc, #56]	; (80008d8 <sbrk_aligned+0x3c>)
 80008a0:	460c      	mov	r4, r1
 80008a2:	6831      	ldr	r1, [r6, #0]
 80008a4:	4605      	mov	r5, r0
 80008a6:	b911      	cbnz	r1, 80008ae <sbrk_aligned+0x12>
 80008a8:	f000 fcba 	bl	8001220 <_sbrk_r>
 80008ac:	6030      	str	r0, [r6, #0]
 80008ae:	4621      	mov	r1, r4
 80008b0:	4628      	mov	r0, r5
 80008b2:	f000 fcb5 	bl	8001220 <_sbrk_r>
 80008b6:	1c43      	adds	r3, r0, #1
 80008b8:	d00a      	beq.n	80008d0 <sbrk_aligned+0x34>
 80008ba:	1cc4      	adds	r4, r0, #3
 80008bc:	f024 0403 	bic.w	r4, r4, #3
 80008c0:	42a0      	cmp	r0, r4
 80008c2:	d007      	beq.n	80008d4 <sbrk_aligned+0x38>
 80008c4:	1a21      	subs	r1, r4, r0
 80008c6:	4628      	mov	r0, r5
 80008c8:	f000 fcaa 	bl	8001220 <_sbrk_r>
 80008cc:	3001      	adds	r0, #1
 80008ce:	d101      	bne.n	80008d4 <sbrk_aligned+0x38>
 80008d0:	f04f 34ff 	mov.w	r4, #4294967295
 80008d4:	4620      	mov	r0, r4
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	200001c4 	.word	0x200001c4

080008dc <_malloc_r>:
 80008dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80008e0:	1ccd      	adds	r5, r1, #3
 80008e2:	f025 0503 	bic.w	r5, r5, #3
 80008e6:	3508      	adds	r5, #8
 80008e8:	2d0c      	cmp	r5, #12
 80008ea:	bf38      	it	cc
 80008ec:	250c      	movcc	r5, #12
 80008ee:	2d00      	cmp	r5, #0
 80008f0:	4607      	mov	r7, r0
 80008f2:	db01      	blt.n	80008f8 <_malloc_r+0x1c>
 80008f4:	42a9      	cmp	r1, r5
 80008f6:	d905      	bls.n	8000904 <_malloc_r+0x28>
 80008f8:	230c      	movs	r3, #12
 80008fa:	2600      	movs	r6, #0
 80008fc:	603b      	str	r3, [r7, #0]
 80008fe:	4630      	mov	r0, r6
 8000900:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000904:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80009d8 <_malloc_r+0xfc>
 8000908:	f000 f868 	bl	80009dc <__malloc_lock>
 800090c:	f8d8 3000 	ldr.w	r3, [r8]
 8000910:	461c      	mov	r4, r3
 8000912:	bb5c      	cbnz	r4, 800096c <_malloc_r+0x90>
 8000914:	4629      	mov	r1, r5
 8000916:	4638      	mov	r0, r7
 8000918:	f7ff ffc0 	bl	800089c <sbrk_aligned>
 800091c:	1c43      	adds	r3, r0, #1
 800091e:	4604      	mov	r4, r0
 8000920:	d155      	bne.n	80009ce <_malloc_r+0xf2>
 8000922:	f8d8 4000 	ldr.w	r4, [r8]
 8000926:	4626      	mov	r6, r4
 8000928:	2e00      	cmp	r6, #0
 800092a:	d145      	bne.n	80009b8 <_malloc_r+0xdc>
 800092c:	2c00      	cmp	r4, #0
 800092e:	d048      	beq.n	80009c2 <_malloc_r+0xe6>
 8000930:	6823      	ldr	r3, [r4, #0]
 8000932:	4631      	mov	r1, r6
 8000934:	4638      	mov	r0, r7
 8000936:	eb04 0903 	add.w	r9, r4, r3
 800093a:	f000 fc71 	bl	8001220 <_sbrk_r>
 800093e:	4581      	cmp	r9, r0
 8000940:	d13f      	bne.n	80009c2 <_malloc_r+0xe6>
 8000942:	6821      	ldr	r1, [r4, #0]
 8000944:	4638      	mov	r0, r7
 8000946:	1a6d      	subs	r5, r5, r1
 8000948:	4629      	mov	r1, r5
 800094a:	f7ff ffa7 	bl	800089c <sbrk_aligned>
 800094e:	3001      	adds	r0, #1
 8000950:	d037      	beq.n	80009c2 <_malloc_r+0xe6>
 8000952:	6823      	ldr	r3, [r4, #0]
 8000954:	442b      	add	r3, r5
 8000956:	6023      	str	r3, [r4, #0]
 8000958:	f8d8 3000 	ldr.w	r3, [r8]
 800095c:	2b00      	cmp	r3, #0
 800095e:	d038      	beq.n	80009d2 <_malloc_r+0xf6>
 8000960:	685a      	ldr	r2, [r3, #4]
 8000962:	42a2      	cmp	r2, r4
 8000964:	d12b      	bne.n	80009be <_malloc_r+0xe2>
 8000966:	2200      	movs	r2, #0
 8000968:	605a      	str	r2, [r3, #4]
 800096a:	e00f      	b.n	800098c <_malloc_r+0xb0>
 800096c:	6822      	ldr	r2, [r4, #0]
 800096e:	1b52      	subs	r2, r2, r5
 8000970:	d41f      	bmi.n	80009b2 <_malloc_r+0xd6>
 8000972:	2a0b      	cmp	r2, #11
 8000974:	d917      	bls.n	80009a6 <_malloc_r+0xca>
 8000976:	1961      	adds	r1, r4, r5
 8000978:	42a3      	cmp	r3, r4
 800097a:	6025      	str	r5, [r4, #0]
 800097c:	bf18      	it	ne
 800097e:	6059      	strne	r1, [r3, #4]
 8000980:	6863      	ldr	r3, [r4, #4]
 8000982:	bf08      	it	eq
 8000984:	f8c8 1000 	streq.w	r1, [r8]
 8000988:	5162      	str	r2, [r4, r5]
 800098a:	604b      	str	r3, [r1, #4]
 800098c:	4638      	mov	r0, r7
 800098e:	f104 060b 	add.w	r6, r4, #11
 8000992:	f000 f829 	bl	80009e8 <__malloc_unlock>
 8000996:	f026 0607 	bic.w	r6, r6, #7
 800099a:	1d23      	adds	r3, r4, #4
 800099c:	1af2      	subs	r2, r6, r3
 800099e:	d0ae      	beq.n	80008fe <_malloc_r+0x22>
 80009a0:	1b9b      	subs	r3, r3, r6
 80009a2:	50a3      	str	r3, [r4, r2]
 80009a4:	e7ab      	b.n	80008fe <_malloc_r+0x22>
 80009a6:	42a3      	cmp	r3, r4
 80009a8:	6862      	ldr	r2, [r4, #4]
 80009aa:	d1dd      	bne.n	8000968 <_malloc_r+0x8c>
 80009ac:	f8c8 2000 	str.w	r2, [r8]
 80009b0:	e7ec      	b.n	800098c <_malloc_r+0xb0>
 80009b2:	4623      	mov	r3, r4
 80009b4:	6864      	ldr	r4, [r4, #4]
 80009b6:	e7ac      	b.n	8000912 <_malloc_r+0x36>
 80009b8:	4634      	mov	r4, r6
 80009ba:	6876      	ldr	r6, [r6, #4]
 80009bc:	e7b4      	b.n	8000928 <_malloc_r+0x4c>
 80009be:	4613      	mov	r3, r2
 80009c0:	e7cc      	b.n	800095c <_malloc_r+0x80>
 80009c2:	230c      	movs	r3, #12
 80009c4:	4638      	mov	r0, r7
 80009c6:	603b      	str	r3, [r7, #0]
 80009c8:	f000 f80e 	bl	80009e8 <__malloc_unlock>
 80009cc:	e797      	b.n	80008fe <_malloc_r+0x22>
 80009ce:	6025      	str	r5, [r4, #0]
 80009d0:	e7dc      	b.n	800098c <_malloc_r+0xb0>
 80009d2:	605b      	str	r3, [r3, #4]
 80009d4:	deff      	udf	#255	; 0xff
 80009d6:	bf00      	nop
 80009d8:	200001c0 	.word	0x200001c0

080009dc <__malloc_lock>:
 80009dc:	4801      	ldr	r0, [pc, #4]	; (80009e4 <__malloc_lock+0x8>)
 80009de:	f7ff bf12 	b.w	8000806 <__retarget_lock_acquire_recursive>
 80009e2:	bf00      	nop
 80009e4:	200001bc 	.word	0x200001bc

080009e8 <__malloc_unlock>:
 80009e8:	4801      	ldr	r0, [pc, #4]	; (80009f0 <__malloc_unlock+0x8>)
 80009ea:	f7ff bf0d 	b.w	8000808 <__retarget_lock_release_recursive>
 80009ee:	bf00      	nop
 80009f0:	200001bc 	.word	0x200001bc

080009f4 <__sfputc_r>:
 80009f4:	6893      	ldr	r3, [r2, #8]
 80009f6:	b410      	push	{r4}
 80009f8:	3b01      	subs	r3, #1
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	6093      	str	r3, [r2, #8]
 80009fe:	da07      	bge.n	8000a10 <__sfputc_r+0x1c>
 8000a00:	6994      	ldr	r4, [r2, #24]
 8000a02:	42a3      	cmp	r3, r4
 8000a04:	db01      	blt.n	8000a0a <__sfputc_r+0x16>
 8000a06:	290a      	cmp	r1, #10
 8000a08:	d102      	bne.n	8000a10 <__sfputc_r+0x1c>
 8000a0a:	bc10      	pop	{r4}
 8000a0c:	f000 bb72 	b.w	80010f4 <__swbuf_r>
 8000a10:	6813      	ldr	r3, [r2, #0]
 8000a12:	1c58      	adds	r0, r3, #1
 8000a14:	6010      	str	r0, [r2, #0]
 8000a16:	7019      	strb	r1, [r3, #0]
 8000a18:	4608      	mov	r0, r1
 8000a1a:	bc10      	pop	{r4}
 8000a1c:	4770      	bx	lr

08000a1e <__sfputs_r>:
 8000a1e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a20:	4606      	mov	r6, r0
 8000a22:	460f      	mov	r7, r1
 8000a24:	4614      	mov	r4, r2
 8000a26:	18d5      	adds	r5, r2, r3
 8000a28:	42ac      	cmp	r4, r5
 8000a2a:	d101      	bne.n	8000a30 <__sfputs_r+0x12>
 8000a2c:	2000      	movs	r0, #0
 8000a2e:	e007      	b.n	8000a40 <__sfputs_r+0x22>
 8000a30:	463a      	mov	r2, r7
 8000a32:	4630      	mov	r0, r6
 8000a34:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000a38:	f7ff ffdc 	bl	80009f4 <__sfputc_r>
 8000a3c:	1c43      	adds	r3, r0, #1
 8000a3e:	d1f3      	bne.n	8000a28 <__sfputs_r+0xa>
 8000a40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08000a44 <_vfiprintf_r>:
 8000a44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000a48:	460d      	mov	r5, r1
 8000a4a:	4614      	mov	r4, r2
 8000a4c:	4698      	mov	r8, r3
 8000a4e:	4606      	mov	r6, r0
 8000a50:	b09d      	sub	sp, #116	; 0x74
 8000a52:	b118      	cbz	r0, 8000a5c <_vfiprintf_r+0x18>
 8000a54:	6a03      	ldr	r3, [r0, #32]
 8000a56:	b90b      	cbnz	r3, 8000a5c <_vfiprintf_r+0x18>
 8000a58:	f7ff fdd0 	bl	80005fc <__sinit>
 8000a5c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000a5e:	07d9      	lsls	r1, r3, #31
 8000a60:	d405      	bmi.n	8000a6e <_vfiprintf_r+0x2a>
 8000a62:	89ab      	ldrh	r3, [r5, #12]
 8000a64:	059a      	lsls	r2, r3, #22
 8000a66:	d402      	bmi.n	8000a6e <_vfiprintf_r+0x2a>
 8000a68:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000a6a:	f7ff fecc 	bl	8000806 <__retarget_lock_acquire_recursive>
 8000a6e:	89ab      	ldrh	r3, [r5, #12]
 8000a70:	071b      	lsls	r3, r3, #28
 8000a72:	d501      	bpl.n	8000a78 <_vfiprintf_r+0x34>
 8000a74:	692b      	ldr	r3, [r5, #16]
 8000a76:	b99b      	cbnz	r3, 8000aa0 <_vfiprintf_r+0x5c>
 8000a78:	4629      	mov	r1, r5
 8000a7a:	4630      	mov	r0, r6
 8000a7c:	f000 fb78 	bl	8001170 <__swsetup_r>
 8000a80:	b170      	cbz	r0, 8000aa0 <_vfiprintf_r+0x5c>
 8000a82:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000a84:	07dc      	lsls	r4, r3, #31
 8000a86:	d504      	bpl.n	8000a92 <_vfiprintf_r+0x4e>
 8000a88:	f04f 30ff 	mov.w	r0, #4294967295
 8000a8c:	b01d      	add	sp, #116	; 0x74
 8000a8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000a92:	89ab      	ldrh	r3, [r5, #12]
 8000a94:	0598      	lsls	r0, r3, #22
 8000a96:	d4f7      	bmi.n	8000a88 <_vfiprintf_r+0x44>
 8000a98:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000a9a:	f7ff feb5 	bl	8000808 <__retarget_lock_release_recursive>
 8000a9e:	e7f3      	b.n	8000a88 <_vfiprintf_r+0x44>
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	9309      	str	r3, [sp, #36]	; 0x24
 8000aa4:	2320      	movs	r3, #32
 8000aa6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8000aaa:	2330      	movs	r3, #48	; 0x30
 8000aac:	f04f 0901 	mov.w	r9, #1
 8000ab0:	f8cd 800c 	str.w	r8, [sp, #12]
 8000ab4:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8000c64 <_vfiprintf_r+0x220>
 8000ab8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8000abc:	4623      	mov	r3, r4
 8000abe:	469a      	mov	sl, r3
 8000ac0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000ac4:	b10a      	cbz	r2, 8000aca <_vfiprintf_r+0x86>
 8000ac6:	2a25      	cmp	r2, #37	; 0x25
 8000ac8:	d1f9      	bne.n	8000abe <_vfiprintf_r+0x7a>
 8000aca:	ebba 0b04 	subs.w	fp, sl, r4
 8000ace:	d00b      	beq.n	8000ae8 <_vfiprintf_r+0xa4>
 8000ad0:	465b      	mov	r3, fp
 8000ad2:	4622      	mov	r2, r4
 8000ad4:	4629      	mov	r1, r5
 8000ad6:	4630      	mov	r0, r6
 8000ad8:	f7ff ffa1 	bl	8000a1e <__sfputs_r>
 8000adc:	3001      	adds	r0, #1
 8000ade:	f000 80a9 	beq.w	8000c34 <_vfiprintf_r+0x1f0>
 8000ae2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8000ae4:	445a      	add	r2, fp
 8000ae6:	9209      	str	r2, [sp, #36]	; 0x24
 8000ae8:	f89a 3000 	ldrb.w	r3, [sl]
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	f000 80a1 	beq.w	8000c34 <_vfiprintf_r+0x1f0>
 8000af2:	2300      	movs	r3, #0
 8000af4:	f04f 32ff 	mov.w	r2, #4294967295
 8000af8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000afc:	f10a 0a01 	add.w	sl, sl, #1
 8000b00:	9304      	str	r3, [sp, #16]
 8000b02:	9307      	str	r3, [sp, #28]
 8000b04:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8000b08:	931a      	str	r3, [sp, #104]	; 0x68
 8000b0a:	4654      	mov	r4, sl
 8000b0c:	2205      	movs	r2, #5
 8000b0e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000b12:	4854      	ldr	r0, [pc, #336]	; (8000c64 <_vfiprintf_r+0x220>)
 8000b14:	f000 fb94 	bl	8001240 <memchr>
 8000b18:	9a04      	ldr	r2, [sp, #16]
 8000b1a:	b9d8      	cbnz	r0, 8000b54 <_vfiprintf_r+0x110>
 8000b1c:	06d1      	lsls	r1, r2, #27
 8000b1e:	bf44      	itt	mi
 8000b20:	2320      	movmi	r3, #32
 8000b22:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000b26:	0713      	lsls	r3, r2, #28
 8000b28:	bf44      	itt	mi
 8000b2a:	232b      	movmi	r3, #43	; 0x2b
 8000b2c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000b30:	f89a 3000 	ldrb.w	r3, [sl]
 8000b34:	2b2a      	cmp	r3, #42	; 0x2a
 8000b36:	d015      	beq.n	8000b64 <_vfiprintf_r+0x120>
 8000b38:	4654      	mov	r4, sl
 8000b3a:	2000      	movs	r0, #0
 8000b3c:	f04f 0c0a 	mov.w	ip, #10
 8000b40:	9a07      	ldr	r2, [sp, #28]
 8000b42:	4621      	mov	r1, r4
 8000b44:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000b48:	3b30      	subs	r3, #48	; 0x30
 8000b4a:	2b09      	cmp	r3, #9
 8000b4c:	d94d      	bls.n	8000bea <_vfiprintf_r+0x1a6>
 8000b4e:	b1b0      	cbz	r0, 8000b7e <_vfiprintf_r+0x13a>
 8000b50:	9207      	str	r2, [sp, #28]
 8000b52:	e014      	b.n	8000b7e <_vfiprintf_r+0x13a>
 8000b54:	eba0 0308 	sub.w	r3, r0, r8
 8000b58:	fa09 f303 	lsl.w	r3, r9, r3
 8000b5c:	4313      	orrs	r3, r2
 8000b5e:	46a2      	mov	sl, r4
 8000b60:	9304      	str	r3, [sp, #16]
 8000b62:	e7d2      	b.n	8000b0a <_vfiprintf_r+0xc6>
 8000b64:	9b03      	ldr	r3, [sp, #12]
 8000b66:	1d19      	adds	r1, r3, #4
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	9103      	str	r1, [sp, #12]
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	bfbb      	ittet	lt
 8000b70:	425b      	neglt	r3, r3
 8000b72:	f042 0202 	orrlt.w	r2, r2, #2
 8000b76:	9307      	strge	r3, [sp, #28]
 8000b78:	9307      	strlt	r3, [sp, #28]
 8000b7a:	bfb8      	it	lt
 8000b7c:	9204      	strlt	r2, [sp, #16]
 8000b7e:	7823      	ldrb	r3, [r4, #0]
 8000b80:	2b2e      	cmp	r3, #46	; 0x2e
 8000b82:	d10c      	bne.n	8000b9e <_vfiprintf_r+0x15a>
 8000b84:	7863      	ldrb	r3, [r4, #1]
 8000b86:	2b2a      	cmp	r3, #42	; 0x2a
 8000b88:	d134      	bne.n	8000bf4 <_vfiprintf_r+0x1b0>
 8000b8a:	9b03      	ldr	r3, [sp, #12]
 8000b8c:	3402      	adds	r4, #2
 8000b8e:	1d1a      	adds	r2, r3, #4
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	9203      	str	r2, [sp, #12]
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	bfb8      	it	lt
 8000b98:	f04f 33ff 	movlt.w	r3, #4294967295
 8000b9c:	9305      	str	r3, [sp, #20]
 8000b9e:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8000c68 <_vfiprintf_r+0x224>
 8000ba2:	2203      	movs	r2, #3
 8000ba4:	4650      	mov	r0, sl
 8000ba6:	7821      	ldrb	r1, [r4, #0]
 8000ba8:	f000 fb4a 	bl	8001240 <memchr>
 8000bac:	b138      	cbz	r0, 8000bbe <_vfiprintf_r+0x17a>
 8000bae:	2240      	movs	r2, #64	; 0x40
 8000bb0:	9b04      	ldr	r3, [sp, #16]
 8000bb2:	eba0 000a 	sub.w	r0, r0, sl
 8000bb6:	4082      	lsls	r2, r0
 8000bb8:	4313      	orrs	r3, r2
 8000bba:	3401      	adds	r4, #1
 8000bbc:	9304      	str	r3, [sp, #16]
 8000bbe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000bc2:	2206      	movs	r2, #6
 8000bc4:	4829      	ldr	r0, [pc, #164]	; (8000c6c <_vfiprintf_r+0x228>)
 8000bc6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8000bca:	f000 fb39 	bl	8001240 <memchr>
 8000bce:	2800      	cmp	r0, #0
 8000bd0:	d03f      	beq.n	8000c52 <_vfiprintf_r+0x20e>
 8000bd2:	4b27      	ldr	r3, [pc, #156]	; (8000c70 <_vfiprintf_r+0x22c>)
 8000bd4:	bb1b      	cbnz	r3, 8000c1e <_vfiprintf_r+0x1da>
 8000bd6:	9b03      	ldr	r3, [sp, #12]
 8000bd8:	3307      	adds	r3, #7
 8000bda:	f023 0307 	bic.w	r3, r3, #7
 8000bde:	3308      	adds	r3, #8
 8000be0:	9303      	str	r3, [sp, #12]
 8000be2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000be4:	443b      	add	r3, r7
 8000be6:	9309      	str	r3, [sp, #36]	; 0x24
 8000be8:	e768      	b.n	8000abc <_vfiprintf_r+0x78>
 8000bea:	460c      	mov	r4, r1
 8000bec:	2001      	movs	r0, #1
 8000bee:	fb0c 3202 	mla	r2, ip, r2, r3
 8000bf2:	e7a6      	b.n	8000b42 <_vfiprintf_r+0xfe>
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	f04f 0c0a 	mov.w	ip, #10
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	3401      	adds	r4, #1
 8000bfe:	9305      	str	r3, [sp, #20]
 8000c00:	4620      	mov	r0, r4
 8000c02:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000c06:	3a30      	subs	r2, #48	; 0x30
 8000c08:	2a09      	cmp	r2, #9
 8000c0a:	d903      	bls.n	8000c14 <_vfiprintf_r+0x1d0>
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d0c6      	beq.n	8000b9e <_vfiprintf_r+0x15a>
 8000c10:	9105      	str	r1, [sp, #20]
 8000c12:	e7c4      	b.n	8000b9e <_vfiprintf_r+0x15a>
 8000c14:	4604      	mov	r4, r0
 8000c16:	2301      	movs	r3, #1
 8000c18:	fb0c 2101 	mla	r1, ip, r1, r2
 8000c1c:	e7f0      	b.n	8000c00 <_vfiprintf_r+0x1bc>
 8000c1e:	ab03      	add	r3, sp, #12
 8000c20:	9300      	str	r3, [sp, #0]
 8000c22:	462a      	mov	r2, r5
 8000c24:	4630      	mov	r0, r6
 8000c26:	4b13      	ldr	r3, [pc, #76]	; (8000c74 <_vfiprintf_r+0x230>)
 8000c28:	a904      	add	r1, sp, #16
 8000c2a:	f3af 8000 	nop.w
 8000c2e:	4607      	mov	r7, r0
 8000c30:	1c78      	adds	r0, r7, #1
 8000c32:	d1d6      	bne.n	8000be2 <_vfiprintf_r+0x19e>
 8000c34:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000c36:	07d9      	lsls	r1, r3, #31
 8000c38:	d405      	bmi.n	8000c46 <_vfiprintf_r+0x202>
 8000c3a:	89ab      	ldrh	r3, [r5, #12]
 8000c3c:	059a      	lsls	r2, r3, #22
 8000c3e:	d402      	bmi.n	8000c46 <_vfiprintf_r+0x202>
 8000c40:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000c42:	f7ff fde1 	bl	8000808 <__retarget_lock_release_recursive>
 8000c46:	89ab      	ldrh	r3, [r5, #12]
 8000c48:	065b      	lsls	r3, r3, #25
 8000c4a:	f53f af1d 	bmi.w	8000a88 <_vfiprintf_r+0x44>
 8000c4e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8000c50:	e71c      	b.n	8000a8c <_vfiprintf_r+0x48>
 8000c52:	ab03      	add	r3, sp, #12
 8000c54:	9300      	str	r3, [sp, #0]
 8000c56:	462a      	mov	r2, r5
 8000c58:	4630      	mov	r0, r6
 8000c5a:	4b06      	ldr	r3, [pc, #24]	; (8000c74 <_vfiprintf_r+0x230>)
 8000c5c:	a904      	add	r1, sp, #16
 8000c5e:	f000 f87d 	bl	8000d5c <_printf_i>
 8000c62:	e7e4      	b.n	8000c2e <_vfiprintf_r+0x1ea>
 8000c64:	0800138f 	.word	0x0800138f
 8000c68:	08001395 	.word	0x08001395
 8000c6c:	08001399 	.word	0x08001399
 8000c70:	00000000 	.word	0x00000000
 8000c74:	08000a1f 	.word	0x08000a1f

08000c78 <_printf_common>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	4616      	mov	r6, r2
 8000c7e:	4699      	mov	r9, r3
 8000c80:	688a      	ldr	r2, [r1, #8]
 8000c82:	690b      	ldr	r3, [r1, #16]
 8000c84:	4607      	mov	r7, r0
 8000c86:	4293      	cmp	r3, r2
 8000c88:	bfb8      	it	lt
 8000c8a:	4613      	movlt	r3, r2
 8000c8c:	6033      	str	r3, [r6, #0]
 8000c8e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8000c92:	460c      	mov	r4, r1
 8000c94:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8000c98:	b10a      	cbz	r2, 8000c9e <_printf_common+0x26>
 8000c9a:	3301      	adds	r3, #1
 8000c9c:	6033      	str	r3, [r6, #0]
 8000c9e:	6823      	ldr	r3, [r4, #0]
 8000ca0:	0699      	lsls	r1, r3, #26
 8000ca2:	bf42      	ittt	mi
 8000ca4:	6833      	ldrmi	r3, [r6, #0]
 8000ca6:	3302      	addmi	r3, #2
 8000ca8:	6033      	strmi	r3, [r6, #0]
 8000caa:	6825      	ldr	r5, [r4, #0]
 8000cac:	f015 0506 	ands.w	r5, r5, #6
 8000cb0:	d106      	bne.n	8000cc0 <_printf_common+0x48>
 8000cb2:	f104 0a19 	add.w	sl, r4, #25
 8000cb6:	68e3      	ldr	r3, [r4, #12]
 8000cb8:	6832      	ldr	r2, [r6, #0]
 8000cba:	1a9b      	subs	r3, r3, r2
 8000cbc:	42ab      	cmp	r3, r5
 8000cbe:	dc2b      	bgt.n	8000d18 <_printf_common+0xa0>
 8000cc0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8000cc4:	1e13      	subs	r3, r2, #0
 8000cc6:	6822      	ldr	r2, [r4, #0]
 8000cc8:	bf18      	it	ne
 8000cca:	2301      	movne	r3, #1
 8000ccc:	0692      	lsls	r2, r2, #26
 8000cce:	d430      	bmi.n	8000d32 <_printf_common+0xba>
 8000cd0:	4649      	mov	r1, r9
 8000cd2:	4638      	mov	r0, r7
 8000cd4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8000cd8:	47c0      	blx	r8
 8000cda:	3001      	adds	r0, #1
 8000cdc:	d023      	beq.n	8000d26 <_printf_common+0xae>
 8000cde:	6823      	ldr	r3, [r4, #0]
 8000ce0:	6922      	ldr	r2, [r4, #16]
 8000ce2:	f003 0306 	and.w	r3, r3, #6
 8000ce6:	2b04      	cmp	r3, #4
 8000ce8:	bf14      	ite	ne
 8000cea:	2500      	movne	r5, #0
 8000cec:	6833      	ldreq	r3, [r6, #0]
 8000cee:	f04f 0600 	mov.w	r6, #0
 8000cf2:	bf08      	it	eq
 8000cf4:	68e5      	ldreq	r5, [r4, #12]
 8000cf6:	f104 041a 	add.w	r4, r4, #26
 8000cfa:	bf08      	it	eq
 8000cfc:	1aed      	subeq	r5, r5, r3
 8000cfe:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8000d02:	bf08      	it	eq
 8000d04:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000d08:	4293      	cmp	r3, r2
 8000d0a:	bfc4      	itt	gt
 8000d0c:	1a9b      	subgt	r3, r3, r2
 8000d0e:	18ed      	addgt	r5, r5, r3
 8000d10:	42b5      	cmp	r5, r6
 8000d12:	d11a      	bne.n	8000d4a <_printf_common+0xd2>
 8000d14:	2000      	movs	r0, #0
 8000d16:	e008      	b.n	8000d2a <_printf_common+0xb2>
 8000d18:	2301      	movs	r3, #1
 8000d1a:	4652      	mov	r2, sl
 8000d1c:	4649      	mov	r1, r9
 8000d1e:	4638      	mov	r0, r7
 8000d20:	47c0      	blx	r8
 8000d22:	3001      	adds	r0, #1
 8000d24:	d103      	bne.n	8000d2e <_printf_common+0xb6>
 8000d26:	f04f 30ff 	mov.w	r0, #4294967295
 8000d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2e:	3501      	adds	r5, #1
 8000d30:	e7c1      	b.n	8000cb6 <_printf_common+0x3e>
 8000d32:	2030      	movs	r0, #48	; 0x30
 8000d34:	18e1      	adds	r1, r4, r3
 8000d36:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8000d3a:	1c5a      	adds	r2, r3, #1
 8000d3c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8000d40:	4422      	add	r2, r4
 8000d42:	3302      	adds	r3, #2
 8000d44:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8000d48:	e7c2      	b.n	8000cd0 <_printf_common+0x58>
 8000d4a:	2301      	movs	r3, #1
 8000d4c:	4622      	mov	r2, r4
 8000d4e:	4649      	mov	r1, r9
 8000d50:	4638      	mov	r0, r7
 8000d52:	47c0      	blx	r8
 8000d54:	3001      	adds	r0, #1
 8000d56:	d0e6      	beq.n	8000d26 <_printf_common+0xae>
 8000d58:	3601      	adds	r6, #1
 8000d5a:	e7d9      	b.n	8000d10 <_printf_common+0x98>

08000d5c <_printf_i>:
 8000d5c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000d60:	7e0f      	ldrb	r7, [r1, #24]
 8000d62:	4691      	mov	r9, r2
 8000d64:	2f78      	cmp	r7, #120	; 0x78
 8000d66:	4680      	mov	r8, r0
 8000d68:	460c      	mov	r4, r1
 8000d6a:	469a      	mov	sl, r3
 8000d6c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8000d6e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8000d72:	d807      	bhi.n	8000d84 <_printf_i+0x28>
 8000d74:	2f62      	cmp	r7, #98	; 0x62
 8000d76:	d80a      	bhi.n	8000d8e <_printf_i+0x32>
 8000d78:	2f00      	cmp	r7, #0
 8000d7a:	f000 80d5 	beq.w	8000f28 <_printf_i+0x1cc>
 8000d7e:	2f58      	cmp	r7, #88	; 0x58
 8000d80:	f000 80c1 	beq.w	8000f06 <_printf_i+0x1aa>
 8000d84:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8000d88:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8000d8c:	e03a      	b.n	8000e04 <_printf_i+0xa8>
 8000d8e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8000d92:	2b15      	cmp	r3, #21
 8000d94:	d8f6      	bhi.n	8000d84 <_printf_i+0x28>
 8000d96:	a101      	add	r1, pc, #4	; (adr r1, 8000d9c <_printf_i+0x40>)
 8000d98:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8000d9c:	08000df5 	.word	0x08000df5
 8000da0:	08000e09 	.word	0x08000e09
 8000da4:	08000d85 	.word	0x08000d85
 8000da8:	08000d85 	.word	0x08000d85
 8000dac:	08000d85 	.word	0x08000d85
 8000db0:	08000d85 	.word	0x08000d85
 8000db4:	08000e09 	.word	0x08000e09
 8000db8:	08000d85 	.word	0x08000d85
 8000dbc:	08000d85 	.word	0x08000d85
 8000dc0:	08000d85 	.word	0x08000d85
 8000dc4:	08000d85 	.word	0x08000d85
 8000dc8:	08000f0f 	.word	0x08000f0f
 8000dcc:	08000e35 	.word	0x08000e35
 8000dd0:	08000ec9 	.word	0x08000ec9
 8000dd4:	08000d85 	.word	0x08000d85
 8000dd8:	08000d85 	.word	0x08000d85
 8000ddc:	08000f31 	.word	0x08000f31
 8000de0:	08000d85 	.word	0x08000d85
 8000de4:	08000e35 	.word	0x08000e35
 8000de8:	08000d85 	.word	0x08000d85
 8000dec:	08000d85 	.word	0x08000d85
 8000df0:	08000ed1 	.word	0x08000ed1
 8000df4:	682b      	ldr	r3, [r5, #0]
 8000df6:	1d1a      	adds	r2, r3, #4
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	602a      	str	r2, [r5, #0]
 8000dfc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8000e00:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8000e04:	2301      	movs	r3, #1
 8000e06:	e0a0      	b.n	8000f4a <_printf_i+0x1ee>
 8000e08:	6820      	ldr	r0, [r4, #0]
 8000e0a:	682b      	ldr	r3, [r5, #0]
 8000e0c:	0607      	lsls	r7, r0, #24
 8000e0e:	f103 0104 	add.w	r1, r3, #4
 8000e12:	6029      	str	r1, [r5, #0]
 8000e14:	d501      	bpl.n	8000e1a <_printf_i+0xbe>
 8000e16:	681e      	ldr	r6, [r3, #0]
 8000e18:	e003      	b.n	8000e22 <_printf_i+0xc6>
 8000e1a:	0646      	lsls	r6, r0, #25
 8000e1c:	d5fb      	bpl.n	8000e16 <_printf_i+0xba>
 8000e1e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8000e22:	2e00      	cmp	r6, #0
 8000e24:	da03      	bge.n	8000e2e <_printf_i+0xd2>
 8000e26:	232d      	movs	r3, #45	; 0x2d
 8000e28:	4276      	negs	r6, r6
 8000e2a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8000e2e:	230a      	movs	r3, #10
 8000e30:	4859      	ldr	r0, [pc, #356]	; (8000f98 <_printf_i+0x23c>)
 8000e32:	e012      	b.n	8000e5a <_printf_i+0xfe>
 8000e34:	682b      	ldr	r3, [r5, #0]
 8000e36:	6820      	ldr	r0, [r4, #0]
 8000e38:	1d19      	adds	r1, r3, #4
 8000e3a:	6029      	str	r1, [r5, #0]
 8000e3c:	0605      	lsls	r5, r0, #24
 8000e3e:	d501      	bpl.n	8000e44 <_printf_i+0xe8>
 8000e40:	681e      	ldr	r6, [r3, #0]
 8000e42:	e002      	b.n	8000e4a <_printf_i+0xee>
 8000e44:	0641      	lsls	r1, r0, #25
 8000e46:	d5fb      	bpl.n	8000e40 <_printf_i+0xe4>
 8000e48:	881e      	ldrh	r6, [r3, #0]
 8000e4a:	2f6f      	cmp	r7, #111	; 0x6f
 8000e4c:	bf0c      	ite	eq
 8000e4e:	2308      	moveq	r3, #8
 8000e50:	230a      	movne	r3, #10
 8000e52:	4851      	ldr	r0, [pc, #324]	; (8000f98 <_printf_i+0x23c>)
 8000e54:	2100      	movs	r1, #0
 8000e56:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8000e5a:	6865      	ldr	r5, [r4, #4]
 8000e5c:	2d00      	cmp	r5, #0
 8000e5e:	bfa8      	it	ge
 8000e60:	6821      	ldrge	r1, [r4, #0]
 8000e62:	60a5      	str	r5, [r4, #8]
 8000e64:	bfa4      	itt	ge
 8000e66:	f021 0104 	bicge.w	r1, r1, #4
 8000e6a:	6021      	strge	r1, [r4, #0]
 8000e6c:	b90e      	cbnz	r6, 8000e72 <_printf_i+0x116>
 8000e6e:	2d00      	cmp	r5, #0
 8000e70:	d04b      	beq.n	8000f0a <_printf_i+0x1ae>
 8000e72:	4615      	mov	r5, r2
 8000e74:	fbb6 f1f3 	udiv	r1, r6, r3
 8000e78:	fb03 6711 	mls	r7, r3, r1, r6
 8000e7c:	5dc7      	ldrb	r7, [r0, r7]
 8000e7e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8000e82:	4637      	mov	r7, r6
 8000e84:	42bb      	cmp	r3, r7
 8000e86:	460e      	mov	r6, r1
 8000e88:	d9f4      	bls.n	8000e74 <_printf_i+0x118>
 8000e8a:	2b08      	cmp	r3, #8
 8000e8c:	d10b      	bne.n	8000ea6 <_printf_i+0x14a>
 8000e8e:	6823      	ldr	r3, [r4, #0]
 8000e90:	07de      	lsls	r6, r3, #31
 8000e92:	d508      	bpl.n	8000ea6 <_printf_i+0x14a>
 8000e94:	6923      	ldr	r3, [r4, #16]
 8000e96:	6861      	ldr	r1, [r4, #4]
 8000e98:	4299      	cmp	r1, r3
 8000e9a:	bfde      	ittt	le
 8000e9c:	2330      	movle	r3, #48	; 0x30
 8000e9e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8000ea2:	f105 35ff 	addle.w	r5, r5, #4294967295
 8000ea6:	1b52      	subs	r2, r2, r5
 8000ea8:	6122      	str	r2, [r4, #16]
 8000eaa:	464b      	mov	r3, r9
 8000eac:	4621      	mov	r1, r4
 8000eae:	4640      	mov	r0, r8
 8000eb0:	f8cd a000 	str.w	sl, [sp]
 8000eb4:	aa03      	add	r2, sp, #12
 8000eb6:	f7ff fedf 	bl	8000c78 <_printf_common>
 8000eba:	3001      	adds	r0, #1
 8000ebc:	d14a      	bne.n	8000f54 <_printf_i+0x1f8>
 8000ebe:	f04f 30ff 	mov.w	r0, #4294967295
 8000ec2:	b004      	add	sp, #16
 8000ec4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ec8:	6823      	ldr	r3, [r4, #0]
 8000eca:	f043 0320 	orr.w	r3, r3, #32
 8000ece:	6023      	str	r3, [r4, #0]
 8000ed0:	2778      	movs	r7, #120	; 0x78
 8000ed2:	4832      	ldr	r0, [pc, #200]	; (8000f9c <_printf_i+0x240>)
 8000ed4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8000ed8:	6823      	ldr	r3, [r4, #0]
 8000eda:	6829      	ldr	r1, [r5, #0]
 8000edc:	061f      	lsls	r7, r3, #24
 8000ede:	f851 6b04 	ldr.w	r6, [r1], #4
 8000ee2:	d402      	bmi.n	8000eea <_printf_i+0x18e>
 8000ee4:	065f      	lsls	r7, r3, #25
 8000ee6:	bf48      	it	mi
 8000ee8:	b2b6      	uxthmi	r6, r6
 8000eea:	07df      	lsls	r7, r3, #31
 8000eec:	bf48      	it	mi
 8000eee:	f043 0320 	orrmi.w	r3, r3, #32
 8000ef2:	6029      	str	r1, [r5, #0]
 8000ef4:	bf48      	it	mi
 8000ef6:	6023      	strmi	r3, [r4, #0]
 8000ef8:	b91e      	cbnz	r6, 8000f02 <_printf_i+0x1a6>
 8000efa:	6823      	ldr	r3, [r4, #0]
 8000efc:	f023 0320 	bic.w	r3, r3, #32
 8000f00:	6023      	str	r3, [r4, #0]
 8000f02:	2310      	movs	r3, #16
 8000f04:	e7a6      	b.n	8000e54 <_printf_i+0xf8>
 8000f06:	4824      	ldr	r0, [pc, #144]	; (8000f98 <_printf_i+0x23c>)
 8000f08:	e7e4      	b.n	8000ed4 <_printf_i+0x178>
 8000f0a:	4615      	mov	r5, r2
 8000f0c:	e7bd      	b.n	8000e8a <_printf_i+0x12e>
 8000f0e:	682b      	ldr	r3, [r5, #0]
 8000f10:	6826      	ldr	r6, [r4, #0]
 8000f12:	1d18      	adds	r0, r3, #4
 8000f14:	6961      	ldr	r1, [r4, #20]
 8000f16:	6028      	str	r0, [r5, #0]
 8000f18:	0635      	lsls	r5, r6, #24
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	d501      	bpl.n	8000f22 <_printf_i+0x1c6>
 8000f1e:	6019      	str	r1, [r3, #0]
 8000f20:	e002      	b.n	8000f28 <_printf_i+0x1cc>
 8000f22:	0670      	lsls	r0, r6, #25
 8000f24:	d5fb      	bpl.n	8000f1e <_printf_i+0x1c2>
 8000f26:	8019      	strh	r1, [r3, #0]
 8000f28:	2300      	movs	r3, #0
 8000f2a:	4615      	mov	r5, r2
 8000f2c:	6123      	str	r3, [r4, #16]
 8000f2e:	e7bc      	b.n	8000eaa <_printf_i+0x14e>
 8000f30:	682b      	ldr	r3, [r5, #0]
 8000f32:	2100      	movs	r1, #0
 8000f34:	1d1a      	adds	r2, r3, #4
 8000f36:	602a      	str	r2, [r5, #0]
 8000f38:	681d      	ldr	r5, [r3, #0]
 8000f3a:	6862      	ldr	r2, [r4, #4]
 8000f3c:	4628      	mov	r0, r5
 8000f3e:	f000 f97f 	bl	8001240 <memchr>
 8000f42:	b108      	cbz	r0, 8000f48 <_printf_i+0x1ec>
 8000f44:	1b40      	subs	r0, r0, r5
 8000f46:	6060      	str	r0, [r4, #4]
 8000f48:	6863      	ldr	r3, [r4, #4]
 8000f4a:	6123      	str	r3, [r4, #16]
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8000f52:	e7aa      	b.n	8000eaa <_printf_i+0x14e>
 8000f54:	462a      	mov	r2, r5
 8000f56:	4649      	mov	r1, r9
 8000f58:	4640      	mov	r0, r8
 8000f5a:	6923      	ldr	r3, [r4, #16]
 8000f5c:	47d0      	blx	sl
 8000f5e:	3001      	adds	r0, #1
 8000f60:	d0ad      	beq.n	8000ebe <_printf_i+0x162>
 8000f62:	6823      	ldr	r3, [r4, #0]
 8000f64:	079b      	lsls	r3, r3, #30
 8000f66:	d413      	bmi.n	8000f90 <_printf_i+0x234>
 8000f68:	68e0      	ldr	r0, [r4, #12]
 8000f6a:	9b03      	ldr	r3, [sp, #12]
 8000f6c:	4298      	cmp	r0, r3
 8000f6e:	bfb8      	it	lt
 8000f70:	4618      	movlt	r0, r3
 8000f72:	e7a6      	b.n	8000ec2 <_printf_i+0x166>
 8000f74:	2301      	movs	r3, #1
 8000f76:	4632      	mov	r2, r6
 8000f78:	4649      	mov	r1, r9
 8000f7a:	4640      	mov	r0, r8
 8000f7c:	47d0      	blx	sl
 8000f7e:	3001      	adds	r0, #1
 8000f80:	d09d      	beq.n	8000ebe <_printf_i+0x162>
 8000f82:	3501      	adds	r5, #1
 8000f84:	68e3      	ldr	r3, [r4, #12]
 8000f86:	9903      	ldr	r1, [sp, #12]
 8000f88:	1a5b      	subs	r3, r3, r1
 8000f8a:	42ab      	cmp	r3, r5
 8000f8c:	dcf2      	bgt.n	8000f74 <_printf_i+0x218>
 8000f8e:	e7eb      	b.n	8000f68 <_printf_i+0x20c>
 8000f90:	2500      	movs	r5, #0
 8000f92:	f104 0619 	add.w	r6, r4, #25
 8000f96:	e7f5      	b.n	8000f84 <_printf_i+0x228>
 8000f98:	080013a0 	.word	0x080013a0
 8000f9c:	080013b1 	.word	0x080013b1

08000fa0 <__sflush_r>:
 8000fa0:	898a      	ldrh	r2, [r1, #12]
 8000fa2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000fa4:	4605      	mov	r5, r0
 8000fa6:	0710      	lsls	r0, r2, #28
 8000fa8:	460c      	mov	r4, r1
 8000faa:	d457      	bmi.n	800105c <__sflush_r+0xbc>
 8000fac:	684b      	ldr	r3, [r1, #4]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	dc04      	bgt.n	8000fbc <__sflush_r+0x1c>
 8000fb2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	dc01      	bgt.n	8000fbc <__sflush_r+0x1c>
 8000fb8:	2000      	movs	r0, #0
 8000fba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000fbc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000fbe:	2e00      	cmp	r6, #0
 8000fc0:	d0fa      	beq.n	8000fb8 <__sflush_r+0x18>
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8000fc8:	682f      	ldr	r7, [r5, #0]
 8000fca:	6a21      	ldr	r1, [r4, #32]
 8000fcc:	602b      	str	r3, [r5, #0]
 8000fce:	d032      	beq.n	8001036 <__sflush_r+0x96>
 8000fd0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8000fd2:	89a3      	ldrh	r3, [r4, #12]
 8000fd4:	075a      	lsls	r2, r3, #29
 8000fd6:	d505      	bpl.n	8000fe4 <__sflush_r+0x44>
 8000fd8:	6863      	ldr	r3, [r4, #4]
 8000fda:	1ac0      	subs	r0, r0, r3
 8000fdc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000fde:	b10b      	cbz	r3, 8000fe4 <__sflush_r+0x44>
 8000fe0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000fe2:	1ac0      	subs	r0, r0, r3
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	4602      	mov	r2, r0
 8000fe8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000fea:	4628      	mov	r0, r5
 8000fec:	6a21      	ldr	r1, [r4, #32]
 8000fee:	47b0      	blx	r6
 8000ff0:	1c43      	adds	r3, r0, #1
 8000ff2:	89a3      	ldrh	r3, [r4, #12]
 8000ff4:	d106      	bne.n	8001004 <__sflush_r+0x64>
 8000ff6:	6829      	ldr	r1, [r5, #0]
 8000ff8:	291d      	cmp	r1, #29
 8000ffa:	d82b      	bhi.n	8001054 <__sflush_r+0xb4>
 8000ffc:	4a28      	ldr	r2, [pc, #160]	; (80010a0 <__sflush_r+0x100>)
 8000ffe:	410a      	asrs	r2, r1
 8001000:	07d6      	lsls	r6, r2, #31
 8001002:	d427      	bmi.n	8001054 <__sflush_r+0xb4>
 8001004:	2200      	movs	r2, #0
 8001006:	6062      	str	r2, [r4, #4]
 8001008:	6922      	ldr	r2, [r4, #16]
 800100a:	04d9      	lsls	r1, r3, #19
 800100c:	6022      	str	r2, [r4, #0]
 800100e:	d504      	bpl.n	800101a <__sflush_r+0x7a>
 8001010:	1c42      	adds	r2, r0, #1
 8001012:	d101      	bne.n	8001018 <__sflush_r+0x78>
 8001014:	682b      	ldr	r3, [r5, #0]
 8001016:	b903      	cbnz	r3, 800101a <__sflush_r+0x7a>
 8001018:	6560      	str	r0, [r4, #84]	; 0x54
 800101a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800101c:	602f      	str	r7, [r5, #0]
 800101e:	2900      	cmp	r1, #0
 8001020:	d0ca      	beq.n	8000fb8 <__sflush_r+0x18>
 8001022:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001026:	4299      	cmp	r1, r3
 8001028:	d002      	beq.n	8001030 <__sflush_r+0x90>
 800102a:	4628      	mov	r0, r5
 800102c:	f7ff fbee 	bl	800080c <_free_r>
 8001030:	2000      	movs	r0, #0
 8001032:	6360      	str	r0, [r4, #52]	; 0x34
 8001034:	e7c1      	b.n	8000fba <__sflush_r+0x1a>
 8001036:	2301      	movs	r3, #1
 8001038:	4628      	mov	r0, r5
 800103a:	47b0      	blx	r6
 800103c:	1c41      	adds	r1, r0, #1
 800103e:	d1c8      	bne.n	8000fd2 <__sflush_r+0x32>
 8001040:	682b      	ldr	r3, [r5, #0]
 8001042:	2b00      	cmp	r3, #0
 8001044:	d0c5      	beq.n	8000fd2 <__sflush_r+0x32>
 8001046:	2b1d      	cmp	r3, #29
 8001048:	d001      	beq.n	800104e <__sflush_r+0xae>
 800104a:	2b16      	cmp	r3, #22
 800104c:	d101      	bne.n	8001052 <__sflush_r+0xb2>
 800104e:	602f      	str	r7, [r5, #0]
 8001050:	e7b2      	b.n	8000fb8 <__sflush_r+0x18>
 8001052:	89a3      	ldrh	r3, [r4, #12]
 8001054:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001058:	81a3      	strh	r3, [r4, #12]
 800105a:	e7ae      	b.n	8000fba <__sflush_r+0x1a>
 800105c:	690f      	ldr	r7, [r1, #16]
 800105e:	2f00      	cmp	r7, #0
 8001060:	d0aa      	beq.n	8000fb8 <__sflush_r+0x18>
 8001062:	0793      	lsls	r3, r2, #30
 8001064:	bf18      	it	ne
 8001066:	2300      	movne	r3, #0
 8001068:	680e      	ldr	r6, [r1, #0]
 800106a:	bf08      	it	eq
 800106c:	694b      	ldreq	r3, [r1, #20]
 800106e:	1bf6      	subs	r6, r6, r7
 8001070:	600f      	str	r7, [r1, #0]
 8001072:	608b      	str	r3, [r1, #8]
 8001074:	2e00      	cmp	r6, #0
 8001076:	dd9f      	ble.n	8000fb8 <__sflush_r+0x18>
 8001078:	4633      	mov	r3, r6
 800107a:	463a      	mov	r2, r7
 800107c:	4628      	mov	r0, r5
 800107e:	6a21      	ldr	r1, [r4, #32]
 8001080:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8001084:	47e0      	blx	ip
 8001086:	2800      	cmp	r0, #0
 8001088:	dc06      	bgt.n	8001098 <__sflush_r+0xf8>
 800108a:	89a3      	ldrh	r3, [r4, #12]
 800108c:	f04f 30ff 	mov.w	r0, #4294967295
 8001090:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001094:	81a3      	strh	r3, [r4, #12]
 8001096:	e790      	b.n	8000fba <__sflush_r+0x1a>
 8001098:	4407      	add	r7, r0
 800109a:	1a36      	subs	r6, r6, r0
 800109c:	e7ea      	b.n	8001074 <__sflush_r+0xd4>
 800109e:	bf00      	nop
 80010a0:	dfbffffe 	.word	0xdfbffffe

080010a4 <_fflush_r>:
 80010a4:	b538      	push	{r3, r4, r5, lr}
 80010a6:	690b      	ldr	r3, [r1, #16]
 80010a8:	4605      	mov	r5, r0
 80010aa:	460c      	mov	r4, r1
 80010ac:	b913      	cbnz	r3, 80010b4 <_fflush_r+0x10>
 80010ae:	2500      	movs	r5, #0
 80010b0:	4628      	mov	r0, r5
 80010b2:	bd38      	pop	{r3, r4, r5, pc}
 80010b4:	b118      	cbz	r0, 80010be <_fflush_r+0x1a>
 80010b6:	6a03      	ldr	r3, [r0, #32]
 80010b8:	b90b      	cbnz	r3, 80010be <_fflush_r+0x1a>
 80010ba:	f7ff fa9f 	bl	80005fc <__sinit>
 80010be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d0f3      	beq.n	80010ae <_fflush_r+0xa>
 80010c6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80010c8:	07d0      	lsls	r0, r2, #31
 80010ca:	d404      	bmi.n	80010d6 <_fflush_r+0x32>
 80010cc:	0599      	lsls	r1, r3, #22
 80010ce:	d402      	bmi.n	80010d6 <_fflush_r+0x32>
 80010d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80010d2:	f7ff fb98 	bl	8000806 <__retarget_lock_acquire_recursive>
 80010d6:	4628      	mov	r0, r5
 80010d8:	4621      	mov	r1, r4
 80010da:	f7ff ff61 	bl	8000fa0 <__sflush_r>
 80010de:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80010e0:	4605      	mov	r5, r0
 80010e2:	07da      	lsls	r2, r3, #31
 80010e4:	d4e4      	bmi.n	80010b0 <_fflush_r+0xc>
 80010e6:	89a3      	ldrh	r3, [r4, #12]
 80010e8:	059b      	lsls	r3, r3, #22
 80010ea:	d4e1      	bmi.n	80010b0 <_fflush_r+0xc>
 80010ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80010ee:	f7ff fb8b 	bl	8000808 <__retarget_lock_release_recursive>
 80010f2:	e7dd      	b.n	80010b0 <_fflush_r+0xc>

080010f4 <__swbuf_r>:
 80010f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80010f6:	460e      	mov	r6, r1
 80010f8:	4614      	mov	r4, r2
 80010fa:	4605      	mov	r5, r0
 80010fc:	b118      	cbz	r0, 8001106 <__swbuf_r+0x12>
 80010fe:	6a03      	ldr	r3, [r0, #32]
 8001100:	b90b      	cbnz	r3, 8001106 <__swbuf_r+0x12>
 8001102:	f7ff fa7b 	bl	80005fc <__sinit>
 8001106:	69a3      	ldr	r3, [r4, #24]
 8001108:	60a3      	str	r3, [r4, #8]
 800110a:	89a3      	ldrh	r3, [r4, #12]
 800110c:	071a      	lsls	r2, r3, #28
 800110e:	d525      	bpl.n	800115c <__swbuf_r+0x68>
 8001110:	6923      	ldr	r3, [r4, #16]
 8001112:	b31b      	cbz	r3, 800115c <__swbuf_r+0x68>
 8001114:	6823      	ldr	r3, [r4, #0]
 8001116:	6922      	ldr	r2, [r4, #16]
 8001118:	b2f6      	uxtb	r6, r6
 800111a:	1a98      	subs	r0, r3, r2
 800111c:	6963      	ldr	r3, [r4, #20]
 800111e:	4637      	mov	r7, r6
 8001120:	4283      	cmp	r3, r0
 8001122:	dc04      	bgt.n	800112e <__swbuf_r+0x3a>
 8001124:	4621      	mov	r1, r4
 8001126:	4628      	mov	r0, r5
 8001128:	f7ff ffbc 	bl	80010a4 <_fflush_r>
 800112c:	b9e0      	cbnz	r0, 8001168 <__swbuf_r+0x74>
 800112e:	68a3      	ldr	r3, [r4, #8]
 8001130:	3b01      	subs	r3, #1
 8001132:	60a3      	str	r3, [r4, #8]
 8001134:	6823      	ldr	r3, [r4, #0]
 8001136:	1c5a      	adds	r2, r3, #1
 8001138:	6022      	str	r2, [r4, #0]
 800113a:	701e      	strb	r6, [r3, #0]
 800113c:	6962      	ldr	r2, [r4, #20]
 800113e:	1c43      	adds	r3, r0, #1
 8001140:	429a      	cmp	r2, r3
 8001142:	d004      	beq.n	800114e <__swbuf_r+0x5a>
 8001144:	89a3      	ldrh	r3, [r4, #12]
 8001146:	07db      	lsls	r3, r3, #31
 8001148:	d506      	bpl.n	8001158 <__swbuf_r+0x64>
 800114a:	2e0a      	cmp	r6, #10
 800114c:	d104      	bne.n	8001158 <__swbuf_r+0x64>
 800114e:	4621      	mov	r1, r4
 8001150:	4628      	mov	r0, r5
 8001152:	f7ff ffa7 	bl	80010a4 <_fflush_r>
 8001156:	b938      	cbnz	r0, 8001168 <__swbuf_r+0x74>
 8001158:	4638      	mov	r0, r7
 800115a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800115c:	4621      	mov	r1, r4
 800115e:	4628      	mov	r0, r5
 8001160:	f000 f806 	bl	8001170 <__swsetup_r>
 8001164:	2800      	cmp	r0, #0
 8001166:	d0d5      	beq.n	8001114 <__swbuf_r+0x20>
 8001168:	f04f 37ff 	mov.w	r7, #4294967295
 800116c:	e7f4      	b.n	8001158 <__swbuf_r+0x64>
	...

08001170 <__swsetup_r>:
 8001170:	b538      	push	{r3, r4, r5, lr}
 8001172:	4b2a      	ldr	r3, [pc, #168]	; (800121c <__swsetup_r+0xac>)
 8001174:	4605      	mov	r5, r0
 8001176:	6818      	ldr	r0, [r3, #0]
 8001178:	460c      	mov	r4, r1
 800117a:	b118      	cbz	r0, 8001184 <__swsetup_r+0x14>
 800117c:	6a03      	ldr	r3, [r0, #32]
 800117e:	b90b      	cbnz	r3, 8001184 <__swsetup_r+0x14>
 8001180:	f7ff fa3c 	bl	80005fc <__sinit>
 8001184:	89a3      	ldrh	r3, [r4, #12]
 8001186:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800118a:	0718      	lsls	r0, r3, #28
 800118c:	d422      	bmi.n	80011d4 <__swsetup_r+0x64>
 800118e:	06d9      	lsls	r1, r3, #27
 8001190:	d407      	bmi.n	80011a2 <__swsetup_r+0x32>
 8001192:	2309      	movs	r3, #9
 8001194:	602b      	str	r3, [r5, #0]
 8001196:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800119a:	f04f 30ff 	mov.w	r0, #4294967295
 800119e:	81a3      	strh	r3, [r4, #12]
 80011a0:	e034      	b.n	800120c <__swsetup_r+0x9c>
 80011a2:	0758      	lsls	r0, r3, #29
 80011a4:	d512      	bpl.n	80011cc <__swsetup_r+0x5c>
 80011a6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80011a8:	b141      	cbz	r1, 80011bc <__swsetup_r+0x4c>
 80011aa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80011ae:	4299      	cmp	r1, r3
 80011b0:	d002      	beq.n	80011b8 <__swsetup_r+0x48>
 80011b2:	4628      	mov	r0, r5
 80011b4:	f7ff fb2a 	bl	800080c <_free_r>
 80011b8:	2300      	movs	r3, #0
 80011ba:	6363      	str	r3, [r4, #52]	; 0x34
 80011bc:	89a3      	ldrh	r3, [r4, #12]
 80011be:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80011c2:	81a3      	strh	r3, [r4, #12]
 80011c4:	2300      	movs	r3, #0
 80011c6:	6063      	str	r3, [r4, #4]
 80011c8:	6923      	ldr	r3, [r4, #16]
 80011ca:	6023      	str	r3, [r4, #0]
 80011cc:	89a3      	ldrh	r3, [r4, #12]
 80011ce:	f043 0308 	orr.w	r3, r3, #8
 80011d2:	81a3      	strh	r3, [r4, #12]
 80011d4:	6923      	ldr	r3, [r4, #16]
 80011d6:	b94b      	cbnz	r3, 80011ec <__swsetup_r+0x7c>
 80011d8:	89a3      	ldrh	r3, [r4, #12]
 80011da:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80011de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80011e2:	d003      	beq.n	80011ec <__swsetup_r+0x7c>
 80011e4:	4621      	mov	r1, r4
 80011e6:	4628      	mov	r0, r5
 80011e8:	f000 f85d 	bl	80012a6 <__smakebuf_r>
 80011ec:	89a0      	ldrh	r0, [r4, #12]
 80011ee:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80011f2:	f010 0301 	ands.w	r3, r0, #1
 80011f6:	d00a      	beq.n	800120e <__swsetup_r+0x9e>
 80011f8:	2300      	movs	r3, #0
 80011fa:	60a3      	str	r3, [r4, #8]
 80011fc:	6963      	ldr	r3, [r4, #20]
 80011fe:	425b      	negs	r3, r3
 8001200:	61a3      	str	r3, [r4, #24]
 8001202:	6923      	ldr	r3, [r4, #16]
 8001204:	b943      	cbnz	r3, 8001218 <__swsetup_r+0xa8>
 8001206:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800120a:	d1c4      	bne.n	8001196 <__swsetup_r+0x26>
 800120c:	bd38      	pop	{r3, r4, r5, pc}
 800120e:	0781      	lsls	r1, r0, #30
 8001210:	bf58      	it	pl
 8001212:	6963      	ldrpl	r3, [r4, #20]
 8001214:	60a3      	str	r3, [r4, #8]
 8001216:	e7f4      	b.n	8001202 <__swsetup_r+0x92>
 8001218:	2000      	movs	r0, #0
 800121a:	e7f7      	b.n	800120c <__swsetup_r+0x9c>
 800121c:	20000058 	.word	0x20000058

08001220 <_sbrk_r>:
 8001220:	b538      	push	{r3, r4, r5, lr}
 8001222:	2300      	movs	r3, #0
 8001224:	4d05      	ldr	r5, [pc, #20]	; (800123c <_sbrk_r+0x1c>)
 8001226:	4604      	mov	r4, r0
 8001228:	4608      	mov	r0, r1
 800122a:	602b      	str	r3, [r5, #0]
 800122c:	f7ff f84c 	bl	80002c8 <_sbrk>
 8001230:	1c43      	adds	r3, r0, #1
 8001232:	d102      	bne.n	800123a <_sbrk_r+0x1a>
 8001234:	682b      	ldr	r3, [r5, #0]
 8001236:	b103      	cbz	r3, 800123a <_sbrk_r+0x1a>
 8001238:	6023      	str	r3, [r4, #0]
 800123a:	bd38      	pop	{r3, r4, r5, pc}
 800123c:	200001b8 	.word	0x200001b8

08001240 <memchr>:
 8001240:	4603      	mov	r3, r0
 8001242:	b510      	push	{r4, lr}
 8001244:	b2c9      	uxtb	r1, r1
 8001246:	4402      	add	r2, r0
 8001248:	4293      	cmp	r3, r2
 800124a:	4618      	mov	r0, r3
 800124c:	d101      	bne.n	8001252 <memchr+0x12>
 800124e:	2000      	movs	r0, #0
 8001250:	e003      	b.n	800125a <memchr+0x1a>
 8001252:	7804      	ldrb	r4, [r0, #0]
 8001254:	3301      	adds	r3, #1
 8001256:	428c      	cmp	r4, r1
 8001258:	d1f6      	bne.n	8001248 <memchr+0x8>
 800125a:	bd10      	pop	{r4, pc}

0800125c <__swhatbuf_r>:
 800125c:	b570      	push	{r4, r5, r6, lr}
 800125e:	460c      	mov	r4, r1
 8001260:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001264:	4615      	mov	r5, r2
 8001266:	2900      	cmp	r1, #0
 8001268:	461e      	mov	r6, r3
 800126a:	b096      	sub	sp, #88	; 0x58
 800126c:	da0c      	bge.n	8001288 <__swhatbuf_r+0x2c>
 800126e:	89a3      	ldrh	r3, [r4, #12]
 8001270:	2100      	movs	r1, #0
 8001272:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001276:	bf0c      	ite	eq
 8001278:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800127c:	2340      	movne	r3, #64	; 0x40
 800127e:	2000      	movs	r0, #0
 8001280:	6031      	str	r1, [r6, #0]
 8001282:	602b      	str	r3, [r5, #0]
 8001284:	b016      	add	sp, #88	; 0x58
 8001286:	bd70      	pop	{r4, r5, r6, pc}
 8001288:	466a      	mov	r2, sp
 800128a:	f000 f849 	bl	8001320 <_fstat_r>
 800128e:	2800      	cmp	r0, #0
 8001290:	dbed      	blt.n	800126e <__swhatbuf_r+0x12>
 8001292:	9901      	ldr	r1, [sp, #4]
 8001294:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8001298:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800129c:	4259      	negs	r1, r3
 800129e:	4159      	adcs	r1, r3
 80012a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012a4:	e7eb      	b.n	800127e <__swhatbuf_r+0x22>

080012a6 <__smakebuf_r>:
 80012a6:	898b      	ldrh	r3, [r1, #12]
 80012a8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80012aa:	079d      	lsls	r5, r3, #30
 80012ac:	4606      	mov	r6, r0
 80012ae:	460c      	mov	r4, r1
 80012b0:	d507      	bpl.n	80012c2 <__smakebuf_r+0x1c>
 80012b2:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80012b6:	6023      	str	r3, [r4, #0]
 80012b8:	6123      	str	r3, [r4, #16]
 80012ba:	2301      	movs	r3, #1
 80012bc:	6163      	str	r3, [r4, #20]
 80012be:	b002      	add	sp, #8
 80012c0:	bd70      	pop	{r4, r5, r6, pc}
 80012c2:	466a      	mov	r2, sp
 80012c4:	ab01      	add	r3, sp, #4
 80012c6:	f7ff ffc9 	bl	800125c <__swhatbuf_r>
 80012ca:	9900      	ldr	r1, [sp, #0]
 80012cc:	4605      	mov	r5, r0
 80012ce:	4630      	mov	r0, r6
 80012d0:	f7ff fb04 	bl	80008dc <_malloc_r>
 80012d4:	b948      	cbnz	r0, 80012ea <__smakebuf_r+0x44>
 80012d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80012da:	059a      	lsls	r2, r3, #22
 80012dc:	d4ef      	bmi.n	80012be <__smakebuf_r+0x18>
 80012de:	f023 0303 	bic.w	r3, r3, #3
 80012e2:	f043 0302 	orr.w	r3, r3, #2
 80012e6:	81a3      	strh	r3, [r4, #12]
 80012e8:	e7e3      	b.n	80012b2 <__smakebuf_r+0xc>
 80012ea:	89a3      	ldrh	r3, [r4, #12]
 80012ec:	6020      	str	r0, [r4, #0]
 80012ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012f2:	81a3      	strh	r3, [r4, #12]
 80012f4:	9b00      	ldr	r3, [sp, #0]
 80012f6:	6120      	str	r0, [r4, #16]
 80012f8:	6163      	str	r3, [r4, #20]
 80012fa:	9b01      	ldr	r3, [sp, #4]
 80012fc:	b15b      	cbz	r3, 8001316 <__smakebuf_r+0x70>
 80012fe:	4630      	mov	r0, r6
 8001300:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001304:	f000 f81e 	bl	8001344 <_isatty_r>
 8001308:	b128      	cbz	r0, 8001316 <__smakebuf_r+0x70>
 800130a:	89a3      	ldrh	r3, [r4, #12]
 800130c:	f023 0303 	bic.w	r3, r3, #3
 8001310:	f043 0301 	orr.w	r3, r3, #1
 8001314:	81a3      	strh	r3, [r4, #12]
 8001316:	89a3      	ldrh	r3, [r4, #12]
 8001318:	431d      	orrs	r5, r3
 800131a:	81a5      	strh	r5, [r4, #12]
 800131c:	e7cf      	b.n	80012be <__smakebuf_r+0x18>
	...

08001320 <_fstat_r>:
 8001320:	b538      	push	{r3, r4, r5, lr}
 8001322:	2300      	movs	r3, #0
 8001324:	4d06      	ldr	r5, [pc, #24]	; (8001340 <_fstat_r+0x20>)
 8001326:	4604      	mov	r4, r0
 8001328:	4608      	mov	r0, r1
 800132a:	4611      	mov	r1, r2
 800132c:	602b      	str	r3, [r5, #0]
 800132e:	f7fe ffa5 	bl	800027c <_fstat>
 8001332:	1c43      	adds	r3, r0, #1
 8001334:	d102      	bne.n	800133c <_fstat_r+0x1c>
 8001336:	682b      	ldr	r3, [r5, #0]
 8001338:	b103      	cbz	r3, 800133c <_fstat_r+0x1c>
 800133a:	6023      	str	r3, [r4, #0]
 800133c:	bd38      	pop	{r3, r4, r5, pc}
 800133e:	bf00      	nop
 8001340:	200001b8 	.word	0x200001b8

08001344 <_isatty_r>:
 8001344:	b538      	push	{r3, r4, r5, lr}
 8001346:	2300      	movs	r3, #0
 8001348:	4d05      	ldr	r5, [pc, #20]	; (8001360 <_isatty_r+0x1c>)
 800134a:	4604      	mov	r4, r0
 800134c:	4608      	mov	r0, r1
 800134e:	602b      	str	r3, [r5, #0]
 8001350:	f7fe ffa3 	bl	800029a <_isatty>
 8001354:	1c43      	adds	r3, r0, #1
 8001356:	d102      	bne.n	800135e <_isatty_r+0x1a>
 8001358:	682b      	ldr	r3, [r5, #0]
 800135a:	b103      	cbz	r3, 800135e <_isatty_r+0x1a>
 800135c:	6023      	str	r3, [r4, #0]
 800135e:	bd38      	pop	{r3, r4, r5, pc}
 8001360:	200001b8 	.word	0x200001b8

08001364 <_init>:
 8001364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001366:	bf00      	nop
 8001368:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800136a:	bc08      	pop	{r3}
 800136c:	469e      	mov	lr, r3
 800136e:	4770      	bx	lr

08001370 <_fini>:
 8001370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001372:	bf00      	nop
 8001374:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001376:	bc08      	pop	{r3}
 8001378:	469e      	mov	lr, r3
 800137a:	4770      	bx	lr
